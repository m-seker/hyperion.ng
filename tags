!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AMSTREAM_IOC_GET_VIDEO_DISABLE	libsrc/grabber/amlogic/Amvideocap.h	20;"	d
AMVIDEOCAP_IOC_MAGIC	libsrc/grabber/amlogic/Amvideocap.h	9;"	d
AMVIDEOCAP_IOW_SET_WANTFRAME_AT_FLAGS	libsrc/grabber/amlogic/Amvideocap.h	17;"	d
AMVIDEOCAP_IOW_SET_WANTFRAME_HEIGHT	libsrc/grabber/amlogic/Amvideocap.h	16;"	d
AMVIDEOCAP_IOW_SET_WANTFRAME_WIDTH	libsrc/grabber/amlogic/Amvideocap.h	15;"	d
API	include/api/API.h	/^class API : public QObject$/;"	c
API	libsrc/api/API.cpp	/^API::API(Logger *log, const bool &localConnection, QObject *parent)$/;"	f	class:API
API_BASE_PATH	libsrc/leddevice/dev_net/LedDeviceNanoleaf.cpp	/^const char API_BASE_PATH[] = "\/api\/v1\/%1\/";$/;"	m	namespace:__anon2	file:
API_BASE_PATH	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const char API_BASE_PATH[] = "\/api\/%1\/";$/;"	m	namespace:__anon9	file:
API_BASE_PATH	libsrc/leddevice/dev_net/LedDeviceWled.cpp	/^const char API_BASE_PATH[] = "\/json\/";$/;"	m	namespace:__anon10	file:
API_BRIGHTNESS	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const char API_BRIGHTNESS[] = "bri";$/;"	m	namespace:__anon9	file:
API_COLOR_FLOW_MODE	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^		API_COLOR_FLOW_MODE,$/;"	e	enum:YeelightLight::API_MODE
API_COMMAND_ID	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^const char API_COMMAND_ID[] = "id";$/;"	m	namespace:__anon3	file:
API_COMMAND_METHOD	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^const char API_COMMAND_METHOD[] = "method";$/;"	m	namespace:__anon3	file:
API_COMMAND_PARAMS	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^const char API_COMMAND_PARAMS[] = "params";$/;"	m	namespace:__anon3	file:
API_COMMAND_PROPS	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^const char API_COMMAND_PROPS[] = "props";$/;"	m	namespace:__anon3	file:
API_CONFIG	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const char API_CONFIG[] = "config";$/;"	m	namespace:__anon9	file:
API_CT_MODE	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^		API_CT_MODE,$/;"	e	enum:YeelightLight::API_MODE
API_DEFAULT_PORT	libsrc/leddevice/dev_net/LedDeviceNanoleaf.cpp	/^const int API_DEFAULT_PORT = 16021;$/;"	m	namespace:__anon2	file:
API_DEFAULT_PORT	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const int API_DEFAULT_PORT = -1; \/\/Use default port per communication scheme$/;"	m	namespace:__anon9	file:
API_DEFAULT_PORT	libsrc/leddevice/dev_net/LedDeviceWled.cpp	/^const int API_DEFAULT_PORT = -1; \/\/Use default port per communication scheme$/;"	m	namespace:__anon10	file:
API_DEFAULT_PORT	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^const int API_DEFAULT_PORT = 55443;$/;"	m	namespace:__anon3	file:
API_DEFAULT_QUOTA_WAIT_TIME	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^const quint16 API_DEFAULT_QUOTA_WAIT_TIME = 1000;$/;"	m	namespace:__anon3	file:
API_EFFECT	libsrc/leddevice/dev_net/LedDeviceNanoleaf.cpp	/^const char API_EFFECT[] = "effects";$/;"	m	namespace:__anon2	file:
API_EFFECT	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	enum API_EFFECT{$/;"	g	class:YeelightLight
API_EFFECT_SMOOTH	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^		API_EFFECT_SMOOTH,$/;"	e	enum:YeelightLight::API_EFFECT
API_EFFECT_SUDDEN	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^		API_EFFECT_SUDDEN$/;"	e	enum:YeelightLight::API_EFFECT
API_ERROR	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const char API_ERROR[] = "error";$/;"	m	namespace:__anon9	file:
API_ERROR	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^const char API_ERROR[] = "error";$/;"	m	namespace:__anon3	file:
API_ERROR	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^		API_ERROR,$/;"	e	enum:YeelightResponse::API_REPLY
API_ERROR_ADDRESS	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const char API_ERROR_ADDRESS[] = "address";$/;"	m	namespace:__anon9	file:
API_ERROR_CODE	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^const char API_ERROR_CODE[] = "code";$/;"	m	namespace:__anon3	file:
API_ERROR_DESCRIPTION	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const char API_ERROR_DESCRIPTION[] = "description";$/;"	m	namespace:__anon9	file:
API_ERROR_MESSAGE	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^const char API_ERROR_MESSAGE[] = "message";$/;"	m	namespace:__anon3	file:
API_ERROR_TYPE	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const char API_ERROR_TYPE[] = "type";$/;"	m	namespace:__anon9	file:
API_EXT_MODE_STRING_V2	libsrc/leddevice/dev_net/LedDeviceNanoleaf.cpp	/^const char API_EXT_MODE_STRING_V2[] = "{\\"write\\" : {\\"command\\" : \\"display\\", \\"animType\\" : \\"extControl\\", \\"extControlVersion\\" : \\"v2\\"}}";$/;"	m	namespace:__anon2	file:
API_GROUPS	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const char API_GROUPS[] = "groups";$/;"	m	namespace:__anon9	file:
API_GROUP_NAME	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const char API_GROUP_NAME[] = "name";$/;"	m	namespace:__anon9	file:
API_GROUP_TYPE	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const char API_GROUP_TYPE[] = "type";$/;"	m	namespace:__anon9	file:
API_GROUP_TYPE_ENTERTAINMENT	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const char API_GROUP_TYPE_ENTERTAINMENT[] = "Entertainment";$/;"	m	namespace:__anon9	file:
API_HSV_MODE	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^		API_HSV_MODE,$/;"	e	enum:YeelightLight::API_MODE
API_LIGHTS	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const char API_LIGHTS[] = "lights";$/;"	m	namespace:__anon9	file:
API_METHOD_GETPROP	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^const char API_METHOD_GETPROP[] = "get_prop";$/;"	m	namespace:__anon13
API_METHOD_MUSIC_MODE	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^const char API_METHOD_MUSIC_MODE[] = "set_music";$/;"	m	namespace:__anon13
API_METHOD_MUSIC_MODE_OFF	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^const int API_METHOD_MUSIC_MODE_OFF = 0;$/;"	m	namespace:__anon13
API_METHOD_MUSIC_MODE_ON	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^const int API_METHOD_MUSIC_MODE_ON = 1;$/;"	m	namespace:__anon13
API_METHOD_POWER	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^const char API_METHOD_POWER[] = "set_power";$/;"	m	namespace:__anon13
API_METHOD_POWER_OFF	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^const char API_METHOD_POWER_OFF[] = "off";$/;"	m	namespace:__anon13
API_METHOD_POWER_ON	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^const char API_METHOD_POWER_ON[] = "on";$/;"	m	namespace:__anon13
API_METHOD_SETRGB	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^const char API_METHOD_SETRGB[] = "set_rgb";$/;"	m	namespace:__anon13
API_METHOD_SETSCENE	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^const char API_METHOD_SETSCENE[] = "set_scene";$/;"	m	namespace:__anon13
API_MODE	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	enum API_MODE{$/;"	g	class:YeelightLight
API_MODEID	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const char API_MODEID[] = "modelid";$/;"	m	namespace:__anon9	file:
API_NIGHT_LIGHT_MODE	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^		API_NIGHT_LIGHT_MODE$/;"	e	enum:YeelightLight::API_MODE
API_NOTIFICATION	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^		API_NOTIFICATION,$/;"	e	enum:YeelightResponse::API_REPLY
API_OK	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^		API_OK,$/;"	e	enum:YeelightResponse::API_REPLY
API_PANELLAYOUT	libsrc/leddevice/dev_net/LedDeviceNanoleaf.cpp	/^const char API_PANELLAYOUT[] = "panelLayout";$/;"	m	namespace:__anon2	file:
API_PARAM_CLASS_COLOR	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^const char API_PARAM_CLASS_COLOR[] = "color";$/;"	m	namespace:__anon3	file:
API_PARAM_CLASS_HSV	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^const char API_PARAM_CLASS_HSV[] = "hsv";$/;"	m	namespace:__anon3	file:
API_PARAM_EFFECT_SMOOTH	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^const char API_PARAM_EFFECT_SMOOTH[] = "smooth";$/;"	m	namespace:__anon13
API_PARAM_EFFECT_SUDDEN	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^const char API_PARAM_EFFECT_SUDDEN[] = "sudden";$/;"	m	namespace:__anon13
API_PATH_INFO	libsrc/leddevice/dev_net/LedDeviceWled.cpp	/^const char API_PATH_INFO[] = "info";$/;"	m	namespace:__anon10	file:
API_PATH_STATE	libsrc/leddevice/dev_net/LedDeviceWled.cpp	/^const char API_PATH_STATE[] = "state";$/;"	m	namespace:__anon10	file:
API_PROP_BRIGHT	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^const char API_PROP_BRIGHT[] = "bright";$/;"	m	namespace:__anon3	file:
API_PROP_COLORFLOW	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^const char API_PROP_COLORFLOW[] = "cf";$/;"	m	namespace:__anon3	file:
API_PROP_CT	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^const char API_PROP_CT[] = "ct";$/;"	m	namespace:__anon3	file:
API_PROP_FWVER	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^const char API_PROP_FWVER[] = "fw_ver";$/;"	m	namespace:__anon3	file:
API_PROP_MODEL	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^const char API_PROP_MODEL[] = "model";$/;"	m	namespace:__anon3	file:
API_PROP_MUSIC	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^const char API_PROP_MUSIC[] = "music_on";$/;"	m	namespace:__anon3	file:
API_PROP_NAME	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^const char API_PROP_NAME[] = "name";$/;"	m	namespace:__anon3	file:
API_PROP_POWER	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^const char API_PROP_POWER[] = "power";$/;"	m	namespace:__anon3	file:
API_PROP_RGB	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^const char API_PROP_RGB[] = "rgb";$/;"	m	namespace:__anon3	file:
API_REPLY	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	enum API_REPLY{$/;"	g	class:YeelightResponse
API_RESULT	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^const char API_RESULT[] = "result";$/;"	m	namespace:__anon3	file:
API_RESULT_ID	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^const char API_RESULT_ID[] = "id";$/;"	m	namespace:__anon3	file:
API_RGB_MODE	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^		API_RGB_MODE,$/;"	e	enum:YeelightLight::API_MODE
API_ROOT	libsrc/leddevice/dev_net/LedDeviceNanoleaf.cpp	/^const char API_ROOT[] = "";$/;"	m	namespace:__anon2	file:
API_ROOT	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const char API_ROOT[] = "";$/;"	m	namespace:__anon9	file:
API_SSL_SEED_CUSTOM	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const char API_SSL_SEED_CUSTOM[] = "dtls_client";$/;"	m	namespace:__anon9	file:
API_SSL_SERVER_NAME	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const char API_SSL_SERVER_NAME[] = "Hue";$/;"	m	namespace:__anon9	file:
API_SSL_SERVER_PORT	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const int API_SSL_SERVER_PORT = 2100;$/;"	m	namespace:__anon9	file:
API_STATE	libsrc/leddevice/dev_net/LedDeviceNanoleaf.cpp	/^const char API_STATE[] ="state";$/;"	m	namespace:__anon2	file:
API_STATE	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const char API_STATE[] = "state";$/;"	m	namespace:__anon9	file:
API_STATE_ON	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const char API_STATE_ON[] = "on";$/;"	m	namespace:__anon9	file:
API_STATE_VALUE_FALSE	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const char API_STATE_VALUE_FALSE[] = "false";$/;"	m	namespace:__anon9	file:
API_STATE_VALUE_TRUE	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const char API_STATE_VALUE_TRUE[] = "true";$/;"	m	namespace:__anon9	file:
API_STREAM	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const char API_STREAM[] = "stream";$/;"	m	namespace:__anon9	file:
API_STREAM_ACTIVE	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const char API_STREAM_ACTIVE[] = "active";$/;"	m	namespace:__anon9	file:
API_STREAM_ACTIVE_VALUE_FALSE	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const char API_STREAM_ACTIVE_VALUE_FALSE[] = "false";$/;"	m	namespace:__anon9	file:
API_STREAM_ACTIVE_VALUE_TRUE	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const char API_STREAM_ACTIVE_VALUE_TRUE[] = "true";$/;"	m	namespace:__anon9	file:
API_STREAM_OWNER	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const char API_STREAM_OWNER[] = "owner";$/;"	m	namespace:__anon9	file:
API_STREAM_RESPONSE_FORMAT	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const char API_STREAM_RESPONSE_FORMAT[] = "\/%1\/%2\/%3\/%4";$/;"	m	namespace:__anon9	file:
API_SUCCESS	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const char API_SUCCESS[] = "success";$/;"	m	namespace:__anon9	file:
API_TRANSITIONTIME	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const char API_TRANSITIONTIME[] = "transitiontime";$/;"	m	namespace:__anon9	file:
API_TURN_ON_MODE	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^		API_TURN_ON_MODE,$/;"	e	enum:YeelightLight::API_MODE
API_XY_COORDINATES	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const char API_XY_COORDINATES[] = "xy";$/;"	m	namespace:__anon9	file:
ARTNET_DEFAULT_PORT	libsrc/leddevice/dev_net/LedDeviceUdpArtNet.cpp	/^const ushort ARTNET_DEFAULT_PORT = 6454;$/;"	v
AWAY	libsrc/webserver/WebSocketUtils.h	/^		AWAY      = 1001,$/;"	e	enum:CLOSECODE::value
Accept	libsrc/webserver/QtHttpHeader.cpp	/^const QByteArray & QtHttpHeader::Accept               = QByteArrayLiteral ("Accept");$/;"	m	class:QtHttpHeader	file:
Accept	libsrc/webserver/QtHttpHeader.h	/^	static const QByteArray & Accept;$/;"	m	class:QtHttpHeader
AcceptCharset	libsrc/webserver/QtHttpHeader.cpp	/^const QByteArray & QtHttpHeader::AcceptCharset        = QByteArrayLiteral ("Accept-Charset");$/;"	m	class:QtHttpHeader	file:
AcceptCharset	libsrc/webserver/QtHttpHeader.h	/^	static const QByteArray & AcceptCharset;$/;"	m	class:QtHttpHeader
AcceptEncoding	libsrc/webserver/QtHttpHeader.cpp	/^const QByteArray & QtHttpHeader::AcceptEncoding       = QByteArrayLiteral ("Accept-Encoding");$/;"	m	class:QtHttpHeader	file:
AcceptEncoding	libsrc/webserver/QtHttpHeader.h	/^	static const QByteArray & AcceptEncoding;$/;"	m	class:QtHttpHeader
AcceptLanguage	libsrc/webserver/QtHttpHeader.cpp	/^const QByteArray & QtHttpHeader::AcceptLanguage       = QByteArrayLiteral ("Accept-Language");$/;"	m	class:QtHttpHeader	file:
AcceptLanguage	libsrc/webserver/QtHttpHeader.h	/^	static const QByteArray & AcceptLanguage;$/;"	m	class:QtHttpHeader
AccessControlAllow	libsrc/webserver/QtHttpHeader.cpp	/^const QByteArray & QtHttpHeader::AccessControlAllow   = QByteArrayLiteral ("Access-Control-Allow-Origin");$/;"	m	class:QtHttpHeader	file:
AccessControlAllow	libsrc/webserver/QtHttpHeader.h	/^	static const QByteArray & AccessControlAllow;$/;"	m	class:QtHttpHeader
ActiveEffectDefinition	include/effectengine/ActiveEffectDefinition.h	/^struct ActiveEffectDefinition$/;"	s
AmlogicGrabber	include/grabber/AmlogicGrabber.h	/^class AmlogicGrabber : public Grabber$/;"	c
AmlogicGrabber	libsrc/grabber/amlogic/AmlogicGrabber.cpp	/^AmlogicGrabber::AmlogicGrabber(const unsigned width, const unsigned height)$/;"	f	class:AmlogicGrabber
AmlogicWrapper	include/grabber/AmlogicWrapper.h	/^class AmlogicWrapper : public GrabberWrapper$/;"	c
AmlogicWrapper	libsrc/grabber/amlogic/AmlogicWrapper.cpp	/^AmlogicWrapper::AmlogicWrapper(const unsigned grabWidth, const unsigned grabHeight)$/;"	f	class:AmlogicWrapper
AuthDefinition	include/hyperion/AuthManager.h	/^	struct AuthDefinition$/;"	s	class:AuthManager
AuthManager	include/hyperion/AuthManager.h	/^class AuthManager : public QObject$/;"	c
AuthManager	libsrc/hyperion/AuthManager.cpp	/^AuthManager::AuthManager(QObject *parent)$/;"	f	class:AuthManager
AuthTable	include/db/AuthTable.h	/^	AuthTable(const QString& rootPath = "", QObject* parent = nullptr)$/;"	f	class:AuthTable
AuthTable	include/db/AuthTable.h	/^class AuthTable : public DBManager$/;"	c
Authorization	libsrc/webserver/QtHttpHeader.cpp	/^const QByteArray & QtHttpHeader::Authorization        = QByteArrayLiteral ("Authorization");$/;"	m	class:QtHttpHeader	file:
Authorization	libsrc/webserver/QtHttpHeader.h	/^	static const QByteArray & Authorization;$/;"	m	class:QtHttpHeader
AwaitingContent	libsrc/webserver/QtHttpClientWrapper.h	/^		AwaitingContent =  2,$/;"	e	enum:QtHttpClientWrapper::ParsingStatus
AwaitingHeaders	libsrc/webserver/QtHttpClientWrapper.h	/^		AwaitingHeaders =  1,$/;"	e	enum:QtHttpClientWrapper::ParsingStatus
AwaitingRequest	libsrc/webserver/QtHttpClientWrapper.h	/^		AwaitingRequest =  0,$/;"	e	enum:QtHttpClientWrapper::ParsingStatus
B0	libsrc/effectengine/EffectEngine.cpp	3;"	d	file:
BGCONFIG_ARRAY	include/hyperion/BGEffectHandler.h	38;"	d
BGCONFIG_ARRAY	include/hyperion/BGEffectHandler.h	66;"	d
BGEFFECT	include/utils/settings.h	/^		BGEFFECT,$/;"	e	enum:settings::type
BGEffectHandler	include/hyperion/BGEffectHandler.h	/^	BGEffectHandler(Hyperion* hyperion)$/;"	f	class:BGEffectHandler
BGEffectHandler	include/hyperion/BGEffectHandler.h	/^class BGEffectHandler : public QObject$/;"	c
BGR16	include/utils/PixelFormat.h	/^	BGR16,$/;"	m	class:PixelFormat
BGR24	include/utils/PixelFormat.h	/^	BGR24,$/;"	m	class:PixelFormat
BGR32	include/utils/PixelFormat.h	/^	BGR32,$/;"	m	class:PixelFormat
BHB0_FIN	libsrc/webserver/WebSocketClient.h	/^	static uint8_t const BHB0_FIN    = 0x80;$/;"	m	class:WebSocketClient
BHB0_OPCODE	libsrc/webserver/WebSocketClient.h	/^	static uint8_t const BHB0_OPCODE = 0x0F;$/;"	m	class:WebSocketClient
BHB0_RSV1	libsrc/webserver/WebSocketClient.h	/^	static uint8_t const BHB0_RSV1   = 0x40;$/;"	m	class:WebSocketClient
BHB0_RSV2	libsrc/webserver/WebSocketClient.h	/^	static uint8_t const BHB0_RSV2   = 0x20;$/;"	m	class:WebSocketClient
BHB0_RSV3	libsrc/webserver/WebSocketClient.h	/^	static uint8_t const BHB0_RSV3   = 0x10;$/;"	m	class:WebSocketClient
BHB1_MASK	libsrc/webserver/WebSocketClient.h	/^	static uint8_t const BHB1_MASK    = 0x80;$/;"	m	class:WebSocketClient
BHB1_PAYLOAD	libsrc/webserver/WebSocketClient.h	/^	static uint8_t const BHB1_PAYLOAD = 0x7F;$/;"	m	class:WebSocketClient
BIG_MSG	libsrc/webserver/WebSocketUtils.h	/^		BIG_MSG   = 1009,$/;"	e	enum:CLOSECODE::value
BINARY	libsrc/webserver/WebSocketUtils.h	/^		BINARY = 0x2,$/;"	e	enum:OPCODE::value
BLACK	include/utils/ColorArgb.h	/^	static ColorArgb BLACK;$/;"	m	struct:ColorArgb
BLACK	include/utils/ColorBgr.h	/^	static ColorBgr BLACK;$/;"	m	struct:ColorBgr
BLACK	include/utils/ColorRgb.h	/^	static ColorRgb BLACK;$/;"	m	struct:ColorRgb
BLACK	include/utils/ColorRgba.h	/^	static ColorRgba BLACK;$/;"	m	struct:ColorRgba
BLACK	include/utils/ColorRgbw.h	/^	static ColorRgbw BLACK;$/;"	m	struct:ColorRgbw
BLACK	libsrc/utils/ColorArgb.cpp	/^ColorArgb ColorArgb::BLACK = { 255,   0,   0,   0 };$/;"	m	class:ColorArgb	file:
BLACK	libsrc/utils/ColorBgr.cpp	/^ColorBgr ColorBgr::BLACK = {   0,   0,   0 };$/;"	m	class:ColorBgr	file:
BLACK	libsrc/utils/ColorRgb.cpp	/^ColorRgb ColorRgb::BLACK = {   0,   0,   0 };$/;"	m	class:ColorRgb	file:
BLACK	libsrc/utils/ColorRgba.cpp	/^ColorRgba ColorRgba::BLACK = {   0,   0,   0, 255 };$/;"	m	class:ColorRgba	file:
BLACK	libsrc/utils/ColorRgbw.cpp	/^ColorRgbw ColorRgbw::BLACK = {   0,   0,   0,   0 };$/;"	m	class:ColorRgbw	file:
BLACKBORDER	include/utils/settings.h	/^		BLACKBORDER,$/;"	e	enum:settings::type
BLUE	include/utils/ColorArgb.h	/^	static ColorArgb BLUE;$/;"	m	struct:ColorArgb
BLUE	include/utils/ColorBgr.h	/^	static ColorBgr BLUE;$/;"	m	struct:ColorBgr
BLUE	include/utils/ColorRgb.h	/^	static ColorRgb BLUE;$/;"	m	struct:ColorRgb
BLUE	include/utils/ColorRgba.h	/^	static ColorRgba BLUE;$/;"	m	struct:ColorRgba
BLUE	include/utils/ColorRgbw.h	/^	static ColorRgbw BLUE;$/;"	m	struct:ColorRgbw
BLUE	include/utils/RgbChannelAdjustment.h	/^	enum ColorChannel { RED=0, GREEN=1, BLUE=2 };$/;"	e	enum:RgbChannelAdjustment::ColorChannel
BLUE	libsrc/utils/ColorArgb.cpp	/^ColorArgb ColorArgb::BLUE  = { 255,   0,   0, 255 };$/;"	m	class:ColorArgb	file:
BLUE	libsrc/utils/ColorBgr.cpp	/^ColorBgr ColorBgr::BLUE  = { 255,   0,   0 };$/;"	m	class:ColorBgr	file:
BLUE	libsrc/utils/ColorRgb.cpp	/^ColorRgb ColorRgb::BLUE  = {   0,   0, 255 };$/;"	m	class:ColorRgb	file:
BLUE	libsrc/utils/ColorRgba.cpp	/^ColorRgba ColorRgba::BLUE  = {   0,   0, 255, 255 };$/;"	m	class:ColorRgba	file:
BLUE	libsrc/utils/ColorRgbw.cpp	/^ColorRgbw ColorRgbw::BLUE  = {   0,   0, 255,   0 };$/;"	m	class:ColorRgbw	file:
BOBLSERVER	include/utils/settings.h	/^		BOBLSERVER,$/;"	e	enum:settings::type
BONJOURRECORD_H	include/bonjour/bonjourrecord.h	30;"	d
BONJOURSERVICEBROWSER_H	include/bonjour/bonjourservicebrowser.h	30;"	d
BONJOURSERVICEREGISTER_H	include/bonjour/bonjourserviceregister.h	30;"	d
BONJOURSERVICERESOLVER_H	include/bonjour/bonjourserviceresolver.h	30;"	d
BadGateway	libsrc/webserver/QtHttpReply.h	/^		BadGateway         = 502,$/;"	e	enum:QtHttpReply::StatusCode
BadRequest	libsrc/webserver/QtHttpReply.h	/^		BadRequest         = 400,$/;"	e	enum:QtHttpReply::StatusCode
BlackBorder	include/blackborder/BlackBorderDetector.h	/^	struct BlackBorder$/;"	s	namespace:hyperion
BlackBorderDetector	include/blackborder/BlackBorderDetector.h	/^	class BlackBorderDetector$/;"	c	namespace:hyperion
BlackBorderDetector	libsrc/blackborder/BlackBorderDetector.cpp	/^BlackBorderDetector::BlackBorderDetector(double threshold)$/;"	f	class:BlackBorderDetector
BlackBorderProcessor	include/blackborder/BlackBorderProcessor.h	/^	class BlackBorderProcessor : public QObject$/;"	c	namespace:hyperion
BlackBorderProcessor	libsrc/blackborder/BlackBorderProcessor.cpp	/^BlackBorderProcessor::BlackBorderProcessor(Hyperion* hyperion, QObject* parent)$/;"	f	class:BlackBorderProcessor
BoblightClientConnection	libsrc/boblightserver/BoblightClientConnection.cpp	/^BoblightClientConnection::BoblightClientConnection(Hyperion* hyperion, QTcpSocket *socket, const int priority)$/;"	f	class:BoblightClientConnection
BoblightClientConnection	libsrc/boblightserver/BoblightClientConnection.h	/^class BoblightClientConnection : public QObject$/;"	c
BoblightServer	include/boblightserver/BoblightServer.h	/^class BoblightServer : public QObject$/;"	c
BoblightServer	libsrc/boblightserver/BoblightServer.cpp	/^BoblightServer::BoblightServer(Hyperion* hyperion,const QJsonDocument& config)$/;"	f	class:BoblightServer
BonjourBrowserWrapper	include/bonjour/bonjourbrowserwrapper.h	/^class BonjourBrowserWrapper : public QObject$/;"	c
BonjourBrowserWrapper	libsrc/bonjour/bonjourbrowserwrapper.cpp	/^BonjourBrowserWrapper::BonjourBrowserWrapper(QObject * parent)$/;"	f	class:BonjourBrowserWrapper
BonjourRecord	include/bonjour/bonjourrecord.h	/^	BonjourRecord() : port(-1) {}$/;"	f	class:BonjourRecord
BonjourRecord	include/bonjour/bonjourrecord.h	/^	BonjourRecord(const QString &name, const QString &regType, const QString &domain)$/;"	f	class:BonjourRecord
BonjourRecord	include/bonjour/bonjourrecord.h	/^	BonjourRecord(const char *name, const char *regType, const char *domain)$/;"	f	class:BonjourRecord
BonjourRecord	include/bonjour/bonjourrecord.h	/^class BonjourRecord$/;"	c
BonjourServiceBrowser	include/bonjour/bonjourservicebrowser.h	/^class BonjourServiceBrowser : public QObject$/;"	c
BonjourServiceBrowser	libsrc/bonjour/bonjourservicebrowser.cpp	/^BonjourServiceBrowser::BonjourServiceBrowser(QObject *parent)$/;"	f	class:BonjourServiceBrowser
BonjourServiceRegister	include/bonjour/bonjourserviceregister.h	/^class BonjourServiceRegister : public QObject$/;"	c
BonjourServiceRegister	libsrc/bonjour/bonjourserviceregister.cpp	/^BonjourServiceRegister::BonjourServiceRegister(QObject *parent)$/;"	f	class:BonjourServiceRegister
BonjourServiceResolver	include/bonjour/bonjourserviceresolver.h	/^class BonjourServiceResolver : public QObject$/;"	c
BonjourServiceResolver	libsrc/bonjour/bonjourserviceresolver.cpp	/^BonjourServiceResolver::BonjourServiceResolver(QObject *parent)$/;"	f	class:BonjourServiceResolver
BooleanOption	include/commandline/BooleanOption.h	/^	BooleanOption(const QCommandLineOption &other)$/;"	f	class:commandline::BooleanOption
BooleanOption	include/commandline/BooleanOption.h	/^	BooleanOption(const QString &name,$/;"	f	class:commandline::BooleanOption
BooleanOption	include/commandline/BooleanOption.h	/^	BooleanOption(const QStringList &names,$/;"	f	class:commandline::BooleanOption
BooleanOption	include/commandline/BooleanOption.h	/^class BooleanOption: public Option$/;"	c	namespace:commandline
BufferSize	libsrc/grabber/amlogic/IonBuffer.h	/^	size_t BufferSize() const$/;"	f	class:IonBuffer
CAPTURE_DEVICE	libsrc/grabber/amlogic/AmlogicGrabber.cpp	21;"	d	file:
CAP_FLAG_AT_CURRENT	libsrc/grabber/amlogic/Amvideocap.h	10;"	d
CAP_FLAG_AT_END	libsrc/grabber/amlogic/Amvideocap.h	12;"	d
CAP_FLAG_AT_TIME_WINDOW	libsrc/grabber/amlogic/Amvideocap.h	11;"	d
CFData	include/grabber/OsxFrameGrabberMock.h	/^typedef unsigned char CFData;$/;"	t
CFDataGetBytePtr	libsrc/grabber/osx/OsxFrameGrabberMock.cpp	/^unsigned char* CFDataGetBytePtr(CFDataRef imgData)$/;"	f
CFDataRef	include/grabber/OsxFrameGrabberMock.h	/^typedef CFData* CFDataRef;$/;"	t
CFRelease	libsrc/grabber/osx/OsxFrameGrabberMock.cpp	/^void CFRelease(CFDataRef imgData)$/;"	f
CGDataProviderCopyData	libsrc/grabber/osx/OsxFrameGrabberMock.cpp	/^CFDataRef CGDataProviderCopyData(CGImageRef image)$/;"	f
CGDirectDisplayID	include/grabber/OsxFrameGrabberMock.h	/^typedef int CGDirectDisplayID;$/;"	t
CGDisplayCount	include/grabber/OsxFrameGrabberMock.h	/^typedef unsigned CGDisplayCount;$/;"	t
CGDisplayCreateImage	libsrc/grabber/osx/OsxFrameGrabberMock.cpp	/^CGImageRef CGDisplayCreateImage(CGDirectDisplayID display)$/;"	f
CGGetActiveDisplayList	libsrc/grabber/osx/OsxFrameGrabberMock.cpp	/^void CGGetActiveDisplayList(int max, CGDirectDisplayID *displays, CGDisplayCount *displayCount)$/;"	f
CGIHANDLER_H	libsrc/webserver/CgiHandler.h	2;"	d
CGImage	include/grabber/OsxFrameGrabberMock.h	/^typedef Image<ColorRgb> CGImage;$/;"	t
CGImageGetBitsPerPixel	libsrc/grabber/osx/OsxFrameGrabberMock.cpp	/^unsigned CGImageGetBitsPerPixel(CGImageRef)$/;"	f
CGImageGetBytesPerRow	libsrc/grabber/osx/OsxFrameGrabberMock.cpp	/^unsigned CGImageGetBytesPerRow(CGImageRef image)$/;"	f
CGImageGetDataProvider	libsrc/grabber/osx/OsxFrameGrabberMock.cpp	/^CGImageRef CGImageGetDataProvider(CGImageRef image)$/;"	f
CGImageGetHeight	libsrc/grabber/osx/OsxFrameGrabberMock.cpp	/^unsigned CGImageGetHeight(CGImageRef image)$/;"	f
CGImageGetWidth	libsrc/grabber/osx/OsxFrameGrabberMock.cpp	/^unsigned CGImageGetWidth(CGImageRef image)$/;"	f
CGImageRef	include/grabber/OsxFrameGrabberMock.h	/^typedef CGImage* CGImageRef;$/;"	t
CGImageRelease	libsrc/grabber/osx/OsxFrameGrabberMock.cpp	/^void CGImageRelease(CGImageRef image)$/;"	f
CLEAR	libsrc/grabber/v4l2/V4L2Grabber.cpp	27;"	d	file:
CLOSE	libsrc/webserver/WebSocketUtils.h	/^		CLOSE = 0x8,$/;"	e	enum:OPCODE::value
CLOSECODE	libsrc/webserver/WebSocketUtils.h	/^namespace CLOSECODE$/;"	n
CMD_NOP	libsrc/leddevice/dev_hid/LedDeviceLightpack.cpp	/^	CMD_NOP = 0x0F$/;"	e	enum:COMMANDS	file:
CMD_OFF_ALL	libsrc/leddevice/dev_hid/LedDeviceLightpack.cpp	/^	CMD_OFF_ALL,$/;"	e	enum:COMMANDS	file:
CMD_SET_BRIGHTNESS	libsrc/leddevice/dev_hid/LedDeviceLightpack.cpp	/^	CMD_SET_BRIGHTNESS,$/;"	e	enum:COMMANDS	file:
CMD_SET_PWM_LEVEL_MAX_VALUE	libsrc/leddevice/dev_hid/LedDeviceLightpack.cpp	/^	CMD_SET_PWM_LEVEL_MAX_VALUE, \/* deprecated *\/$/;"	e	enum:COMMANDS	file:
CMD_SET_SMOOTH_SLOWDOWN	libsrc/leddevice/dev_hid/LedDeviceLightpack.cpp	/^	CMD_SET_SMOOTH_SLOWDOWN,$/;"	e	enum:COMMANDS	file:
CMD_SET_TIMER_OPTIONS	libsrc/leddevice/dev_hid/LedDeviceLightpack.cpp	/^	CMD_SET_TIMER_OPTIONS,$/;"	e	enum:COMMANDS	file:
CMD_UPDATE_LEDS	libsrc/leddevice/dev_hid/LedDeviceLightpack.cpp	/^	CMD_UPDATE_LEDS = 1,$/;"	e	enum:COMMANDS	file:
CMD_WRITE_WS2801	libsrc/leddevice/dev_hid/LedDeviceHyperionUsbasp.h	/^		CMD_WRITE_WS2801 = 10,$/;"	e	enum:LedDeviceHyperionUsbasp::Commands
CMD_WRITE_WS2812	libsrc/leddevice/dev_hid/LedDeviceHyperionUsbasp.h	/^		CMD_WRITE_WS2812 = 11$/;"	e	enum:LedDeviceHyperionUsbasp::Commands
COLON	libsrc/webserver/QtHttpClientWrapper.h	/^	static const char COLON = ':';$/;"	m	class:QtHttpClientWrapper
COLOR	include/utils/settings.h	/^		COLOR,$/;"	e	enum:settings::type
COLOR_MODEL	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	enum COLOR_MODEL{$/;"	g	class:LedDeviceYeelight
COMMANDS	libsrc/leddevice/dev_hid/LedDeviceLightpack.cpp	/^enum COMMANDS{$/;"	g	file:
COMP_ALL	include/utils/Components.h	/^	COMP_ALL,$/;"	e	enum:hyperion::Components
COMP_BLACKBORDER	include/utils/Components.h	/^	COMP_BLACKBORDER,$/;"	e	enum:hyperion::Components
COMP_BOBLIGHTSERVER	include/utils/Components.h	/^	COMP_BOBLIGHTSERVER,$/;"	e	enum:hyperion::Components
COMP_COLOR	include/utils/Components.h	/^	COMP_COLOR,$/;"	e	enum:hyperion::Components
COMP_EFFECT	include/utils/Components.h	/^	COMP_EFFECT,$/;"	e	enum:hyperion::Components
COMP_FLATBUFSERVER	include/utils/Components.h	/^	COMP_FLATBUFSERVER,$/;"	e	enum:hyperion::Components
COMP_FORWARDER	include/utils/Components.h	/^	COMP_FORWARDER,$/;"	e	enum:hyperion::Components
COMP_GRABBER	include/utils/Components.h	/^	COMP_GRABBER,$/;"	e	enum:hyperion::Components
COMP_IMAGE	include/utils/Components.h	/^	COMP_IMAGE,$/;"	e	enum:hyperion::Components
COMP_INVALID	include/utils/Components.h	/^	COMP_INVALID,$/;"	e	enum:hyperion::Components
COMP_LEDDEVICE	include/utils/Components.h	/^	COMP_LEDDEVICE,$/;"	e	enum:hyperion::Components
COMP_PROTOSERVER	include/utils/Components.h	/^	COMP_PROTOSERVER$/;"	e	enum:hyperion::Components
COMP_SMOOTHING	include/utils/Components.h	/^	COMP_SMOOTHING,$/;"	e	enum:hyperion::Components
COMP_V4L	include/utils/Components.h	/^	COMP_V4L,$/;"	e	enum:hyperion::Components
CONFIG_ADDRESS	libsrc/leddevice/dev_net/LedDeviceNanoleaf.cpp	/^const char CONFIG_ADDRESS[] = "host";$/;"	m	namespace:__anon2	file:
CONFIG_ADDRESS	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const char CONFIG_ADDRESS[] = "output";$/;"	m	namespace:__anon9	file:
CONFIG_ADDRESS	libsrc/leddevice/dev_net/LedDeviceWled.cpp	/^const char CONFIG_ADDRESS[] = "host";$/;"	m	namespace:__anon10	file:
CONFIG_AUTH_TOKEN	libsrc/leddevice/dev_net/LedDeviceNanoleaf.cpp	/^const char CONFIG_AUTH_TOKEN[] ="token";$/;"	m	namespace:__anon2	file:
CONFIG_BLACK_LIGHTS_TIMEOUT	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const char CONFIG_BLACK_LIGHTS_TIMEOUT[] = "blackLightsTimeout";$/;"	m	namespace:__anon9	file:
CONFIG_BRIGHTNESSFACTOR	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const char CONFIG_BRIGHTNESSFACTOR[] = "brightnessFactor";$/;"	m	namespace:__anon9	file:
CONFIG_BRIGHTNESSFACTOR	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^const char CONFIG_BRIGHTNESSFACTOR[] = "brightnessFactor";$/;"	m	namespace:__anon3	file:
CONFIG_BRIGHTNESS_MAX	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const char CONFIG_BRIGHTNESS_MAX[] = "brightnessMax";$/;"	m	namespace:__anon9	file:
CONFIG_BRIGHTNESS_MAX	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^const char CONFIG_BRIGHTNESS_MAX[] = "brightnessMax";$/;"	m	namespace:__anon3	file:
CONFIG_BRIGHTNESS_MIN	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const char CONFIG_BRIGHTNESS_MIN[] = "brightnessMin";$/;"	m	namespace:__anon9	file:
CONFIG_BRIGHTNESS_MIN	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^const char CONFIG_BRIGHTNESS_MIN[] = "brightnessMin";$/;"	m	namespace:__anon3	file:
CONFIG_BRIGHTNESS_SWITCHOFF	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^const char CONFIG_BRIGHTNESS_SWITCHOFF[] = "brightnessSwitchOffOnMinimum";$/;"	m	namespace:__anon3	file:
CONFIG_BRIGHTNESS_THRESHOLD	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const char CONFIG_BRIGHTNESS_THRESHOLD[] = "brightnessThreshold";$/;"	m	namespace:__anon9	file:
CONFIG_CLIENTKEY	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const char CONFIG_CLIENTKEY[] = "clientkey";$/;"	m	namespace:__anon9	file:
CONFIG_COLOR_MODEL	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^const char CONFIG_COLOR_MODEL [] = "colorModel";$/;"	m	namespace:__anon3	file:
CONFIG_DEBUGLEVEL	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^const char CONFIG_DEBUGLEVEL [] = "debugLevel";$/;"	m	namespace:__anon3	file:
CONFIG_EXTRA_TIME_DARKNESS	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^const char CONFIG_EXTRA_TIME_DARKNESS[] = "extraTimeDarkness";$/;"	m	namespace:__anon3	file:
CONFIG_GROUPID	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const char CONFIG_GROUPID[] = "groupId";$/;"	m	namespace:__anon9	file:
CONFIG_LIGHTIDS	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const char CONFIG_LIGHTIDS[] = "lightIds";$/;"	m	namespace:__anon9	file:
CONFIG_LIGHTS	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^const char CONFIG_LIGHTS [] = "lights";$/;"	m	namespace:__anon3	file:
CONFIG_ON_OFF_BLACK	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const char CONFIG_ON_OFF_BLACK[] = "switchOffOnBlack";$/;"	m	namespace:__anon9	file:
CONFIG_PANEL_ORDER_LEFT_RIGHT	libsrc/leddevice/dev_net/LedDeviceNanoleaf.cpp	/^const char CONFIG_PANEL_ORDER_LEFT_RIGHT[] ="panelOrderLeftRight";$/;"	m	namespace:__anon2	file:
CONFIG_PANEL_ORDER_TOP_DOWN	libsrc/leddevice/dev_net/LedDeviceNanoleaf.cpp	/^const char CONFIG_PANEL_ORDER_TOP_DOWN[] ="panelOrderTopDown";$/;"	m	namespace:__anon2	file:
CONFIG_PANEL_START_POS	libsrc/leddevice/dev_net/LedDeviceNanoleaf.cpp	/^const char CONFIG_PANEL_START_POS[] ="panelStartPos";$/;"	m	namespace:__anon2	file:
CONFIG_QUOTA_WAIT_TIME	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^const char CONFIG_QUOTA_WAIT_TIME[] = "quotaWait";$/;"	m	namespace:__anon3	file:
CONFIG_RESTORE_STATE	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const char CONFIG_RESTORE_STATE[] = "restoreOriginalState";$/;"	m	namespace:__anon9	file:
CONFIG_RESTORE_STATE	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^const char CONFIG_RESTORE_STATE[] = "restoreOriginalState";$/;"	m	namespace:__anon3	file:
CONFIG_SSL_HANDSHAKE_TIMEOUT_MAX	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const char CONFIG_SSL_HANDSHAKE_TIMEOUT_MAX[] = "sslHSTimeoutMax";$/;"	m	namespace:__anon9	file:
CONFIG_SSL_HANDSHAKE_TIMEOUT_MIN	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const char CONFIG_SSL_HANDSHAKE_TIMEOUT_MIN[] = "sslHSTimeoutMin";$/;"	m	namespace:__anon9	file:
CONFIG_SSL_READ_TIMEOUT	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const char CONFIG_SSL_READ_TIMEOUT[] = "sslReadTimeout";$/;"	m	namespace:__anon9	file:
CONFIG_TRANSITIONTIME	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const char CONFIG_TRANSITIONTIME[] = "transitiontime";$/;"	m	namespace:__anon9	file:
CONFIG_TRANS_EFFECT	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^const char CONFIG_TRANS_EFFECT [] = "transEffect";$/;"	m	namespace:__anon3	file:
CONFIG_TRANS_TIME	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^const char CONFIG_TRANS_TIME [] = "transTime";$/;"	m	namespace:__anon3	file:
CONFIG_USERNAME	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const char CONFIG_USERNAME[] = "username";$/;"	m	namespace:__anon9	file:
CONFIG_USE_HUE_ENTERTAINMENT_API	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const char CONFIG_USE_HUE_ENTERTAINMENT_API[] = "useEntertainmentAPI";$/;"	m	namespace:__anon9	file:
CONFIG_VERBOSE	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const char CONFIG_VERBOSE[] = "verbose";$/;"	m	namespace:__anon9	file:
CONTINUATION	libsrc/webserver/WebSocketUtils.h	/^		CONTINUATION = 0x0,$/;"	e	enum:OPCODE::value
CONTROL_RSVB	libsrc/webserver/WebSocketUtils.h	/^		CONTROL_RSVB = 0xB,$/;"	e	enum:OPCODE::value
CONTROL_RSVC	libsrc/webserver/WebSocketUtils.h	/^		CONTROL_RSVC = 0xC,$/;"	e	enum:OPCODE::value
CONTROL_RSVD	libsrc/webserver/WebSocketUtils.h	/^		CONTROL_RSVD = 0xD,$/;"	e	enum:OPCODE::value
CONTROL_RSVE	libsrc/webserver/WebSocketUtils.h	/^		CONTROL_RSVE = 0xE,$/;"	e	enum:OPCODE::value
CONTROL_RSVF	libsrc/webserver/WebSocketUtils.h	/^		CONTROL_RSVF = 0xF$/;"	e	enum:OPCODE::value
CONTROL_SQUARE_PASSIVE	libsrc/leddevice/dev_net/LedDeviceNanoleaf.cpp	/^	CONTROL_SQUARE_PASSIVE,$/;"	e	enum:SHAPETYPES	file:
CONTROL_SQUARE_PRIMARY	libsrc/leddevice/dev_net/LedDeviceNanoleaf.cpp	/^	CONTROL_SQUARE_PRIMARY,$/;"	e	enum:SHAPETYPES	file:
CPair	include/db/DBManager.h	/^typedef QPair<QString,QVariant> CPair;$/;"	t
CRLF	libsrc/webserver/QtHttpClientWrapper.cpp	/^const QByteArray & QtHttpClientWrapper::CRLF = QByteArrayLiteral ("\\r\\n");$/;"	m	class:QtHttpClientWrapper	file:
CRLF	libsrc/webserver/QtHttpClientWrapper.h	/^	static const QByteArray & CRLF;$/;"	m	class:QtHttpClientWrapper
CacheControl	libsrc/webserver/QtHttpHeader.cpp	/^const QByteArray & QtHttpHeader::CacheControl         = QByteArrayLiteral ("Cache-Control");$/;"	m	class:QtHttpHeader	file:
CacheControl	libsrc/webserver/QtHttpHeader.h	/^	static const QByteArray & CacheControl;$/;"	m	class:QtHttpHeader
CaptureCont	include/hyperion/CaptureCont.h	/^class CaptureCont : public QObject$/;"	c
CaptureCont	libsrc/hyperion/CaptureCont.cpp	/^CaptureCont::CaptureCont(Hyperion* hyperion)$/;"	f	class:CaptureCont
CgiHandler	libsrc/webserver/CgiHandler.cpp	/^CgiHandler::CgiHandler (QObject * parent)$/;"	f	class:CgiHandler
CgiHandler	libsrc/webserver/CgiHandler.h	/^class CgiHandler : public QObject {$/;"	c
CiColor	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^struct CiColor$/;"	s
CiColorTriangle	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^struct CiColorTriangle$/;"	s
ClientInfo	libsrc/webserver/QtHttpRequest.h	/^	struct ClientInfo$/;"	s	class:QtHttpRequest
ColorAdjustment	include/hyperion/ColorAdjustment.h	/^class ColorAdjustment$/;"	c
ColorArgb	include/utils/ColorArgb.h	/^struct ColorArgb$/;"	s
ColorBgr	include/utils/ColorBgr.h	/^struct ColorBgr$/;"	s
ColorChannel	include/utils/RgbChannelAdjustment.h	/^	enum ColorChannel { RED=0, GREEN=1, BLUE=2 };$/;"	g	class:RgbChannelAdjustment
ColorOption	include/commandline/ColorOption.h	/^    ColorOption(const QCommandLineOption &other)$/;"	f	class:commandline::ColorOption
ColorOption	include/commandline/ColorOption.h	/^    ColorOption(const QString &name,$/;"	f	class:commandline::ColorOption
ColorOption	include/commandline/ColorOption.h	/^    ColorOption(const QStringList &names,$/;"	f	class:commandline::ColorOption
ColorOption	include/commandline/ColorOption.h	/^class ColorOption: public Option$/;"	c	namespace:commandline
ColorOrder	include/hyperion/LedString.h	/^enum class ColorOrder$/;"	c
ColorRgb	include/utils/ColorRgb.h	/^struct ColorRgb$/;"	s
ColorRgba	include/utils/ColorRgba.h	/^struct ColorRgba$/;"	s
ColorRgbw	include/utils/ColorRgbw.h	/^struct ColorRgbw$/;"	s
ColorSys	include/utils/ColorSys.h	/^class ColorSys$/;"	c
ColorsOption	include/commandline/ColorsOption.h	/^    ColorsOption(const QCommandLineOption &other)$/;"	f	class:commandline::ColorsOption
ColorsOption	include/commandline/ColorsOption.h	/^    ColorsOption(const QString &name,$/;"	f	class:commandline::ColorsOption
ColorsOption	include/commandline/ColorsOption.h	/^    ColorsOption(const QStringList &names,$/;"	f	class:commandline::ColorsOption
ColorsOption	include/commandline/ColorsOption.h	/^class ColorsOption: public Option$/;"	c	namespace:commandline
Commands	libsrc/leddevice/dev_hid/LedDeviceHyperionUsbasp.h	/^	enum Commands {$/;"	g	class:LedDeviceHyperionUsbasp
ComponentRegister	include/hyperion/ComponentRegister.h	/^class ComponentRegister : public QObject$/;"	c
ComponentRegister	libsrc/hyperion/ComponentRegister.cpp	/^ComponentRegister::ComponentRegister(Hyperion* hyperion)$/;"	f	class:ComponentRegister
Components	include/utils/Components.h	/^enum Components$/;"	g	namespace:hyperion
Connection	libsrc/webserver/QtHttpHeader.cpp	/^const QByteArray & QtHttpHeader::Connection           = QByteArrayLiteral ("Connection");$/;"	m	class:QtHttpHeader	file:
Connection	libsrc/webserver/QtHttpHeader.h	/^	static const QByteArray & Connection;$/;"	m	class:QtHttpHeader
ContentDisposition	libsrc/webserver/QtHttpHeader.cpp	/^const QByteArray & QtHttpHeader::ContentDisposition   = QByteArrayLiteral ("Content-Disposition");$/;"	m	class:QtHttpHeader	file:
ContentDisposition	libsrc/webserver/QtHttpHeader.h	/^	static const QByteArray & ContentDisposition;$/;"	m	class:QtHttpHeader
ContentEncoding	libsrc/webserver/QtHttpHeader.cpp	/^const QByteArray & QtHttpHeader::ContentEncoding      = QByteArrayLiteral ("Content-Encoding");$/;"	m	class:QtHttpHeader	file:
ContentEncoding	libsrc/webserver/QtHttpHeader.h	/^	static const QByteArray & ContentEncoding;$/;"	m	class:QtHttpHeader
ContentLanguage	libsrc/webserver/QtHttpHeader.cpp	/^const QByteArray & QtHttpHeader::ContentLanguage      = QByteArrayLiteral ("Content-Language");$/;"	m	class:QtHttpHeader	file:
ContentLanguage	libsrc/webserver/QtHttpHeader.h	/^	static const QByteArray & ContentLanguage;$/;"	m	class:QtHttpHeader
ContentLength	libsrc/webserver/QtHttpHeader.cpp	/^const QByteArray & QtHttpHeader::ContentLength        = QByteArrayLiteral ("Content-Length");$/;"	m	class:QtHttpHeader	file:
ContentLength	libsrc/webserver/QtHttpHeader.h	/^	static const QByteArray & ContentLength;$/;"	m	class:QtHttpHeader
ContentLocation	libsrc/webserver/QtHttpHeader.cpp	/^const QByteArray & QtHttpHeader::ContentLocation      = QByteArrayLiteral ("Content-Location");$/;"	m	class:QtHttpHeader	file:
ContentLocation	libsrc/webserver/QtHttpHeader.h	/^	static const QByteArray & ContentLocation;$/;"	m	class:QtHttpHeader
ContentMD5	libsrc/webserver/QtHttpHeader.cpp	/^const QByteArray & QtHttpHeader::ContentMD5           = QByteArrayLiteral ("Content-MD5");$/;"	m	class:QtHttpHeader	file:
ContentMD5	libsrc/webserver/QtHttpHeader.h	/^	static const QByteArray & ContentMD5;$/;"	m	class:QtHttpHeader
ContentRange	libsrc/webserver/QtHttpHeader.cpp	/^const QByteArray & QtHttpHeader::ContentRange         = QByteArrayLiteral ("Content-Range");$/;"	m	class:QtHttpHeader	file:
ContentRange	libsrc/webserver/QtHttpHeader.h	/^	static const QByteArray & ContentRange;$/;"	m	class:QtHttpHeader
ContentType	libsrc/webserver/QtHttpHeader.cpp	/^const QByteArray & QtHttpHeader::ContentType          = QByteArrayLiteral ("Content-Type");$/;"	m	class:QtHttpHeader	file:
ContentType	libsrc/webserver/QtHttpHeader.h	/^	static const QByteArray & ContentType;$/;"	m	class:QtHttpHeader
Cookie	libsrc/webserver/QtHttpHeader.cpp	/^const QByteArray & QtHttpHeader::Cookie               = QByteArrayLiteral ("Cookie");$/;"	m	class:QtHttpHeader	file:
Cookie	libsrc/webserver/QtHttpHeader.h	/^	static const QByteArray & Cookie;$/;"	m	class:QtHttpHeader
DATA_VERSION_INDEXES	libsrc/leddevice/dev_hid/LedDeviceLightpack.cpp	/^enum DATA_VERSION_INDEXES{$/;"	g	file:
DBManager	include/db/DBManager.h	/^class DBManager : public QObject$/;"	c
DBManager	libsrc/db/DBManager.cpp	/^DBManager::DBManager(QObject* parent)$/;"	f	class:DBManager
DEBUG	include/utils/Logger.h	/^		DEBUG,$/;"	e	enum:Logger::LogLevel
DEFAULT_FILTER	include/ssdp/SSDPDiscover.h	/^static const char	DEFAULT_FILTER[] = ".*";$/;"	v
DEFAULT_FILTER_HEADER	include/ssdp/SSDPDiscover.h	/^static const char	DEFAULT_FILTER_HEADER[] = "ST";$/;"	v
DEFAULT_PORT	libsrc/leddevice/dev_tinker/LedDeviceTinkerforge.cpp	/^const uint16_t DEFAULT_PORT = 4223;$/;"	m	namespace:__anon15	file:
DEFAULT_SEARCH_ADDRESS	include/ssdp/SSDPDiscover.h	/^static const char	DEFAULT_SEARCH_ADDRESS[] = "239.255.255.250";$/;"	v
DEFAULT_SEARCH_PORT	include/ssdp/SSDPDiscover.h	/^static const int	DEFAULT_SEARCH_PORT = 1900;$/;"	v
DEFAUL_OUTPUTDEPLAY	libsrc/hyperion/LinearColorSmoothing.cpp	/^const unsigned DEFAUL_OUTPUTDEPLAY    = 0;	\/\/ outputdelay in ms$/;"	v
DEFAUL_SETTLINGTIME	libsrc/hyperion/LinearColorSmoothing.cpp	/^const int64_t  DEFAUL_SETTLINGTIME    = 200;	\/\/ settlingtime in ms$/;"	v
DEFAUL_UPDATEFREQUENCY	libsrc/hyperion/LinearColorSmoothing.cpp	/^const double   DEFAUL_UPDATEFREQUENCY = 25;	\/\/ updatefrequncy in hz$/;"	v
DEFAUL_UPDATEINTERVALL	libsrc/hyperion/LinearColorSmoothing.cpp	/^const int64_t  DEFAUL_UPDATEINTERVALL = static_cast<int64_t>(1000 \/ DEFAUL_UPDATEFREQUENCY); \/\/ updateintervall in ms$/;"	v
DEVICE	include/utils/settings.h	/^		DEVICE,$/;"	e	enum:settings::type
DEV_DATA_APIVERSION	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const char DEV_DATA_APIVERSION[] = "apiversion";$/;"	m	namespace:__anon9	file:
DEV_DATA_BRIDGEID	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const char DEV_DATA_BRIDGEID[] = "bridgeid";$/;"	m	namespace:__anon9	file:
DEV_DATA_FIRMWAREVERSION	libsrc/leddevice/dev_net/LedDeviceNanoleaf.cpp	/^const char DEV_DATA_FIRMWAREVERSION[] = "firmwareVersion";$/;"	m	namespace:__anon2	file:
DEV_DATA_FIRMWAREVERSION	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const char DEV_DATA_FIRMWAREVERSION[] = "swversion";$/;"	m	namespace:__anon9	file:
DEV_DATA_MANUFACTURER	libsrc/leddevice/dev_net/LedDeviceNanoleaf.cpp	/^const char DEV_DATA_MANUFACTURER[] = "manufacturer";$/;"	m	namespace:__anon2	file:
DEV_DATA_MODEL	libsrc/leddevice/dev_net/LedDeviceNanoleaf.cpp	/^const char DEV_DATA_MODEL[] = "model";$/;"	m	namespace:__anon2	file:
DEV_DATA_MODEL	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const char DEV_DATA_MODEL[] = "modelid";$/;"	m	namespace:__anon9	file:
DEV_DATA_NAME	libsrc/leddevice/dev_net/LedDeviceNanoleaf.cpp	/^const char DEV_DATA_NAME[] = "name";$/;"	m	namespace:__anon2	file:
DEV_DATA_NAME	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const char DEV_DATA_NAME[] = "name";$/;"	m	namespace:__anon9	file:
DISPMANX_DISPLAY_HANDLE_T	include/grabber/DispmanxFrameGrabberMock.h	/^typedef int DISPMANX_DISPLAY_HANDLE_T;$/;"	t
DISPMANX_MODEINFO_T	include/grabber/DispmanxFrameGrabberMock.h	/^struct DISPMANX_MODEINFO_T {$/;"	s
DISPMANX_RESOURCE	include/grabber/DispmanxFrameGrabberMock.h	/^typedef Image<ColorRgba> DISPMANX_RESOURCE;$/;"	t
DISPMANX_RESOURCE_HANDLE_T	include/grabber/DispmanxFrameGrabberMock.h	/^typedef DISPMANX_RESOURCE* DISPMANX_RESOURCE_HANDLE_T;$/;"	t
DISPMANX_SNAPSHOT_FILL	include/grabber/DispmanxFrameGrabberMock.h	/^const int DISPMANX_SNAPSHOT_FILL = 1;$/;"	v
DISPMANX_TRANSFORM_T	include/grabber/DispmanxFrameGrabberMock.h	/^typedef int DISPMANX_TRANSFORM_T;$/;"	t
DMX_MAX	libsrc/leddevice/dev_net/LedDeviceUdpArtNet.h	/^const int DMX_MAX = 512; \/\/ 512 usable slots$/;"	v
DMX_MAX	libsrc/leddevice/dev_net/LedDeviceUdpE131.cpp	/^const int DMX_MAX = 512; \/\/ 512 usable slots$/;"	v
Data	libsrc/leddevice/dev_net/LedDeviceUdpArtNet.h	/^		uint8_t		Data[ DMX_MAX ];	\/\/ universe data$/;"	m	struct:__anon11::__anon12
Date	libsrc/webserver/QtHttpHeader.cpp	/^const QByteArray & QtHttpHeader::Date                 = QByteArrayLiteral ("Date");$/;"	m	class:QtHttpHeader	file:
Date	libsrc/webserver/QtHttpHeader.h	/^	static const QByteArray & Date;$/;"	m	class:QtHttpHeader
Debug	include/utils/Logger.h	19;"	d
DebugIf	include/utils/Logger.h	25;"	d
DefaultSignalHandler	include/utils/DefaultSignalHandler.h	/^namespace DefaultSignalHandler$/;"	n
DefaultSignalHandler	libsrc/utils/DefaultSignalHandler.cpp	/^namespace DefaultSignalHandler$/;"	n	file:
DeviceProperties	include/grabber/V4L2Grabber.h	/^	struct DeviceProperties$/;"	s	class:V4L2Grabber
DispmanxFrameGrabber	include/grabber/DispmanxFrameGrabber.h	/^class DispmanxFrameGrabber : public Grabber$/;"	c
DispmanxFrameGrabber	libsrc/grabber/dispmanx/DispmanxFrameGrabber.cpp	/^DispmanxFrameGrabber::DispmanxFrameGrabber(const unsigned width, const unsigned height)$/;"	f	class:DispmanxFrameGrabber
DispmanxWrapper	include/grabber/DispmanxWrapper.h	/^class DispmanxWrapper: public GrabberWrapper$/;"	c
DispmanxWrapper	libsrc/grabber/dispmanx/DispmanxWrapper.cpp	/^DispmanxWrapper::DispmanxWrapper(const unsigned grabWidth, const unsigned grabHeight, const unsigned updateRate_Hz)$/;"	f	class:DispmanxWrapper
DoubleOption	include/commandline/DoubleOption.h	/^	DoubleOption(const QCommandLineOption &other, double minimum = -INFINITY, double maximum = INFINITY, int decimals = 1000)$/;"	f	class:commandline::DoubleOption
DoubleOption	include/commandline/DoubleOption.h	/^	DoubleOption(const QString &name,$/;"	f	class:commandline::DoubleOption
DoubleOption	include/commandline/DoubleOption.h	/^	DoubleOption(const QStringList &names,$/;"	f	class:commandline::DoubleOption
DoubleOption	include/commandline/DoubleOption.h	/^class DoubleOption: public ValidatorOption$/;"	c	namespace:commandline
E131_DEFAULT_PORT	libsrc/leddevice/dev_net/LedDeviceUdpE131.cpp	/^const ushort E131_DEFAULT_PORT = 5568;$/;"	v
E131_DMP_DATA	libsrc/leddevice/dev_net/LedDeviceUdpE131.h	/^const unsigned int E131_DMP_DATA=125;$/;"	v
EFFECTS	include/utils/settings.h	/^		EFFECTS,$/;"	e	enum:settings::type
ERRORR	include/utils/Logger.h	/^		ERRORR,$/;"	e	enum:Logger::LogLevel
EXTCONTROLVERSIONS	libsrc/leddevice/dev_net/LedDeviceNanoleaf.cpp	/^enum EXTCONTROLVERSIONS {$/;"	g	file:
EXTCTRLVER_V1	libsrc/leddevice/dev_net/LedDeviceNanoleaf.cpp	/^	EXTCTRLVER_V1 = 1,$/;"	e	enum:EXTCONTROLVERSIONS	file:
EXTCTRLVER_V2	libsrc/leddevice/dev_net/LedDeviceNanoleaf.cpp	/^	EXTCTRLVER_V2$/;"	e	enum:EXTCONTROLVERSIONS	file:
Effect	include/effectengine/Effect.h	/^class Effect : public QThread$/;"	c
Effect	libsrc/effectengine/Effect.cpp	/^Effect::Effect(Hyperion *hyperion, int priority, int timeout, const QString &script, const QString &name, const QJsonObject &args, const QString &imageData)$/;"	f	class:Effect
EffectCmdData	include/api/apiStructs.h	/^struct EffectCmdData$/;"	s
EffectDefinition	include/effectengine/EffectDefinition.h	/^struct EffectDefinition$/;"	s
EffectEngine	include/effectengine/EffectEngine.h	/^class EffectEngine : public QObject$/;"	c
EffectEngine	libsrc/effectengine/EffectEngine.cpp	/^EffectEngine::EffectEngine(Hyperion * hyperion)$/;"	f	class:EffectEngine
EffectFileHandler	include/effectengine/EffectFileHandler.h	/^class EffectFileHandler : public QObject$/;"	c
EffectFileHandler	libsrc/effectengine/EffectFileHandler.cpp	/^EffectFileHandler::EffectFileHandler(const QString& rootPath, const QJsonDocument& effectConfig, QObject* parent)$/;"	f	class:EffectFileHandler
EffectModule	include/effectengine/EffectModule.h	/^class EffectModule$/;"	c
EffectSchema	include/effectengine/EffectSchema.h	/^struct EffectSchema$/;"	s
Error	include/utils/Logger.h	22;"	d
ErrorIf	include/utils/Logger.h	28;"	d
Expires	libsrc/webserver/QtHttpHeader.cpp	/^const QByteArray & QtHttpHeader::Expires              = QByteArrayLiteral ("Expires");$/;"	m	class:QtHttpHeader	file:
Expires	libsrc/webserver/QtHttpHeader.h	/^	static const QByteArray & Expires;$/;"	m	class:QtHttpHeader
ExportHandle	libsrc/grabber/amlogic/IonBuffer.h	/^	int ExportHandle() const$/;"	f	class:IonBuffer
FGCONFIG_ARRAY	include/utils/hyperion.h	18;"	d
FGCONFIG_ARRAY	include/utils/hyperion.h	53;"	d
FGEFFECT	include/utils/settings.h	/^		FGEFFECT,$/;"	e	enum:settings::type
FLATBUFSERVER	include/utils/settings.h	/^		FLATBUFSERVER,$/;"	e	enum:settings::type
FRAME_SIZE_IN_BYTES	libsrc/webserver/WebSocketClient.h	/^	static const quint64 FRAME_SIZE_IN_BYTES = 512 * 512 * 2;  \/\/maximum size of a frame when sending a message$/;"	m	class:WebSocketClient
FileUtils	include/utils/FileUtils.h	/^namespace FileUtils {$/;"	n
FileUtils	libsrc/utils/FileUtils.cpp	/^namespace FileUtils {$/;"	n	file:
FlatBufferClient	libsrc/flatbufserver/FlatBufferClient.cpp	/^FlatBufferClient::FlatBufferClient(QTcpSocket* socket, const int &timeout, QObject *parent)$/;"	f	class:FlatBufferClient
FlatBufferClient	libsrc/flatbufserver/FlatBufferClient.h	/^class FlatBufferClient : public QObject$/;"	c
FlatBufferConnection	include/flatbufserver/FlatBufferConnection.h	/^class FlatBufferConnection : public QObject$/;"	c
FlatBufferConnection	libsrc/flatbufserver/FlatBufferConnection.cpp	/^FlatBufferConnection::FlatBufferConnection(const QString& origin, const QString & address, const int& priority, const bool& skipReply)$/;"	f	class:FlatBufferConnection
FlatBufferServer	include/flatbufserver/FlatBufferServer.h	/^class FlatBufferServer : public QObject$/;"	c
FlatBufferServer	libsrc/flatbufserver/FlatBufferServer.cpp	/^FlatBufferServer::FlatBufferServer(const QJsonDocument& config, QObject* parent)$/;"	f	class:FlatBufferServer
Forbidden	libsrc/webserver/QtHttpReply.h	/^		Forbidden          = 403,$/;"	e	enum:QtHttpReply::StatusCode
FrameSpec	libsrc/leddevice/dev_serial/LedDeviceSedu.cpp	/^struct FrameSpec$/;"	s	file:
FramebufferFrameGrabber	include/grabber/FramebufferFrameGrabber.h	/^class FramebufferFrameGrabber : public Grabber$/;"	c
FramebufferFrameGrabber	libsrc/grabber/framebuffer/FramebufferFrameGrabber.cpp	/^FramebufferFrameGrabber::FramebufferFrameGrabber(const QString & device, const unsigned width, const unsigned height)$/;"	f	class:FramebufferFrameGrabber
FramebufferWrapper	include/grabber/FramebufferWrapper.h	/^class FramebufferWrapper: public GrabberWrapper$/;"	c
FramebufferWrapper	libsrc/grabber/framebuffer/FramebufferWrapper.cpp	/^FramebufferWrapper::FramebufferWrapper(const QString & device, const unsigned grabWidth, const unsigned grabHeight, const unsigned updateRate_Hz)$/;"	f	class:FramebufferWrapper
GAMUT_A_MODEL_IDS	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const std::set<QString> PhilipsHueLight::GAMUT_A_MODEL_IDS =$/;"	m	class:PhilipsHueLight	file:
GAMUT_A_MODEL_IDS	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	static const std::set<QString> GAMUT_A_MODEL_IDS;$/;"	m	class:PhilipsHueLight
GAMUT_B_MODEL_IDS	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const std::set<QString> PhilipsHueLight::GAMUT_B_MODEL_IDS =$/;"	m	class:PhilipsHueLight	file:
GAMUT_B_MODEL_IDS	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	static const std::set<QString> GAMUT_B_MODEL_IDS;$/;"	m	class:PhilipsHueLight
GAMUT_C_MODEL_IDS	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const std::set<QString> PhilipsHueLight::GAMUT_C_MODEL_IDS =$/;"	m	class:PhilipsHueLight	file:
GAMUT_C_MODEL_IDS	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	static const std::set<QString> GAMUT_C_MODEL_IDS;$/;"	m	class:PhilipsHueLight
GENERAL	include/utils/settings.h	/^		GENERAL,$/;"	e	enum:settings::type
GLOBAL_MIN_LOG_LEVEL	include/utils/Logger.h	/^	static LogLevel GLOBAL_MIN_LOG_LEVEL;$/;"	m	class:Logger
GLOBAL_MIN_LOG_LEVEL	libsrc/utils/Logger.cpp	/^Logger::LogLevel Logger::GLOBAL_MIN_LOG_LEVEL = Logger::UNSET;$/;"	m	class:Logger	file:
GRABBER_SYS_CLIENTS	include/hyperion/GrabberWrapper.h	/^static QList<int> GRABBER_SYS_CLIENTS;$/;"	v
GRABBER_V4L_CLIENTS	include/hyperion/GrabberWrapper.h	/^static QList<int> GRABBER_V4L_CLIENTS;$/;"	v
GREEN	include/utils/ColorArgb.h	/^	static ColorArgb GREEN;$/;"	m	struct:ColorArgb
GREEN	include/utils/ColorBgr.h	/^	static ColorBgr GREEN;$/;"	m	struct:ColorBgr
GREEN	include/utils/ColorRgb.h	/^	static ColorRgb GREEN;$/;"	m	struct:ColorRgb
GREEN	include/utils/ColorRgba.h	/^	static ColorRgba GREEN;$/;"	m	struct:ColorRgba
GREEN	include/utils/ColorRgbw.h	/^	static ColorRgbw GREEN;$/;"	m	struct:ColorRgbw
GREEN	include/utils/RgbChannelAdjustment.h	/^	enum ColorChannel { RED=0, GREEN=1, BLUE=2 };$/;"	e	enum:RgbChannelAdjustment::ColorChannel
GREEN	libsrc/utils/ColorArgb.cpp	/^ColorArgb ColorArgb::GREEN = { 255,   0, 255,   0 };$/;"	m	class:ColorArgb	file:
GREEN	libsrc/utils/ColorBgr.cpp	/^ColorBgr ColorBgr::GREEN = {   0, 255,   0 };$/;"	m	class:ColorBgr	file:
GREEN	libsrc/utils/ColorRgb.cpp	/^ColorRgb ColorRgb::GREEN = {   0, 255,   0 };$/;"	m	class:ColorRgb	file:
GREEN	libsrc/utils/ColorRgba.cpp	/^ColorRgba ColorRgba::GREEN = {   0, 255,   0, 255 };$/;"	m	class:ColorRgba	file:
GREEN	libsrc/utils/ColorRgbw.cpp	/^ColorRgbw ColorRgbw::GREEN = {   0, 255,   0,   0 };$/;"	m	class:ColorRgbw	file:
GlobalProfilerMap	libsrc/utils/Profiler.cpp	/^static std::map<QString,StopWatchItem> GlobalProfilerMap;$/;"	v	file:
GlobalSignals	include/utils/GlobalSignals.h	/^class GlobalSignals : public QObject$/;"	c
Grabber	include/hyperion/Grabber.h	/^class Grabber : public QObject$/;"	c
Grabber	libsrc/hyperion/Grabber.cpp	/^Grabber::Grabber(QString grabberName, int width, int height, int cropLeft, int cropRight, int cropTop, int cropBottom)$/;"	f	class:Grabber
GrabberWrapper	include/hyperion/GrabberWrapper.h	/^class GrabberWrapper : public QObject$/;"	c
GrabberWrapper	libsrc/hyperion/GrabberWrapper.cpp	/^GrabberWrapper::GrabberWrapper(QString grabberName, Grabber * ggrabber, unsigned width, unsigned height, const unsigned updateRate_Hz)$/;"	f	class:GrabberWrapper
H801_DEFAULT_HOST	libsrc/leddevice/dev_net/LedDeviceUdpH801.cpp	/^const char H801_DEFAULT_HOST[] = "255.255.255.255";$/;"	m	namespace:__anon8	file:
H801_DEFAULT_PORT	libsrc/leddevice/dev_net/LedDeviceUdpH801.cpp	/^const ushort H801_DEFAULT_PORT = 30977;$/;"	m	namespace:__anon8	file:
HEADER	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const uint8_t HEADER[] =$/;"	m	namespace:__anon9	file:
HIMinstance	include/hyperion/HyperionIManager.h	/^	static HyperionIManager* HIMinstance;$/;"	m	class:HyperionIManager
HIMinstance	libsrc/hyperion/HyperionIManager.cpp	/^HyperionIManager* HyperionIManager::HIMinstance;$/;"	m	class:HyperionIManager	file:
HTTP_VERSION	libsrc/webserver/QtHttpServer.cpp	/^const QString & QtHttpServer::HTTP_VERSION = QStringLiteral ("HTTP\/1.1");$/;"	m	class:QtHttpServer	file:
HTTP_VERSION	libsrc/webserver/QtHttpServer.h	/^	static const QString & HTTP_VERSION;$/;"	m	class:QtHttpServer
HYPERION_BOOLEANOPTION_H	include/commandline/BooleanOption.h	2;"	d
HYPERION_COLOROPTION_H	include/commandline/ColorOption.h	2;"	d
HYPERION_COLORSOPTION_H	include/commandline/ColorsOption.h	2;"	d
HYPERION_COMMANDLINEOPTION_H	include/commandline/ValidatorOption.h	2;"	d
HYPERION_IMAGEOPTION_H	include/commandline/ImageOption.h	2;"	d
HYPERION_INTCOMMANDLINEOPTION_H	include/commandline/IntOption.h	2;"	d
HYPERION_REGULAREXPRESSIONCOMMANDLINEOPTION_H	include/commandline/RegularExpressionOption.h	2;"	d
H_CREATED	include/hyperion/HyperionIManager.h	/^	H_CREATED,$/;"	m	class:InstanceState
H_ON_STOP	include/hyperion/HyperionIManager.h	/^	H_ON_STOP,$/;"	m	class:InstanceState
H_STARTED	include/hyperion/HyperionIManager.h	/^	H_STARTED,$/;"	m	class:InstanceState
H_STOPPED	include/hyperion/HyperionIManager.h	/^	H_STOPPED,$/;"	m	class:InstanceState
Handle	libsrc/grabber/amlogic/IonBuffer.h	/^	ion_user_handle_t Handle() const$/;"	f	class:IonBuffer
Host	libsrc/webserver/QtHttpHeader.cpp	/^const QByteArray & QtHttpHeader::Host                 = QByteArrayLiteral ("Host");$/;"	m	class:QtHttpHeader	file:
Host	libsrc/webserver/QtHttpHeader.h	/^	static const QByteArray & Host;$/;"	m	class:QtHttpHeader
Hyperion	include/hyperion/Hyperion.h	/^class Hyperion : public QObject$/;"	c
Hyperion	libsrc/hyperion/Hyperion.cpp	/^Hyperion::Hyperion(const quint8& instance)$/;"	f	class:Hyperion
HyperionIManager	include/hyperion/HyperionIManager.h	/^class HyperionIManager : public QObject$/;"	c
HyperionIManager	libsrc/hyperion/HyperionIManager.cpp	/^HyperionIManager::HyperionIManager(const QString& rootPath, QObject* parent)$/;"	f	class:HyperionIManager
HyperionSysInfo	include/utils/SysInfo.h	/^	struct HyperionSysInfo$/;"	s	class:SysInfo
ID	libsrc/leddevice/dev_net/LedDeviceUdpArtNet.h	/^		char		ID[8];		\/\/ "Art-Net"$/;"	m	struct:__anon11::__anon12
INDEX_FW_VER_MAJOR	libsrc/leddevice/dev_hid/LedDeviceLightpack.cpp	/^	INDEX_FW_VER_MAJOR = 1,$/;"	e	enum:DATA_VERSION_INDEXES	file:
INDEX_FW_VER_MINOR	libsrc/leddevice/dev_hid/LedDeviceLightpack.cpp	/^	INDEX_FW_VER_MINOR$/;"	e	enum:DATA_VERSION_INDEXES	file:
INFO	include/utils/Logger.h	/^		INFO,$/;"	e	enum:Logger::LogLevel
INSTCAPTURE	include/utils/settings.h	/^		INSTCAPTURE,$/;"	e	enum:settings::type
INVALID	include/utils/RgbToRgbw.h	/^		INVALID,$/;"	m	class:RGBW::WhiteAlgorithm
INVALID	include/utils/settings.h	/^		INVALID$/;"	e	enum:settings::type
INV_DATA	libsrc/webserver/WebSocketUtils.h	/^		INV_DATA  = 1007,$/;"	e	enum:CLOSECODE::value
INV_TYPE	libsrc/webserver/WebSocketUtils.h	/^		INV_TYPE  = 1003,$/;"	e	enum:CLOSECODE::value
ION_FLAG_CACHED	libsrc/grabber/amlogic/ion.h	59;"	d
ION_FLAG_CACHED_NEEDS_SYNC	libsrc/grabber/amlogic/ion.h	63;"	d
ION_HEAP_CARVEOUT_MASK	libsrc/grabber/amlogic/ion.h	50;"	d
ION_HEAP_SYSTEM_CONTIG_MASK	libsrc/grabber/amlogic/ion.h	49;"	d
ION_HEAP_SYSTEM_MASK	libsrc/grabber/amlogic/ion.h	48;"	d
ION_HEAP_TYPE_CARVEOUT	libsrc/grabber/amlogic/ion.h	/^	ION_HEAP_TYPE_CARVEOUT,$/;"	e	enum:ion_heap_type
ION_HEAP_TYPE_CHUNK	libsrc/grabber/amlogic/ion.h	/^	ION_HEAP_TYPE_CHUNK,$/;"	e	enum:ion_heap_type
ION_HEAP_TYPE_CUSTOM	libsrc/grabber/amlogic/ion.h	/^	ION_HEAP_TYPE_CUSTOM, \/* must be last so device specific heaps always$/;"	e	enum:ion_heap_type
ION_HEAP_TYPE_DMA	libsrc/grabber/amlogic/ion.h	/^	ION_HEAP_TYPE_DMA,$/;"	e	enum:ion_heap_type
ION_HEAP_TYPE_DMA_MASK	libsrc/grabber/amlogic/ion.h	51;"	d
ION_HEAP_TYPE_SYSTEM	libsrc/grabber/amlogic/ion.h	/^	ION_HEAP_TYPE_SYSTEM,$/;"	e	enum:ion_heap_type
ION_HEAP_TYPE_SYSTEM_CONTIG	libsrc/grabber/amlogic/ion.h	/^	ION_HEAP_TYPE_SYSTEM_CONTIG,$/;"	e	enum:ion_heap_type
ION_IOC_ALLOC	libsrc/grabber/amlogic/ion.h	138;"	d
ION_IOC_CUSTOM	libsrc/grabber/amlogic/ion.h	194;"	d
ION_IOC_FREE	libsrc/grabber/amlogic/ion.h	146;"	d
ION_IOC_IMPORT	libsrc/grabber/amlogic/ion.h	176;"	d
ION_IOC_MAGIC	libsrc/grabber/amlogic/ion.h	130;"	d
ION_IOC_MAP	libsrc/grabber/amlogic/ion.h	156;"	d
ION_IOC_MESON_PHYS_ADDR	libsrc/grabber/amlogic/meson_ion.h	27;"	d
ION_IOC_SHARE	libsrc/grabber/amlogic/ion.h	167;"	d
ION_IOC_SYNC	libsrc/grabber/amlogic/ion.h	186;"	d
ION_NUM_HEAPS	libsrc/grabber/amlogic/ion.h	/^	ION_NUM_HEAPS = 16,$/;"	e	enum:ion_heap_type
ION_NUM_HEAP_IDS	libsrc/grabber/amlogic/ion.h	53;"	d
IO_METHOD_MMAP	include/grabber/V4L2Grabber.h	/^			IO_METHOD_MMAP,$/;"	e	enum:V4L2Grabber::io_method
IO_METHOD_READ	include/grabber/V4L2Grabber.h	/^			IO_METHOD_READ,$/;"	e	enum:V4L2Grabber::io_method
IO_METHOD_USERPTR	include/grabber/V4L2Grabber.h	/^			IO_METHOD_USERPTR$/;"	e	enum:V4L2Grabber::io_method
Image	include/utils/Image.h	/^	Image() :$/;"	f	class:Image
Image	include/utils/Image.h	/^	Image(const Image & other) :$/;"	f	class:Image
Image	include/utils/Image.h	/^	Image(const unsigned width, const unsigned height) :$/;"	f	class:Image
Image	include/utils/Image.h	/^	Image(const unsigned width, const unsigned height, const Pixel_T background) :$/;"	f	class:Image
Image	include/utils/Image.h	/^class Image$/;"	c
ImageCmdData	include/api/apiStructs.h	/^struct ImageCmdData$/;"	s
ImageOption	include/commandline/ImageOption.h	/^    ImageOption(const QCommandLineOption &other)$/;"	f	class:commandline::ImageOption
ImageOption	include/commandline/ImageOption.h	/^    ImageOption(const QString &name,$/;"	f	class:commandline::ImageOption
ImageOption	include/commandline/ImageOption.h	/^    ImageOption(const QStringList &names,$/;"	f	class:commandline::ImageOption
ImageOption	include/commandline/ImageOption.h	/^class ImageOption: public Option$/;"	c	namespace:commandline
ImageProcessor	include/hyperion/ImageProcessor.h	/^class ImageProcessor : public QObject$/;"	c
ImageProcessor	libsrc/hyperion/ImageProcessor.cpp	/^ImageProcessor::ImageProcessor(const LedString& ledString, Hyperion* hyperion)$/;"	f	class:ImageProcessor
ImageResampler	include/utils/ImageResampler.h	/^class ImageResampler$/;"	c
ImageResampler	libsrc/utils/ImageResampler.cpp	/^ImageResampler::ImageResampler()$/;"	f	class:ImageResampler
ImageToLedsMap	include/hyperion/ImageToLedsMap.h	/^	class ImageToLedsMap$/;"	c	namespace:hyperion
ImageToLedsMap	libsrc/hyperion/ImageToLedsMap.cpp	/^ImageToLedsMap::ImageToLedsMap($/;"	f	class:ImageToLedsMap
Info	include/utils/Logger.h	20;"	d
InfoIf	include/utils/Logger.h	26;"	d
InputInfo	include/hyperion/PriorityMuxer.h	/^	struct InputInfo$/;"	s	class:PriorityMuxer
InstanceState	include/hyperion/HyperionIManager.h	/^enum class InstanceState{$/;"	c
InstanceTable	include/db/InstanceTable.h	/^	InstanceTable(const QString& rootPath, QObject* parent = nullptr)$/;"	f	class:InstanceTable
InstanceTable	include/db/InstanceTable.h	/^class InstanceTable : public DBManager$/;"	c
IntOption	include/commandline/IntOption.h	/^    IntOption(const QCommandLineOption &other,$/;"	f	class:commandline::IntOption
IntOption	include/commandline/IntOption.h	/^    IntOption(const QString &name,$/;"	f	class:commandline::IntOption
IntOption	include/commandline/IntOption.h	/^    IntOption(const QStringList &names,$/;"	f	class:commandline::IntOption
IntOption	include/commandline/IntOption.h	/^class IntOption: public ValidatorOption$/;"	c	namespace:commandline
InternalError	libsrc/webserver/QtHttpReply.h	/^		InternalError      = 500,$/;"	e	enum:QtHttpReply::StatusCode
IonBuffer	libsrc/grabber/amlogic/IonBuffer.h	/^	IonBuffer(size_t bufferSize)$/;"	f	class:IonBuffer
IonBuffer	libsrc/grabber/amlogic/IonBuffer.h	/^class IonBuffer$/;"	c
IsInstanceRunning	include/hyperion/HyperionIManager.h	/^	bool IsInstanceRunning(const quint8& inst) { return _runningInstances.contains(inst); }$/;"	f	class:HyperionIManager
JSONSERVER	include/utils/settings.h	/^		JSONSERVER,$/;"	e	enum:settings::type
Json	include/hyperion/LedString.h	/^namespace Json { class Value; }$/;"	n
JsonAPI	include/api/JsonAPI.h	/^class JsonAPI : public API$/;"	c
JsonAPI	libsrc/api/JsonAPI.cpp	/^JsonAPI::JsonAPI(QString peerAddress, Logger *log, const bool &localConnection, QObject *parent, bool noListener)$/;"	f	class:JsonAPI
JsonCB	include/api/JsonCB.h	/^class JsonCB : public QObject$/;"	c
JsonCB	libsrc/api/JsonCB.cpp	/^JsonCB::JsonCB(QObject* parent)$/;"	f	class:JsonCB
JsonClientConnection	libsrc/jsonserver/JsonClientConnection.cpp	/^JsonClientConnection::JsonClientConnection(QTcpSocket *socket, const bool& localConnection)$/;"	f	class:JsonClientConnection
JsonClientConnection	libsrc/jsonserver/JsonClientConnection.h	/^class JsonClientConnection : public QObject$/;"	c
JsonServer	include/jsonserver/JsonServer.h	/^class JsonServer : public QObject$/;"	c
JsonServer	libsrc/jsonserver/JsonServer.cpp	/^JsonServer::JsonServer(const QJsonDocument& config)$/;"	f	class:JsonServer
JsonUtils	include/utils/JsonUtils.h	/^namespace JsonUtils{$/;"	n
JsonUtils	libsrc/utils/JsonUtils.cpp	/^namespace JsonUtils {$/;"	n	file:
KeepEmptyParts	include/utils/QStringUtils.h	/^	KeepEmptyParts,$/;"	m	class:QStringUtils::SplitBehavior
LEDCONFIG	include/utils/settings.h	/^		LEDCONFIG,$/;"	e	enum:settings::type
LEDDEVICEWLED_H	libsrc/leddevice/dev_net/LedDeviceWled.h	2;"	d
LEDEVICEAPA102_H	libsrc/leddevice/dev_spi/LedDeviceAPA102.h	2;"	d
LEDEVICEAPA104_H	libsrc/leddevice/dev_spi/LedDeviceAPA104.h	2;"	d
LEDEVICEATMOORB_H	libsrc/leddevice/dev_net/LedDeviceAtmoOrb.h	2;"	d
LEDEVICEATMO_H	libsrc/leddevice/dev_serial/LedDeviceAtmo.h	2;"	d
LEDEVICEDMX_H	libsrc/leddevice/dev_serial/LedDeviceDMX.h	2;"	d
LEDEVICEFACTORY_H	include/leddevice/LedDeviceFactory.h	2;"	d
LEDEVICEFADECANDY_H	libsrc/leddevice/dev_net/LedDeviceFadeCandy.h	2;"	d
LEDEVICEFILE_H	libsrc/leddevice/dev_other/LedDeviceFile.h	2;"	d
LEDEVICEHYPERIONUSBASP_H	libsrc/leddevice/dev_hid/LedDeviceHyperionUsbasp.h	2;"	d
LEDEVICEKARATE_H	libsrc/leddevice/dev_serial/LedDeviceKarate.h	2;"	d
LEDEVICELIGHTPACK_H	libsrc/leddevice/dev_hid/LedDeviceLightpack.h	2;"	d
LEDEVICELPD6803_H	libsrc/leddevice/dev_spi/LedDeviceLpd6803.h	2;"	d
LEDEVICELPD8806_H	libsrc/leddevice/dev_spi/LedDeviceLpd8806.h	2;"	d
LEDEVICEMULTILIGHTPACK_H	libsrc/leddevice/dev_hid/LedDeviceMultiLightpack.h	2;"	d
LEDEVICENANOLEAF_H	libsrc/leddevice/dev_net/LedDeviceNanoleaf.h	2;"	d
LEDEVICEP9813_H	libsrc/leddevice/dev_spi/LedDeviceP9813.h	2;"	d
LEDEVICEPAINTTPACK_H	libsrc/leddevice/dev_hid/LedDevicePaintpack.h	2;"	d
LEDEVICEPIBLASTER_H	libsrc/leddevice/dev_other/LedDevicePiBlaster.h	2;"	d
LEDEVICERAWHID_H	libsrc/leddevice/dev_hid/LedDeviceRawHID.h	2;"	d
LEDEVICESEDU_H	libsrc/leddevice/dev_serial/LedDeviceSedu.h	2;"	d
LEDEVICESK6812SPI_H	libsrc/leddevice/dev_spi/LedDeviceSk6812SPI.h	2;"	d
LEDEVICESK6822SPI_H	libsrc/leddevice/dev_spi/LedDeviceSk6822SPI.h	2;"	d
LEDEVICETADALIGHT_H	libsrc/leddevice/dev_serial/LedDeviceAdalight.h	2;"	d
LEDEVICETEMPLATE_H	libsrc/leddevice/LedDeviceTemplate.h	2;"	d
LEDEVICETINKERFORGE_H	libsrc/leddevice/dev_tinker/LedDeviceTinkerforge.h	2;"	d
LEDEVICETPM2NET_H	libsrc/leddevice/dev_net/LedDeviceTpm2net.h	2;"	d
LEDEVICETPM2_H	libsrc/leddevice/dev_serial/LedDeviceTpm2.h	2;"	d
LEDEVICEUDPARTNET_H	libsrc/leddevice/dev_net/LedDeviceUdpArtNet.h	2;"	d
LEDEVICEUDPE131_H	libsrc/leddevice/dev_net/LedDeviceUdpE131.h	2;"	d
LEDEVICEUDPH801_H	libsrc/leddevice/dev_net/LedDeviceUdpH801.h	2;"	d
LEDEVICEUDPRAW_H	libsrc/leddevice/dev_net/LedDeviceUdpRaw.h	2;"	d
LEDEVICEWRAPPER_H	include/leddevice/LedDeviceWrapper.h	2;"	d
LEDEVICEWS2801_H	libsrc/leddevice/dev_spi/LedDeviceWs2801.h	2;"	d
LEDEVICEWS2812_H	libsrc/leddevice/dev_spi/LedDeviceWs2812SPI.h	2;"	d
LEDEVICEWS281X_H	libsrc/leddevice/dev_rpi_pwm/LedDeviceWS281x.h	2;"	d
LEDEVICEYEELIGHT_H	libsrc/leddevice/dev_net/LedDeviceYeelight.h	2;"	d
LEDEVICE_H	include/leddevice/LedDevice.h	2;"	d
LEDS	include/utils/settings.h	/^		LEDS,$/;"	e	enum:settings::type
LEDS_DEFAULT_NUMBER	libsrc/leddevice/dev_net/LedDeviceAtmoOrb.cpp	/^const int LEDS_DEFAULT_NUMBER = 24;$/;"	v
LIGHTPACK_INTERFACE	libsrc/leddevice/dev_hid/LedDeviceLightpack.cpp	14;"	d	file:
LOGGER	include/utils/settings.h	/^		LOGGER,$/;"	e	enum:settings::type
LOWEST_PRIORITY	include/hyperion/PriorityMuxer.h	/^	const static int LOWEST_PRIORITY;$/;"	m	class:PriorityMuxer
LOWEST_PRIORITY	libsrc/hyperion/PriorityMuxer.cpp	/^const int PriorityMuxer::LOWEST_PRIORITY = std::numeric_limits<uint8_t>::max();$/;"	m	class:PriorityMuxer	file:
LastModified	libsrc/webserver/QtHttpHeader.cpp	/^const QByteArray & QtHttpHeader::LastModified         = QByteArrayLiteral ("Last-Modified");$/;"	m	class:QtHttpHeader	file:
LastModified	libsrc/webserver/QtHttpHeader.h	/^	static const QByteArray & LastModified;$/;"	m	class:QtHttpHeader
Led	include/hyperion/LedString.h	/^struct Led$/;"	s
LedDevice	include/leddevice/LedDevice.h	/^class LedDevice : public QObject$/;"	c
LedDevice	libsrc/leddevice/LedDevice.cpp	/^LedDevice::LedDevice(const QJsonObject& deviceConfig, QObject* parent)$/;"	f	class:LedDevice
LedDeviceAPA102	libsrc/leddevice/dev_spi/LedDeviceAPA102.cpp	/^LedDeviceAPA102::LedDeviceAPA102(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceAPA102
LedDeviceAPA102	libsrc/leddevice/dev_spi/LedDeviceAPA102.h	/^class LedDeviceAPA102 : public ProviderSpi$/;"	c
LedDeviceAPA104	libsrc/leddevice/dev_spi/LedDeviceAPA104.cpp	/^LedDeviceAPA104::LedDeviceAPA104(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceAPA104
LedDeviceAPA104	libsrc/leddevice/dev_spi/LedDeviceAPA104.h	/^class LedDeviceAPA104 : public ProviderSpi$/;"	c
LedDeviceAdalight	libsrc/leddevice/dev_serial/LedDeviceAdalight.cpp	/^LedDeviceAdalight::LedDeviceAdalight(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceAdalight
LedDeviceAdalight	libsrc/leddevice/dev_serial/LedDeviceAdalight.h	/^class LedDeviceAdalight : public ProviderRs232$/;"	c
LedDeviceAtmo	libsrc/leddevice/dev_serial/LedDeviceAtmo.cpp	/^LedDeviceAtmo::LedDeviceAtmo(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceAtmo
LedDeviceAtmo	libsrc/leddevice/dev_serial/LedDeviceAtmo.h	/^class LedDeviceAtmo : public ProviderRs232$/;"	c
LedDeviceAtmoOrb	libsrc/leddevice/dev_net/LedDeviceAtmoOrb.cpp	/^LedDeviceAtmoOrb::LedDeviceAtmoOrb(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceAtmoOrb
LedDeviceAtmoOrb	libsrc/leddevice/dev_net/LedDeviceAtmoOrb.h	/^class LedDeviceAtmoOrb : public LedDevice$/;"	c
LedDeviceCreateFuncType	include/leddevice/LedDevice.h	/^typedef LedDevice* ( *LedDeviceCreateFuncType ) ( const QJsonObject& );$/;"	t
LedDeviceCreateFuncType	include/leddevice/LedDeviceWrapper.h	/^typedef LedDevice* ( *LedDeviceCreateFuncType ) ( const QJsonObject& );$/;"	t
LedDeviceDMX	libsrc/leddevice/dev_serial/LedDeviceDMX.cpp	/^LedDeviceDMX::LedDeviceDMX(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceDMX
LedDeviceDMX	libsrc/leddevice/dev_serial/LedDeviceDMX.h	/^class LedDeviceDMX : public ProviderRs232$/;"	c
LedDeviceFactory	include/leddevice/LedDeviceFactory.h	/^class LedDeviceFactory$/;"	c
LedDeviceFadeCandy	libsrc/leddevice/dev_net/LedDeviceFadeCandy.cpp	/^LedDeviceFadeCandy::LedDeviceFadeCandy(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceFadeCandy
LedDeviceFadeCandy	libsrc/leddevice/dev_net/LedDeviceFadeCandy.h	/^class LedDeviceFadeCandy : public LedDevice$/;"	c
LedDeviceFile	libsrc/leddevice/dev_other/LedDeviceFile.cpp	/^LedDeviceFile::LedDeviceFile(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceFile
LedDeviceFile	libsrc/leddevice/dev_other/LedDeviceFile.h	/^class LedDeviceFile : public LedDevice$/;"	c
LedDeviceHyperionUsbasp	libsrc/leddevice/dev_hid/LedDeviceHyperionUsbasp.cpp	/^LedDeviceHyperionUsbasp::LedDeviceHyperionUsbasp(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceHyperionUsbasp
LedDeviceHyperionUsbasp	libsrc/leddevice/dev_hid/LedDeviceHyperionUsbasp.h	/^class LedDeviceHyperionUsbasp : public LedDevice$/;"	c
LedDeviceKarate	libsrc/leddevice/dev_serial/LedDeviceKarate.cpp	/^LedDeviceKarate::LedDeviceKarate(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceKarate
LedDeviceKarate	libsrc/leddevice/dev_serial/LedDeviceKarate.h	/^class LedDeviceKarate : public ProviderRs232$/;"	c
LedDeviceLightpack	libsrc/leddevice/dev_hid/LedDeviceLightpack.cpp	/^LedDeviceLightpack::LedDeviceLightpack(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceLightpack
LedDeviceLightpack	libsrc/leddevice/dev_hid/LedDeviceLightpack.h	/^class LedDeviceLightpack : public LedDevice$/;"	c
LedDeviceLpd6803	libsrc/leddevice/dev_spi/LedDeviceLpd6803.cpp	/^LedDeviceLpd6803::LedDeviceLpd6803(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceLpd6803
LedDeviceLpd6803	libsrc/leddevice/dev_spi/LedDeviceLpd6803.h	/^class LedDeviceLpd6803 : public ProviderSpi$/;"	c
LedDeviceLpd8806	libsrc/leddevice/dev_spi/LedDeviceLpd8806.cpp	/^LedDeviceLpd8806::LedDeviceLpd8806(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceLpd8806
LedDeviceLpd8806	libsrc/leddevice/dev_spi/LedDeviceLpd8806.h	/^class LedDeviceLpd8806 : public ProviderSpi$/;"	c
LedDeviceMultiLightpack	libsrc/leddevice/dev_hid/LedDeviceMultiLightpack.cpp	/^LedDeviceMultiLightpack::LedDeviceMultiLightpack(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceMultiLightpack
LedDeviceMultiLightpack	libsrc/leddevice/dev_hid/LedDeviceMultiLightpack.h	/^class LedDeviceMultiLightpack : public LedDevice$/;"	c
LedDeviceNanoleaf	libsrc/leddevice/dev_net/LedDeviceNanoleaf.cpp	/^LedDeviceNanoleaf::LedDeviceNanoleaf(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceNanoleaf
LedDeviceNanoleaf	libsrc/leddevice/dev_net/LedDeviceNanoleaf.h	/^class LedDeviceNanoleaf : public ProviderUdp$/;"	c
LedDeviceP9813	libsrc/leddevice/dev_spi/LedDeviceP9813.cpp	/^LedDeviceP9813::LedDeviceP9813(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceP9813
LedDeviceP9813	libsrc/leddevice/dev_spi/LedDeviceP9813.h	/^class LedDeviceP9813 : public ProviderSpi$/;"	c
LedDevicePaintpack	libsrc/leddevice/dev_hid/LedDevicePaintpack.cpp	/^LedDevicePaintpack::LedDevicePaintpack(const QJsonObject &deviceConfig)$/;"	f	class:LedDevicePaintpack
LedDevicePaintpack	libsrc/leddevice/dev_hid/LedDevicePaintpack.h	/^class LedDevicePaintpack : public ProviderHID$/;"	c
LedDevicePhilipsHue	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^LedDevicePhilipsHue::LedDevicePhilipsHue(const QJsonObject& deviceConfig)$/;"	f	class:LedDevicePhilipsHue
LedDevicePhilipsHue	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^class LedDevicePhilipsHue: public LedDevicePhilipsHueBridge$/;"	c
LedDevicePhilipsHueBridge	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^LedDevicePhilipsHueBridge::LedDevicePhilipsHueBridge(const QJsonObject &deviceConfig)$/;"	f	class:LedDevicePhilipsHueBridge
LedDevicePhilipsHueBridge	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^class LedDevicePhilipsHueBridge : public ProviderUdpSSL$/;"	c
LedDevicePiBlaster	libsrc/leddevice/dev_other/LedDevicePiBlaster.cpp	/^LedDevicePiBlaster::LedDevicePiBlaster(const QJsonObject &deviceConfig)$/;"	f	class:LedDevicePiBlaster
LedDevicePiBlaster	libsrc/leddevice/dev_other/LedDevicePiBlaster.h	/^class LedDevicePiBlaster : public LedDevice$/;"	c
LedDeviceRawHID	libsrc/leddevice/dev_hid/LedDeviceRawHID.cpp	/^LedDeviceRawHID::LedDeviceRawHID(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceRawHID
LedDeviceRawHID	libsrc/leddevice/dev_hid/LedDeviceRawHID.h	/^class LedDeviceRawHID : public ProviderHID$/;"	c
LedDeviceRegistry	include/leddevice/LedDevice.h	/^typedef std::map<QString,LedDeviceCreateFuncType> LedDeviceRegistry;$/;"	t
LedDeviceRegistry	include/leddevice/LedDeviceWrapper.h	/^typedef std::map<QString,LedDeviceCreateFuncType> LedDeviceRegistry;$/;"	t
LedDeviceSedu	libsrc/leddevice/dev_serial/LedDeviceSedu.cpp	/^LedDeviceSedu::LedDeviceSedu(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceSedu
LedDeviceSedu	libsrc/leddevice/dev_serial/LedDeviceSedu.h	/^class LedDeviceSedu : public ProviderRs232$/;"	c
LedDeviceSk6812SPI	libsrc/leddevice/dev_spi/LedDeviceSk6812SPI.cpp	/^	LedDeviceSk6812SPI::LedDeviceSk6812SPI(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceSk6812SPI
LedDeviceSk6812SPI	libsrc/leddevice/dev_spi/LedDeviceSk6812SPI.h	/^class LedDeviceSk6812SPI : public ProviderSpi$/;"	c
LedDeviceSk6822SPI	libsrc/leddevice/dev_spi/LedDeviceSk6822SPI.cpp	/^LedDeviceSk6822SPI::LedDeviceSk6822SPI(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceSk6822SPI
LedDeviceSk6822SPI	libsrc/leddevice/dev_spi/LedDeviceSk6822SPI.h	/^class LedDeviceSk6822SPI : public ProviderSpi$/;"	c
LedDeviceTemplate	libsrc/leddevice/LedDeviceTemplate.cpp	/^LedDeviceTemplate::LedDeviceTemplate(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceTemplate
LedDeviceTemplate	libsrc/leddevice/LedDeviceTemplate.h	/^class LedDeviceTemplate : public LedDevice$/;"	c
LedDeviceTinkerforge	libsrc/leddevice/dev_tinker/LedDeviceTinkerforge.cpp	/^LedDeviceTinkerforge::LedDeviceTinkerforge(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceTinkerforge
LedDeviceTinkerforge	libsrc/leddevice/dev_tinker/LedDeviceTinkerforge.h	/^class LedDeviceTinkerforge : public LedDevice$/;"	c
LedDeviceTpm2	libsrc/leddevice/dev_serial/LedDeviceTpm2.cpp	/^LedDeviceTpm2::LedDeviceTpm2(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceTpm2
LedDeviceTpm2	libsrc/leddevice/dev_serial/LedDeviceTpm2.h	/^class LedDeviceTpm2 : public ProviderRs232$/;"	c
LedDeviceTpm2net	libsrc/leddevice/dev_net/LedDeviceTpm2net.cpp	/^LedDeviceTpm2net::LedDeviceTpm2net(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceTpm2net
LedDeviceTpm2net	libsrc/leddevice/dev_net/LedDeviceTpm2net.h	/^class LedDeviceTpm2net : public ProviderUdp$/;"	c
LedDeviceUdpArtNet	libsrc/leddevice/dev_net/LedDeviceUdpArtNet.cpp	/^LedDeviceUdpArtNet::LedDeviceUdpArtNet(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceUdpArtNet
LedDeviceUdpArtNet	libsrc/leddevice/dev_net/LedDeviceUdpArtNet.h	/^class LedDeviceUdpArtNet : public ProviderUdp$/;"	c
LedDeviceUdpE131	libsrc/leddevice/dev_net/LedDeviceUdpE131.cpp	/^LedDeviceUdpE131::LedDeviceUdpE131(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceUdpE131
LedDeviceUdpE131	libsrc/leddevice/dev_net/LedDeviceUdpE131.h	/^class LedDeviceUdpE131 : public ProviderUdp$/;"	c
LedDeviceUdpH801	libsrc/leddevice/dev_net/LedDeviceUdpH801.cpp	/^LedDeviceUdpH801::LedDeviceUdpH801(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceUdpH801
LedDeviceUdpH801	libsrc/leddevice/dev_net/LedDeviceUdpH801.h	/^class LedDeviceUdpH801: public ProviderUdp$/;"	c
LedDeviceUdpRaw	libsrc/leddevice/dev_net/LedDeviceUdpRaw.cpp	/^LedDeviceUdpRaw::LedDeviceUdpRaw(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceUdpRaw
LedDeviceUdpRaw	libsrc/leddevice/dev_net/LedDeviceUdpRaw.h	/^class LedDeviceUdpRaw : public ProviderUdp$/;"	c
LedDeviceWS281x	libsrc/leddevice/dev_rpi_pwm/LedDeviceWS281x.cpp	/^LedDeviceWS281x::LedDeviceWS281x(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceWS281x
LedDeviceWS281x	libsrc/leddevice/dev_rpi_pwm/LedDeviceWS281x.h	/^class LedDeviceWS281x : public LedDevice$/;"	c
LedDeviceWled	libsrc/leddevice/dev_net/LedDeviceWled.cpp	/^LedDeviceWled::LedDeviceWled(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceWled
LedDeviceWled	libsrc/leddevice/dev_net/LedDeviceWled.h	/^class LedDeviceWled : public ProviderUdp$/;"	c
LedDeviceWrapper	include/leddevice/LedDeviceWrapper.h	/^class LedDeviceWrapper : public QObject$/;"	c
LedDeviceWrapper	libsrc/leddevice/LedDeviceWrapper.cpp	/^LedDeviceWrapper::LedDeviceWrapper(Hyperion* hyperion)$/;"	f	class:LedDeviceWrapper
LedDeviceWs2801	libsrc/leddevice/dev_spi/LedDeviceWs2801.cpp	/^LedDeviceWs2801::LedDeviceWs2801(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceWs2801
LedDeviceWs2801	libsrc/leddevice/dev_spi/LedDeviceWs2801.h	/^class LedDeviceWs2801 : public ProviderSpi$/;"	c
LedDeviceWs2812SPI	libsrc/leddevice/dev_spi/LedDeviceWs2812SPI.cpp	/^	LedDeviceWs2812SPI::LedDeviceWs2812SPI(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceWs2812SPI
LedDeviceWs2812SPI	libsrc/leddevice/dev_spi/LedDeviceWs2812SPI.h	/^class LedDeviceWs2812SPI : public ProviderSpi$/;"	c
LedDeviceYeelight	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^LedDeviceYeelight::LedDeviceYeelight(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceYeelight
LedDeviceYeelight	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^class LedDeviceYeelight : public LedDevice$/;"	c
LedString	include/hyperion/LedString.h	/^class LedString$/;"	c
LedString	libsrc/hyperion/LedString.cpp	/^LedString::LedString()$/;"	f	class:LedString
Length	libsrc/grabber/amlogic/IonBuffer.h	/^	size_t Length() const$/;"	f	class:IonBuffer
Length	libsrc/leddevice/dev_net/LedDeviceUdpArtNet.h	/^		uint16_t	Length;		\/\/ data length (2 - 512)$/;"	m	struct:__anon11::__anon12
LinearColorSmoothing	libsrc/hyperion/LinearColorSmoothing.cpp	/^LinearColorSmoothing::LinearColorSmoothing(const QJsonDocument& config, Hyperion* hyperion)$/;"	f	class:LinearColorSmoothing
LinearColorSmoothing	libsrc/hyperion/LinearColorSmoothing.h	/^class LinearColorSmoothing : public QObject$/;"	c
Location	libsrc/webserver/QtHttpHeader.cpp	/^const QByteArray & QtHttpHeader::Location             = QByteArrayLiteral ("Location");$/;"	m	class:QtHttpHeader	file:
Location	libsrc/webserver/QtHttpHeader.h	/^	static const QByteArray & Location;$/;"	m	class:QtHttpHeader
LogLevel	include/utils/Logger.h	/^	enum LogLevel {$/;"	g	class:Logger
LogLevelStrings	libsrc/utils/Logger.cpp	/^static const char * LogLevelStrings[]   = { "", "DEBUG", "INFO", "WARNING", "ERROR" };$/;"	v	file:
LogLevelSysLog	libsrc/utils/Logger.cpp	/^static const int    LogLevelSysLog[]    = { LOG_DEBUG, LOG_DEBUG, LOG_INFO, LOG_WARNING, LOG_ERR };$/;"	v	file:
Logger	include/utils/Logger.h	/^class Logger : public QObject$/;"	c
Logger	libsrc/utils/Logger.cpp	/^Logger::Logger (QString name, LogLevel minLevel)$/;"	f	class:Logger
LoggerManager	include/utils/Logger.h	/^class LoggerManager : public QObject$/;"	c
LoggerManager	libsrc/utils/Logger.cpp	/^LoggerManager::LoggerManager()$/;"	f	class:LoggerManager
LoggerMap	include/utils/Logger.h	/^	static std::map<QString,Logger*> *LoggerMap;$/;"	m	class:Logger
LoggerMap	libsrc/utils/Logger.cpp	/^std::map<QString,Logger*> *Logger::LoggerMap = nullptr;$/;"	m	class:Logger	file:
MAX_NUM_LEDS	libsrc/leddevice/dev_net/LedDeviceFadeCandy.cpp	/^const signed   MAX_NUM_LEDS    = 10000; \/\/ OPC can handle 21845 LEDs - in theory, fadecandy device should handle 10000 LEDs$/;"	m	namespace:__anon5	file:
MAX_NUM_LEDS	libsrc/leddevice/dev_tinker/LedDeviceTinkerforge.cpp	/^const unsigned MAX_NUM_LEDS = 320;$/;"	m	namespace:__anon15	file:
MAX_NUM_LEDS_SETTABLE	libsrc/leddevice/dev_tinker/LedDeviceTinkerforge.cpp	/^const unsigned MAX_NUM_LEDS_SETTABLE = 16;$/;"	m	namespace:__anon15	file:
MAX_PORT	libsrc/leddevice/dev_net/ProviderUdp.cpp	/^const ushort MAX_PORT = 65535;$/;"	v
MAX_PORT_SSL	libsrc/leddevice/dev_net/ProviderUdpSSL.cpp	/^const ushort MAX_PORT_SSL = 65535;$/;"	v
MAX_RETRY	libsrc/leddevice/dev_net/ProviderUdpSSL.cpp	/^const int MAX_RETRY = 5;$/;"	v
MAX_WRITE_TIMEOUTS	libsrc/leddevice/dev_serial/ProviderRs232.cpp	/^const int MAX_WRITE_TIMEOUTS = 5;	\/\/ maximum number of allowed timeouts$/;"	v
MBEDTLS_EXIT_FAILURE	libsrc/leddevice/dev_net/ProviderUdpSSL.h	35;"	d
MBEDTLS_EXIT_SUCCESS	libsrc/leddevice/dev_net/ProviderUdpSSL.h	34;"	d
MJPEG	include/utils/PixelFormat.h	/^	MJPEG,$/;"	m	class:PixelFormat
MODEL_HSV	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^		MODEL_HSV,$/;"	e	enum:LedDeviceYeelight::COLOR_MODEL
MODEL_RGB	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^		MODEL_RGB$/;"	e	enum:LedDeviceYeelight::COLOR_MODEL
MULTICAST_GROUPL_DEFAULT_PORT	libsrc/leddevice/dev_net/LedDeviceAtmoOrb.cpp	/^const quint16 MULTICAST_GROUPL_DEFAULT_PORT = 49692;$/;"	v
Map	libsrc/grabber/amlogic/IonBuffer.h	/^	void* Map()$/;"	f	class:IonBuffer
MapAuthDefs	include/api/API.h	/^    typedef QMap<QString, AuthManager::AuthDefinition> MapAuthDefs;$/;"	t	class:API
MapRegister	include/api/API.h	/^    typedef std::map<int, registerData> MapRegister;$/;"	t	class:API
Message	libsrc/utils/Logger.cpp	/^void Logger::Message(LogLevel level, const char* sourceFile, const char* func, unsigned int line, const char* fmt, ...)$/;"	f	class:Logger
MessageForwarder	include/hyperion/MessageForwarder.h	/^class MessageForwarder : public QObject$/;"	c
MessageForwarder	libsrc/hyperion/MessageForwarder.cpp	/^MessageForwarder::MessageForwarder(Hyperion *hyperion)$/;"	f	class:MessageForwarder
MetaTable	include/db/MetaTable.h	/^	MetaTable(QObject* parent = nullptr)$/;"	f	class:MetaTable
MetaTable	include/db/MetaTable.h	/^class MetaTable : public DBManager$/;"	c
MethodNotAllowed	libsrc/webserver/QtHttpReply.h	/^		MethodNotAllowed   = 405,$/;"	e	enum:QtHttpReply::StatusCode
MultiColorAdjustment	include/hyperion/MultiColorAdjustment.h	/^class MultiColorAdjustment$/;"	c
MultiColorAdjustment	libsrc/hyperion/MultiColorAdjustment.cpp	/^MultiColorAdjustment::MultiColorAdjustment(const unsigned ledCnt)$/;"	f	class:MultiColorAdjustment
NETFORWARD	include/utils/settings.h	/^		NETFORWARD,$/;"	e	enum:settings::type
NETWORK	include/utils/settings.h	/^		NETWORK,$/;"	e	enum:settings::type
NORMAL	libsrc/webserver/WebSocketUtils.h	/^		NORMAL    = 1000,$/;"	e	enum:CLOSECODE::value
NO_AUTH	include/api/API.h	/^const QString NO_AUTH = "No Authorization";$/;"	v
NTSC	include/grabber/VideoStandard.h	/^	NTSC,$/;"	m	class:VideoStandard
NUM_POWEROFF_WRITE_BLACK	libsrc/leddevice/dev_serial/ProviderRs232.cpp	/^const int NUM_POWEROFF_WRITE_BLACK = 2;	\/\/ Number of write "BLACK" during powering off$/;"	v
Net	libsrc/leddevice/dev_net/LedDeviceUdpArtNet.h	/^		uint8_t		Net;		\/\/ high universe (not used)$/;"	m	struct:__anon11::__anon12
NetOrigin	include/utils/NetOrigin.h	/^class NetOrigin : public QObject$/;"	c
NetOrigin	libsrc/utils/NetOrigin.cpp	/^NetOrigin::NetOrigin(QObject* parent, Logger* log)$/;"	f	class:NetOrigin
NetUtils	include/utils/NetUtils.h	/^namespace NetUtils {$/;"	n
None	include/grabber/X11Wrapper.h	7;"	d
NotFound	libsrc/webserver/QtHttpReply.h	/^		NotFound           = 404,$/;"	e	enum:QtHttpReply::StatusCode
NotImplemented	libsrc/webserver/QtHttpReply.h	/^		NotImplemented     = 501,$/;"	e	enum:QtHttpReply::StatusCode
OFF	include/utils/Logger.h	/^		OFF$/;"	e	enum:Logger::LogLevel
ONE_SLASH	libsrc/leddevice/dev_net/ProviderRestApi.cpp	/^const QChar ONE_SLASH = '\/';$/;"	m	namespace:__anon4	file:
OPCODE	libsrc/webserver/WebSocketUtils.h	/^namespace OPCODE$/;"	n
OPC_HEADER_SIZE	libsrc/leddevice/dev_net/LedDeviceFadeCandy.cpp	/^const unsigned OPC_HEADER_SIZE = 4;     \/\/ OPC header size$/;"	m	namespace:__anon5	file:
OPC_SET_PIXELS	libsrc/leddevice/dev_net/LedDeviceFadeCandy.cpp	/^const unsigned OPC_SET_PIXELS  = 0;     \/\/ OPC command codes$/;"	m	namespace:__anon5	file:
OPC_SYS_EX	libsrc/leddevice/dev_net/LedDeviceFadeCandy.cpp	/^const unsigned OPC_SYS_EX      = 255;   \/\/ OPC command codes$/;"	m	namespace:__anon5	file:
ORDER_BRG	include/hyperion/LedString.h	/^	ORDER_RGB, ORDER_RBG, ORDER_GRB, ORDER_BRG, ORDER_GBR, ORDER_BGR$/;"	m	class:ColorOrder
ORDER_GBR	include/hyperion/LedString.h	/^	ORDER_RGB, ORDER_RBG, ORDER_GRB, ORDER_BRG, ORDER_GBR, ORDER_BGR$/;"	m	class:ColorOrder
ORDER_GRB	include/hyperion/LedString.h	/^	ORDER_RGB, ORDER_RBG, ORDER_GRB, ORDER_BRG, ORDER_GBR, ORDER_BGR$/;"	m	class:ColorOrder
ORDER_RBG	include/hyperion/LedString.h	/^	ORDER_RGB, ORDER_RBG, ORDER_GRB, ORDER_BRG, ORDER_GBR, ORDER_BGR$/;"	m	class:ColorOrder
ORDER_RGB	include/hyperion/LedString.h	/^	ORDER_RGB, ORDER_RBG, ORDER_GRB, ORDER_BRG, ORDER_GBR, ORDER_BGR$/;"	m	class:ColorOrder
Ok	libsrc/webserver/QtHttpReply.h	/^		Ok                 = 200,$/;"	e	enum:QtHttpReply::StatusCode
OpCode	libsrc/leddevice/dev_net/LedDeviceUdpArtNet.h	/^		uint16_t	OpCode;		\/\/ See Doc. Table 1 - OpCodes e.g. 0x5000 OpOutput \/ OpDmx$/;"	m	struct:__anon11::__anon12
Option	include/commandline/Option.h	/^class Option: public QCommandLineOption$/;"	c	namespace:commandline
Option	libsrc/commandline/Option.cpp	/^Option::Option(const QCommandLineOption &other)$/;"	f	class:Option
Option	libsrc/commandline/Option.cpp	/^Option::Option(const QString &name, const QString &description, const QString &valueName, const QString &defaultValue)$/;"	f	class:Option
Option	libsrc/commandline/Option.cpp	/^Option::Option(const QStringList &names, const QString &description, const QString &valueName, const QString &defaultValue)$/;"	f	class:Option
OsxFrameGrabber	include/grabber/OsxFrameGrabber.h	/^class OsxFrameGrabber : public Grabber$/;"	c
OsxFrameGrabber	libsrc/grabber/osx/OsxFrameGrabber.cpp	/^OsxFrameGrabber::OsxFrameGrabber(const unsigned display, const unsigned width, const unsigned height)$/;"	f	class:OsxFrameGrabber
OsxWrapper	include/grabber/OsxWrapper.h	/^class OsxWrapper: public GrabberWrapper$/;"	c
OsxWrapper	libsrc/grabber/osx/OsxWrapper.cpp	/^OsxWrapper::OsxWrapper(const unsigned display, const unsigned grabWidth, const unsigned grabHeight, const unsigned updateRate_Hz)$/;"	f	class:OsxWrapper
PAL	include/grabber/VideoStandard.h	/^	PAL,$/;"	m	class:VideoStandard
PANEL_ID	libsrc/leddevice/dev_net/LedDeviceNanoleaf.cpp	/^const char PANEL_ID[] = "panelId";$/;"	m	namespace:__anon2	file:
PANEL_LAYOUT	libsrc/leddevice/dev_net/LedDeviceNanoleaf.cpp	/^const char PANEL_LAYOUT[] = "layout";$/;"	m	namespace:__anon2	file:
PANEL_NUM	libsrc/leddevice/dev_net/LedDeviceNanoleaf.cpp	/^const char PANEL_NUM[] = "numPanels";$/;"	m	namespace:__anon2	file:
PANEL_POSITIONDATA	libsrc/leddevice/dev_net/LedDeviceNanoleaf.cpp	/^const char PANEL_POSITIONDATA[] = "positionData";$/;"	m	namespace:__anon2	file:
PANEL_POS_X	libsrc/leddevice/dev_net/LedDeviceNanoleaf.cpp	/^const char PANEL_POS_X[] = "x";$/;"	m	namespace:__anon2	file:
PANEL_POS_Y	libsrc/leddevice/dev_net/LedDeviceNanoleaf.cpp	/^const char PANEL_POS_Y[] = "y";$/;"	m	namespace:__anon2	file:
PANEL_SHAPE_TYPE	libsrc/leddevice/dev_net/LedDeviceNanoleaf.cpp	/^const char PANEL_SHAPE_TYPE[] = "shapeType";$/;"	m	namespace:__anon2	file:
PAYLOAD_PER_LIGHT	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const uint8_t PAYLOAD_PER_LIGHT[] =$/;"	m	namespace:__anon9	file:
PING	libsrc/webserver/WebSocketUtils.h	/^		PING = 0x9,$/;"	e	enum:OPCODE::value
PONG	libsrc/webserver/WebSocketUtils.h	/^		PONG = 0xA,$/;"	e	enum:OPCODE::value
POWER_SUPPLY	libsrc/leddevice/dev_net/LedDeviceNanoleaf.cpp	/^	POWER_SUPPLY,$/;"	e	enum:SHAPETYPES	file:
PROFILER_BLOCK_EXECUTION_TIME	include/utils/Profiler.h	28;"	d
PROFILER_TIMER_GET	include/utils/Profiler.h	30;"	d
PROFILER_TIMER_GET_IF	include/utils/Profiler.h	31;"	d
PROFILER_TIMER_START	include/utils/Profiler.h	29;"	d
PROTOSERVER	include/utils/settings.h	/^		PROTOSERVER,$/;"	e	enum:settings::type
PROVIDERHID_H	libsrc/leddevice/dev_hid/ProviderHID.h	2;"	d
PROVIDERRESTKAPI_H	libsrc/leddevice/dev_net/ProviderRestApi.h	2;"	d
PROVIDERRS232_H	libsrc/leddevice/dev_serial/ProviderRs232.h	2;"	d
PROVIDERUDPSSL_H	libsrc/leddevice/dev_net/ProviderUdpSSL.h	2;"	d
PROVIDERUDP_H	libsrc/leddevice/dev_net/ProviderUdp.h	2;"	d
PY_PATH_SEP	include/python/PythonUtils.h	12;"	d
PY_PATH_SEP	include/python/PythonUtils.h	14;"	d
Parser	include/commandline/Parser.h	/^	Parser(QString description=QString())$/;"	f	class:commandline::Parser
Parser	include/commandline/Parser.h	/^class Parser : public QObject$/;"	c	namespace:commandline
ParsingError	libsrc/webserver/QtHttpClientWrapper.h	/^		ParsingError    = -1,$/;"	e	enum:QtHttpClientWrapper::ParsingStatus
ParsingStatus	libsrc/webserver/QtHttpClientWrapper.h	/^	enum ParsingStatus {$/;"	g	class:QtHttpClientWrapper
PhilipsHueLight	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^PhilipsHueLight::PhilipsHueLight(Logger* log, unsigned int id, QJsonObject values, unsigned int ledidx)$/;"	f	class:PhilipsHueLight
PhilipsHueLight	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^class PhilipsHueLight$/;"	c
Physical	libsrc/leddevice/dev_net/LedDeviceUdpArtNet.h	/^		uint8_t		Physical;	\/\/ 0x00$/;"	m	struct:__anon11::__anon12
PhysicalAddress	libsrc/grabber/amlogic/IonBuffer.h	/^	unsigned long PhysicalAddress() const$/;"	f	class:IonBuffer
PixelFormat	include/utils/PixelFormat.h	/^enum class PixelFormat {$/;"	c
PriorityMuxer	include/hyperion/PriorityMuxer.h	/^class PriorityMuxer : public QObject$/;"	c
PriorityMuxer	libsrc/hyperion/PriorityMuxer.cpp	/^PriorityMuxer::PriorityMuxer(int ledCount)$/;"	f	class:PriorityMuxer
Process	include/utils/Process.h	/^namespace Process {$/;"	n
Process	libsrc/utils/Process.cpp	/^namespace Process {$/;"	n	file:
Profiler	include/utils/Profiler.h	/^class Profiler$/;"	c
Profiler	libsrc/utils/Profiler.cpp	/^Profiler::Profiler(const char* sourceFile, const char* func, unsigned int line)$/;"	f	class:Profiler
ProtVer	libsrc/leddevice/dev_net/LedDeviceUdpArtNet.h	/^		uint16_t	ProtVer;	\/\/ 0x0e00 (aka 14)$/;"	m	struct:__anon11::__anon12
ProtoClientConnection	libsrc/protoserver/ProtoClientConnection.cpp	/^ProtoClientConnection::ProtoClientConnection(QTcpSocket* socket, const int &timeout, QObject *parent)$/;"	f	class:ProtoClientConnection
ProtoClientConnection	libsrc/protoserver/ProtoClientConnection.h	/^class ProtoClientConnection : public QObject$/;"	c
ProtoServer	include/protoserver/ProtoServer.h	/^class ProtoServer : public QObject$/;"	c
ProtoServer	libsrc/protoserver/ProtoServer.cpp	/^ProtoServer::ProtoServer(const QJsonDocument& config, QObject* parent)$/;"	f	class:ProtoServer
ProviderHID	libsrc/leddevice/dev_hid/ProviderHID.cpp	/^ProviderHID::ProviderHID()$/;"	f	class:ProviderHID
ProviderHID	libsrc/leddevice/dev_hid/ProviderHID.h	/^class ProviderHID : public LedDevice$/;"	c
ProviderRestApi	libsrc/leddevice/dev_net/ProviderRestApi.cpp	/^ProviderRestApi::ProviderRestApi()$/;"	f	class:ProviderRestApi
ProviderRestApi	libsrc/leddevice/dev_net/ProviderRestApi.cpp	/^ProviderRestApi::ProviderRestApi(const QString &host, const int &port)$/;"	f	class:ProviderRestApi
ProviderRestApi	libsrc/leddevice/dev_net/ProviderRestApi.cpp	/^ProviderRestApi::ProviderRestApi(const QString &host, const int &port, const QString &basePath)$/;"	f	class:ProviderRestApi
ProviderRestApi	libsrc/leddevice/dev_net/ProviderRestApi.h	/^class ProviderRestApi$/;"	c
ProviderRs232	libsrc/leddevice/dev_serial/ProviderRs232.cpp	/^ProviderRs232::ProviderRs232()$/;"	f	class:ProviderRs232
ProviderRs232	libsrc/leddevice/dev_serial/ProviderRs232.h	/^class ProviderRs232 : public LedDevice$/;"	c
ProviderSpi	libsrc/leddevice/dev_spi/ProviderSpi.cpp	/^ProviderSpi::ProviderSpi()$/;"	f	class:ProviderSpi
ProviderSpi	libsrc/leddevice/dev_spi/ProviderSpi.h	/^class ProviderSpi : public LedDevice$/;"	c
ProviderUdp	libsrc/leddevice/dev_net/ProviderUdp.cpp	/^ProviderUdp::ProviderUdp()$/;"	f	class:ProviderUdp
ProviderUdp	libsrc/leddevice/dev_net/ProviderUdp.h	/^class ProviderUdp : public LedDevice$/;"	c
ProviderUdpSSL	libsrc/leddevice/dev_net/ProviderUdpSSL.cpp	/^ProviderUdpSSL::ProviderUdpSSL()$/;"	f	class:ProviderUdpSSL
ProviderUdpSSL	libsrc/leddevice/dev_net/ProviderUdpSSL.h	/^class ProviderUdpSSL : public LedDevice$/;"	c
ProviderUdpSSLDebug	libsrc/leddevice/dev_net/ProviderUdpSSL.h	/^	static void ProviderUdpSSLDebug(void *ctx, int level, const char *file, int line, const char *str)$/;"	f	class:ProviderUdpSSL
ProviderUdpSSLVerify	libsrc/leddevice/dev_net/ProviderUdpSSL.h	/^	static int ProviderUdpSSLVerify(void *data, mbedtls_x509_crt *crt, int depth, uint32_t *flags)$/;"	f	class:ProviderUdpSSL
ProxyAuthorization	libsrc/webserver/QtHttpHeader.cpp	/^const QByteArray & QtHttpHeader::ProxyAuthorization   = QByteArrayLiteral ("Proxy-Authorization");$/;"	m	class:QtHttpHeader	file:
ProxyAuthorization	libsrc/webserver/QtHttpHeader.h	/^	static const QByteArray & ProxyAuthorization;$/;"	m	class:QtHttpHeader
PyInit_hyperion	libsrc/effectengine/EffectModule.cpp	/^PyObject* EffectModule::PyInit_hyperion()$/;"	f	class:EffectModule
PythonInit	include/python/PythonInit.h	/^class PythonInit$/;"	c
PythonInit	libsrc/python/PythonInit.cpp	/^PythonInit::PythonInit()$/;"	f	class:PythonInit
QJsonFactory	include/utils/jsonschema/QJsonFactory.h	/^class QJsonFactory$/;"	c
QJsonSchemaChecker	include/utils/jsonschema/QJsonSchemaChecker.h	/^class QJsonSchemaChecker$/;"	c
QJsonSchemaChecker	libsrc/utils/jsonschema/QJsonSchemaChecker.cpp	/^QJsonSchemaChecker::QJsonSchemaChecker()$/;"	f	class:QJsonSchemaChecker
QJsonUtils	include/utils/jsonschema/QJsonUtils.h	/^class QJsonUtils$/;"	c
QSTRINGUTILS_H	include/utils/QStringUtils.h	2;"	d
QSTRING_CSTR	include/utils/global_defines.h	3;"	d
QStringUtils	include/utils/QStringUtils.h	/^namespace QStringUtils {$/;"	n
QTHTTPCLIENTWRAPPER_H	libsrc/webserver/QtHttpClientWrapper.h	2;"	d
QTHTTPHEADER_H	libsrc/webserver/QtHttpHeader.h	2;"	d
QTHTTPREPLY_H	libsrc/webserver/QtHttpReply.h	2;"	d
QTHTTPREQUEST_H	libsrc/webserver/QtHttpRequest.h	2;"	d
QTHTTPSERVER_H	libsrc/webserver/QtHttpServer.h	2;"	d
Q_DECL_OVERRIDE	libsrc/webserver/QtHttpServer.h	/^	void incomingConnection (qintptr handle) Q_DECL_OVERRIDE;$/;"	m	class:QtHttpServerWrapper
QtGrabber	include/grabber/QtGrabber.h	/^class QtGrabber : public Grabber$/;"	c
QtGrabber	libsrc/grabber/qt/QtGrabber.cpp	/^QtGrabber::QtGrabber(int cropLeft, int cropRight, int cropTop, int cropBottom, int pixelDecimation, int display)$/;"	f	class:QtGrabber
QtHttpClientWrapper	libsrc/webserver/QtHttpClientWrapper.cpp	/^QtHttpClientWrapper::QtHttpClientWrapper (QTcpSocket * sock, const bool& localConnection, QtHttpServer * parent)$/;"	f	class:QtHttpClientWrapper
QtHttpClientWrapper	libsrc/webserver/QtHttpClientWrapper.h	/^class QtHttpClientWrapper : public QObject {$/;"	c
QtHttpHeader	libsrc/webserver/QtHttpHeader.h	/^class QtHttpHeader$/;"	c
QtHttpReply	libsrc/webserver/QtHttpReply.cpp	/^QtHttpReply::QtHttpReply (QtHttpServer * parent)$/;"	f	class:QtHttpReply
QtHttpReply	libsrc/webserver/QtHttpReply.h	/^class QtHttpReply : public QObject$/;"	c
QtHttpRequest	libsrc/webserver/QtHttpRequest.cpp	/^QtHttpRequest::QtHttpRequest (QtHttpClientWrapper * client, QtHttpServer * parent)$/;"	f	class:QtHttpRequest
QtHttpRequest	libsrc/webserver/QtHttpRequest.h	/^class QtHttpRequest : public QObject$/;"	c
QtHttpServer	libsrc/webserver/QtHttpServer.cpp	/^QtHttpServer::QtHttpServer (QObject * parent)$/;"	f	class:QtHttpServer
QtHttpServer	libsrc/webserver/QtHttpServer.h	/^class QtHttpServer : public QObject$/;"	c
QtHttpServerWrapper	libsrc/webserver/QtHttpServer.cpp	/^QtHttpServerWrapper::QtHttpServerWrapper (QObject * parent)$/;"	f	class:QtHttpServerWrapper
QtHttpServerWrapper	libsrc/webserver/QtHttpServer.h	/^class QtHttpServerWrapper : public QTcpServer$/;"	c
QtWrapper	include/grabber/QtWrapper.h	/^class QtWrapper: public GrabberWrapper$/;"	c
QtWrapper	libsrc/grabber/qt/QtWrapper.cpp	/^QtWrapper::QtWrapper(int cropLeft, int cropRight, int cropTop, int cropBottom, int pixelDecimation, int display, const unsigned updateRate_Hz)$/;"	f	class:QtWrapper
RAW_DEFAULT_PORT	libsrc/leddevice/dev_net/LedDeviceUdpRaw.cpp	/^const ushort RAW_DEFAULT_PORT=5568;$/;"	v
RED	include/utils/ColorArgb.h	/^	static ColorArgb RED;$/;"	m	struct:ColorArgb
RED	include/utils/ColorBgr.h	/^	static ColorBgr RED;$/;"	m	struct:ColorBgr
RED	include/utils/ColorRgb.h	/^	static ColorRgb RED;$/;"	m	struct:ColorRgb
RED	include/utils/ColorRgba.h	/^	static ColorRgba RED;$/;"	m	struct:ColorRgba
RED	include/utils/ColorRgbw.h	/^	static ColorRgbw RED;$/;"	m	struct:ColorRgbw
RED	include/utils/RgbChannelAdjustment.h	/^	enum ColorChannel { RED=0, GREEN=1, BLUE=2 };$/;"	e	enum:RgbChannelAdjustment::ColorChannel
RED	libsrc/utils/ColorArgb.cpp	/^ColorArgb ColorArgb::RED   = { 255, 255,   0,   0 };$/;"	m	class:ColorArgb	file:
RED	libsrc/utils/ColorBgr.cpp	/^ColorBgr ColorBgr::RED   = {   0,   0, 255 };$/;"	m	class:ColorBgr	file:
RED	libsrc/utils/ColorRgb.cpp	/^ColorRgb ColorRgb::RED   = { 255,   0,   0 };$/;"	m	class:ColorRgb	file:
RED	libsrc/utils/ColorRgba.cpp	/^ColorRgba ColorRgba::RED   = { 255,   0,   0, 255 };$/;"	m	class:ColorRgba	file:
RED	libsrc/utils/ColorRgbw.cpp	/^ColorRgbw ColorRgbw::RED   = { 255,   0,   0,   0 };$/;"	m	class:ColorRgbw	file:
REGISTER	libsrc/leddevice/LedDeviceWrapper.cpp	26;"	d	file:
REGISTER	libsrc/leddevice/LedDeviceWrapper.cpp	31;"	d	file:
RGB32	include/utils/PixelFormat.h	/^	RGB32,$/;"	m	class:PixelFormat
RGBW	include/utils/RgbToRgbw.h	/^namespace RGBW {$/;"	n
RGBW	libsrc/utils/RgbToRgbw.cpp	/^namespace RGBW {$/;"	n	file:
RHYTM	libsrc/leddevice/dev_net/LedDeviceNanoleaf.cpp	/^	RHYTM,$/;"	e	enum:SHAPETYPES	file:
RSV3	libsrc/webserver/WebSocketUtils.h	/^		RSV3 = 0x3,$/;"	e	enum:OPCODE::value
RSV4	libsrc/webserver/WebSocketUtils.h	/^		RSV4 = 0x4,$/;"	e	enum:OPCODE::value
RSV5	libsrc/webserver/WebSocketUtils.h	/^		RSV5 = 0x5,$/;"	e	enum:OPCODE::value
RSV6	libsrc/webserver/WebSocketUtils.h	/^		RSV6 = 0x6,$/;"	e	enum:OPCODE::value
RSV7	libsrc/webserver/WebSocketUtils.h	/^		RSV7 = 0x7,$/;"	e	enum:OPCODE::value
Range	libsrc/webserver/QtHttpHeader.cpp	/^const QByteArray & QtHttpHeader::Range                = QByteArrayLiteral ("Range");$/;"	m	class:QtHttpHeader	file:
Range	libsrc/webserver/QtHttpHeader.h	/^	static const QByteArray & Range;$/;"	m	class:QtHttpHeader
RegularExpressionOption	include/commandline/RegularExpressionOption.h	/^    RegularExpressionOption(const QCommandLineOption &other)$/;"	f	class:commandline::RegularExpressionOption
RegularExpressionOption	include/commandline/RegularExpressionOption.h	/^    RegularExpressionOption(const QCommandLineOption &other,$/;"	f	class:commandline::RegularExpressionOption
RegularExpressionOption	include/commandline/RegularExpressionOption.h	/^    RegularExpressionOption(const QString &name,$/;"	f	class:commandline::RegularExpressionOption
RegularExpressionOption	include/commandline/RegularExpressionOption.h	/^    RegularExpressionOption(const QStringList &names,$/;"	f	class:commandline::RegularExpressionOption
RegularExpressionOption	include/commandline/RegularExpressionOption.h	/^class RegularExpressionOption: public ValidatorOption$/;"	c	namespace:commandline
RequestParsed	libsrc/webserver/QtHttpClientWrapper.h	/^		RequestParsed   =  3$/;"	e	enum:QtHttpClientWrapper::ParsingStatus
RgbChannelAdjustment	include/utils/RgbChannelAdjustment.h	/^class RgbChannelAdjustment$/;"	c
RgbChannelAdjustment	libsrc/utils/RgbChannelAdjustment.cpp	/^RgbChannelAdjustment::RgbChannelAdjustment(QString channelName)$/;"	f	class:RgbChannelAdjustment
RgbChannelAdjustment	libsrc/utils/RgbChannelAdjustment.cpp	/^RgbChannelAdjustment::RgbChannelAdjustment(uint8_t adjustR, uint8_t adjustG, uint8_t adjustB, QString channelName)$/;"	f	class:RgbChannelAdjustment
RgbTransform	include/utils/RgbTransform.h	/^class RgbTransform$/;"	c
RgbTransform	libsrc/utils/RgbTransform.cpp	/^RgbTransform::RgbTransform()$/;"	f	class:RgbTransform
RgbTransform	libsrc/utils/RgbTransform.cpp	/^RgbTransform::RgbTransform(double gammaR, double gammaG, double gammaB, double backlightThreshold, bool backlightColored, uint8_t brightness, uint8_t brightnessCompensation)$/;"	f	class:RgbTransform
Rgb_to_Rgbw	libsrc/utils/RgbToRgbw.cpp	/^void Rgb_to_Rgbw(ColorRgb input, ColorRgbw * output, const WhiteAlgorithm algorithm)$/;"	f	namespace:RGBW
SECAM	include/grabber/VideoStandard.h	/^	SECAM,$/;"	m	class:VideoStandard
SHAPETYPES	libsrc/leddevice/dev_net/LedDeviceNanoleaf.cpp	/^enum SHAPETYPES {$/;"	g	file:
SMOOTHING	include/utils/settings.h	/^		SMOOTHING,$/;"	e	enum:settings::type
SMOOTHING_CFG	libsrc/hyperion/LinearColorSmoothing.h	/^	struct SMOOTHING_CFG$/;"	s	class:LinearColorSmoothing
SMOOTHING_MODE_DEFAULT	include/hyperion/PriorityMuxer.h	19;"	d
SMOOTHING_MODE_PAUSE	include/hyperion/PriorityMuxer.h	20;"	d
SPACE	libsrc/webserver/QtHttpClientWrapper.h	/^	static const char SPACE = ' ';$/;"	m	class:QtHttpClientWrapper
SPI_BYTES_PER_COLOUR	libsrc/leddevice/dev_spi/LedDeviceAPA104.h	/^	const int SPI_BYTES_PER_COLOUR;$/;"	m	class:LedDeviceAPA104
SPI_BYTES_PER_COLOUR	libsrc/leddevice/dev_spi/LedDeviceSk6812SPI.h	/^	const int SPI_BYTES_PER_COLOUR;$/;"	m	class:LedDeviceSk6812SPI
SPI_BYTES_PER_COLOUR	libsrc/leddevice/dev_spi/LedDeviceSk6822SPI.h	/^	const int SPI_BYTES_PER_COLOUR;$/;"	m	class:LedDeviceSk6822SPI
SPI_BYTES_PER_COLOUR	libsrc/leddevice/dev_spi/LedDeviceWs2812SPI.h	/^	const int SPI_BYTES_PER_COLOUR;$/;"	m	class:LedDeviceWs2812SPI
SPI_BYTES_WAIT_TIME	libsrc/leddevice/dev_spi/LedDeviceSk6822SPI.h	/^	const int SPI_BYTES_WAIT_TIME;$/;"	m	class:LedDeviceSk6822SPI
SPI_FRAME_END_LATCH_BYTES	libsrc/leddevice/dev_spi/LedDeviceAPA104.h	/^	const int SPI_FRAME_END_LATCH_BYTES;$/;"	m	class:LedDeviceAPA104
SPI_FRAME_END_LATCH_BYTES	libsrc/leddevice/dev_spi/LedDeviceSk6822SPI.h	/^	const int SPI_FRAME_END_LATCH_BYTES;$/;"	m	class:LedDeviceSk6822SPI
SPI_FRAME_END_LATCH_BYTES	libsrc/leddevice/dev_spi/LedDeviceWs2812SPI.h	/^	const int SPI_FRAME_END_LATCH_BYTES;$/;"	m	class:LedDeviceWs2812SPI
SQUARE	libsrc/leddevice/dev_net/LedDeviceNanoleaf.cpp	/^	SQUARE,$/;"	e	enum:SHAPETYPES	file:
SSDPDISCOVER_H	include/ssdp/SSDPDiscover.h	2;"	d
SSDPDiscover	include/ssdp/SSDPDiscover.h	/^class SSDPDiscover : public QObject$/;"	c
SSDPDiscover	libsrc/ssdp/SSDPDiscover.cpp	/^SSDPDiscover::SSDPDiscover(QObject* parent)$/;"	f	class:SSDPDiscover
SSDPHandler	include/ssdp/SSDPHandler.h	/^class SSDPHandler : public SSDPServer{$/;"	c
SSDPHandler	libsrc/ssdp/SSDPHandler.cpp	/^SSDPHandler::SSDPHandler(WebServer* webserver, const quint16& flatBufPort, const quint16& jsonServerPort, const QString& name, QObject * parent)$/;"	f	class:SSDPHandler
SSDPServer	include/ssdp/SSDPServer.h	/^class SSDPServer : public QObject {$/;"	c
SSDPServer	libsrc/ssdp/SSDPServer.cpp	/^SSDPServer::SSDPServer(QObject * parent)$/;"	f	class:SSDPServer
SSDPService	include/ssdp/SSDPDiscover.h	/^struct SSDPService {$/;"	s
SSDP_CANVAS	libsrc/leddevice/dev_net/LedDeviceNanoleaf.cpp	/^const char SSDP_CANVAS[] = "nanoleaf:nl29";$/;"	m	namespace:__anon2	file:
SSDP_DESCRIPTION	libsrc/ssdp/SSDPDescription.h	/^static const QString SSDP_DESCRIPTION =	"<?xml version=\\"1.0\\"?>"$/;"	v
SSDP_FILTER	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const char SSDP_FILTER[] = "(.*)IpBridge(.*)";$/;"	m	namespace:__anon9	file:
SSDP_FILTER	libsrc/leddevice/dev_net/LedDeviceWled.cpp	/^const char SSDP_FILTER[] = "(.*)";$/;"	m	namespace:__anon10	file:
SSDP_FILTER	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^const char SSDP_FILTER[] = "yeelight(.*)";$/;"	m	namespace:__anon3	file:
SSDP_FILTER_HEADER	libsrc/leddevice/dev_net/LedDeviceNanoleaf.cpp	/^const char SSDP_FILTER_HEADER[] = "ST";$/;"	m	namespace:__anon2	file:
SSDP_FILTER_HEADER	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const char SSDP_FILTER_HEADER[] = "SERVER";$/;"	m	namespace:__anon9	file:
SSDP_FILTER_HEADER	libsrc/leddevice/dev_net/LedDeviceWled.cpp	/^const char SSDP_FILTER_HEADER[] = "ST";$/;"	m	namespace:__anon10	file:
SSDP_FILTER_HEADER	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^const char SSDP_FILTER_HEADER[] = "Location";$/;"	m	namespace:__anon3	file:
SSDP_ID	libsrc/leddevice/dev_net/LedDeviceNanoleaf.cpp	/^const char SSDP_ID[] = "ssdp:all";$/;"	m	namespace:__anon2	file:
SSDP_ID	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const char SSDP_ID[] = "upnp:rootdevice";$/;"	m	namespace:__anon9	file:
SSDP_ID	libsrc/leddevice/dev_net/LedDeviceWled.cpp	/^const char SSDP_ID[] = "ssdp:all";$/;"	m	namespace:__anon10	file:
SSDP_ID	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^const char SSDP_ID[] = "wifi_bulb";$/;"	m	namespace:__anon3	file:
SSDP_LIGHTPANELS	libsrc/leddevice/dev_net/LedDeviceNanoleaf.cpp	/^const char SSDP_LIGHTPANELS[] = "nanoleaf_aurora:light";$/;"	m	namespace:__anon2	file:
SSDP_PORT	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^const quint16 SSDP_PORT = 1982;$/;"	m	namespace:__anon3	file:
SSL_CIPHERSUITES	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const int SSL_CIPHERSUITES[2] = { MBEDTLS_TLS_PSK_WITH_AES_128_GCM_SHA256, 0 };$/;"	m	namespace:__anon9	file:
STATE_ON	libsrc/leddevice/dev_net/LedDeviceNanoleaf.cpp	/^const char STATE_ON[] = "on";$/;"	m	namespace:__anon2	file:
STATE_ON	libsrc/leddevice/dev_net/LedDeviceWled.cpp	/^const char STATE_ON[] = "on";$/;"	m	namespace:__anon10	file:
STATE_ONOFF_VALUE	libsrc/leddevice/dev_net/LedDeviceNanoleaf.cpp	/^const char STATE_ONOFF_VALUE[] = "value";$/;"	m	namespace:__anon2	file:
STATE_VALUE_FALSE	libsrc/leddevice/dev_net/LedDeviceNanoleaf.cpp	/^const char STATE_VALUE_FALSE[] = "false";$/;"	m	namespace:__anon2	file:
STATE_VALUE_FALSE	libsrc/leddevice/dev_net/LedDeviceWled.cpp	/^const char STATE_VALUE_FALSE[] = "false";$/;"	m	namespace:__anon10	file:
STATE_VALUE_TRUE	libsrc/leddevice/dev_net/LedDeviceNanoleaf.cpp	/^const char STATE_VALUE_TRUE[] = "true";$/;"	m	namespace:__anon2	file:
STATE_VALUE_TRUE	libsrc/leddevice/dev_net/LedDeviceWled.cpp	/^const char STATE_VALUE_TRUE[] = "true";$/;"	m	namespace:__anon10	file:
STATICFILESERVING_H	libsrc/webserver/StaticFileServing.h	2;"	d
STREAM_CONNECTION_RETRYS	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const int STREAM_CONNECTION_RETRYS = 5;$/;"	m	namespace:__anon9	file:
STREAM_CONTROL_DEFAULT_PORT	libsrc/leddevice/dev_net/LedDeviceNanoleaf.cpp	/^const quint16 STREAM_CONTROL_DEFAULT_PORT = 60222; \/\/Fixed port for Canvas;$/;"	m	namespace:__anon2	file:
STREAM_CONTROL_PORT	libsrc/leddevice/dev_net/LedDeviceNanoleaf.cpp	/^const char STREAM_CONTROL_PORT[] = "streamControlPort";$/;"	m	namespace:__anon2	file:
STREAM_DEFAULT_PORT	libsrc/leddevice/dev_net/LedDeviceFadeCandy.cpp	/^const quint16 STREAM_DEFAULT_PORT = 7890;$/;"	v
STREAM_DEFAULT_PORT	libsrc/leddevice/dev_net/LedDeviceWled.cpp	/^const quint16 STREAM_DEFAULT_PORT = 19446;$/;"	m	namespace:__anon10	file:
STREAM_SSL_HANDSHAKE_ATTEMPTS	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const int STREAM_SSL_HANDSHAKE_ATTEMPTS = 5;$/;"	m	namespace:__anon9	file:
STRINGIFY	libsrc/python/PythonInit.cpp	23;"	d	file:
STRINGIFY2	libsrc/python/PythonInit.cpp	22;"	d	file:
STY_FLATBUFSERVER	include/ssdp/SSDPDiscover.h	/^	STY_FLATBUFSERVER,$/;"	m	class:searchType
STY_WEBSERVER	include/ssdp/SSDPDiscover.h	/^	STY_WEBSERVER,$/;"	m	class:searchType
SUBTRACT_MINIMUM	include/utils/RgbToRgbw.h	/^		SUBTRACT_MINIMUM,$/;"	m	class:RGBW::WhiteAlgorithm
SUB_MIN_COOL_ADJUST	include/utils/RgbToRgbw.h	/^		SUB_MIN_COOL_ADJUST,$/;"	m	class:RGBW::WhiteAlgorithm
SUB_MIN_WARM_ADJUST	include/utils/RgbToRgbw.h	/^		SUB_MIN_WARM_ADJUST,$/;"	m	class:RGBW::WhiteAlgorithm
SYSTEMCAPTURE	include/utils/settings.h	/^		SYSTEMCAPTURE,$/;"	e	enum:settings::type
SecWebSocketKey	libsrc/webserver/QtHttpHeader.cpp	/^const QByteArray & QtHttpHeader::SecWebSocketKey      = QByteArrayLiteral ("Sec-WebSocket-Key");$/;"	m	class:QtHttpHeader	file:
SecWebSocketKey	libsrc/webserver/QtHttpHeader.h	/^	static const QByteArray & SecWebSocketKey;$/;"	m	class:QtHttpHeader
SecWebSocketProtocol	libsrc/webserver/QtHttpHeader.cpp	/^const QByteArray & QtHttpHeader::SecWebSocketProtocol = QByteArrayLiteral ("Sec-WebSocket-Protocol");$/;"	m	class:QtHttpHeader	file:
SecWebSocketProtocol	libsrc/webserver/QtHttpHeader.h	/^	static const QByteArray & SecWebSocketProtocol;$/;"	m	class:QtHttpHeader
SecWebSocketVersion	libsrc/webserver/QtHttpHeader.cpp	/^const QByteArray & QtHttpHeader::SecWebSocketVersion  = QByteArrayLiteral ("Sec-WebSocket-Version");$/;"	m	class:QtHttpHeader	file:
SecWebSocketVersion	libsrc/webserver/QtHttpHeader.h	/^	static const QByteArray & SecWebSocketVersion;$/;"	m	class:QtHttpHeader
SeeOther	libsrc/webserver/QtHttpReply.h	/^		SeeOther           = 303,$/;"	e	enum:QtHttpReply::StatusCode
Sequence	libsrc/leddevice/dev_net/LedDeviceUdpArtNet.h	/^		uint8_t		Sequence;	\/\/ monotonic counter$/;"	m	struct:__anon11::__anon12
Server	libsrc/webserver/QtHttpHeader.cpp	/^const QByteArray & QtHttpHeader::Server               = QByteArrayLiteral ("Server");$/;"	m	class:QtHttpHeader	file:
Server	libsrc/webserver/QtHttpHeader.h	/^	static const QByteArray & Server;$/;"	m	class:QtHttpHeader
ServiceUnavailable	libsrc/webserver/QtHttpReply.h	/^		ServiceUnavailable = 503,$/;"	e	enum:QtHttpReply::StatusCode
SetCookie	libsrc/webserver/QtHttpHeader.cpp	/^const QByteArray & QtHttpHeader::SetCookie            = QByteArrayLiteral ("Set-Cookie");$/;"	m	class:QtHttpHeader	file:
SetCookie	libsrc/webserver/QtHttpHeader.h	/^	static const QByteArray & SetCookie;$/;"	m	class:QtHttpHeader
SettingsManager	include/hyperion/SettingsManager.h	/^class SettingsManager : public QObject$/;"	c
SettingsManager	libsrc/hyperion/SettingsManager.cpp	/^SettingsManager::SettingsManager(const quint8& instance, QObject* parent)$/;"	f	class:SettingsManager
SettingsTable	include/db/SettingsTable.h	/^	SettingsTable(const quint8& instance, QObject* parent = nullptr)$/;"	f	class:SettingsTable
SettingsTable	include/db/SettingsTable.h	/^class SettingsTable : public DBManager$/;"	c
Setup	libsrc/grabber/x11/X11Grabber.cpp	/^bool X11Grabber::Setup()$/;"	f	class:X11Grabber
SkipEmptyParts	include/utils/QStringUtils.h	/^	SkipEmptyParts,$/;"	m	class:QStringUtils::SplitBehavior
Sleep	include/utils/Sleep.h	/^class Sleep : protected QThread {$/;"	c
SplitBehavior	include/utils/QStringUtils.h	/^enum class SplitBehavior {$/;"	c	namespace:QStringUtils
SslErrorSignal	libsrc/webserver/QtHttpServer.h	/^	typedef void (QSslSocket::* SslErrorSignal) (const QList<QSslError> &);$/;"	t	class:QtHttpServer
StaticFileServing	libsrc/webserver/StaticFileServing.cpp	/^StaticFileServing::StaticFileServing (QObject * parent)$/;"	f	class:StaticFileServing
StaticFileServing	libsrc/webserver/StaticFileServing.h	/^class StaticFileServing : public QObject {$/;"	c
StatusCode	libsrc/webserver/QtHttpReply.h	/^	enum StatusCode$/;"	g	class:QtHttpReply
StopWatchItem	libsrc/utils/Profiler.cpp	/^struct StopWatchItem {$/;"	s	file:
SubUni	libsrc/leddevice/dev_net/LedDeviceUdpArtNet.h	/^		uint8_t		SubUni;		\/\/ low universe (0-255)$/;"	m	struct:__anon11::__anon12
SwitchOption	include/commandline/SwitchOption.h	/^	SwitchOption(const QCommandLineOption &other, const QMap<QString, T> &switches)$/;"	f	class:commandline::SwitchOption
SwitchOption	include/commandline/SwitchOption.h	/^	SwitchOption(const QString &name,$/;"	f	class:commandline::SwitchOption
SwitchOption	include/commandline/SwitchOption.h	/^	SwitchOption(const QStringList &names,$/;"	f	class:commandline::SwitchOption
SwitchOption	include/commandline/SwitchOption.h	/^class SwitchOption: public Option$/;"	c	namespace:commandline
Sync	libsrc/grabber/amlogic/IonBuffer.h	/^	void Sync()$/;"	f	class:IonBuffer
SysInfo	include/utils/SysInfo.h	/^class SysInfo : public QObject$/;"	c
SysInfo	libsrc/utils/SysInfo.cpp	/^SysInfo::SysInfo()$/;"	f	class:SysInfo
TABLE_SZ	libsrc/leddevice/dev_other/LedDevicePiBlaster.cpp	26;"	d	file:
TERM	libsrc/webserver/WebSocketUtils.h	/^		TERM      = 1002,$/;"	e	enum:CLOSECODE::value
TEST_CORRELATION_IDS	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^const bool TEST_CORRELATION_IDS  = false; \/\/Ignore, if yeelight sends responses in different order as request commands$/;"	m	namespace:__anon3	file:
TEXT	libsrc/webserver/WebSocketUtils.h	/^		TEXT = 0x1,$/;"	e	enum:OPCODE::value
TPM2_DEFAULT_PORT	libsrc/leddevice/dev_net/LedDeviceTpm2net.cpp	/^const ushort TPM2_DEFAULT_PORT = 65506;$/;"	v
TRIANGLE	libsrc/leddevice/dev_net/LedDeviceNanoleaf.cpp	/^	TRIANGLE,$/;"	e	enum:SHAPETYPES	file:
T_LOG_MESSAGE	include/utils/Logger.h	/^	} T_LOG_MESSAGE;$/;"	t	class:Logger	typeref:struct:Logger::__anon16
TimerGetTime	libsrc/utils/Profiler.cpp	/^void Profiler::TimerGetTime(const QString timerName, const char* sourceFile, const char* func, unsigned int line)$/;"	f	class:Profiler
TimerStart	libsrc/utils/Profiler.cpp	/^void Profiler::TimerStart(const QString timerName, const char* sourceFile, const char* func, unsigned int line)$/;"	f	class:Profiler
TransferEncoding	libsrc/webserver/QtHttpHeader.cpp	/^const QByteArray & QtHttpHeader::TransferEncoding     = QByteArrayLiteral ("Transfer-Encoding");$/;"	m	class:QtHttpHeader	file:
TransferEncoding	libsrc/webserver/QtHttpHeader.h	/^	static const QByteArray & TransferEncoding;$/;"	m	class:QtHttpHeader
UNEXPECTED	libsrc/webserver/WebSocketUtils.h	/^		UNEXPECTED= 1011$/;"	e	enum:CLOSECODE::value
UNSET	include/utils/Logger.h	/^		UNSET,$/;"	e	enum:Logger::LogLevel
UPNP_ALIVE_MESSAGE	libsrc/ssdp/SSDPServer.cpp	/^static const QString UPNP_ALIVE_MESSAGE = "NOTIFY * HTTP\/1.1\\r\\n"$/;"	v	file:
UPNP_BYEBYE_MESSAGE	libsrc/ssdp/SSDPServer.cpp	/^static const QString UPNP_BYEBYE_MESSAGE = "NOTIFY * HTTP\/1.1\\r\\n"$/;"	v	file:
UPNP_DISCOVER_MESSAGE	libsrc/ssdp/SSDPDiscover.cpp	/^const QString UPNP_DISCOVER_MESSAGE = "M-SEARCH * HTTP\/1.1\\r\\n"$/;"	m	namespace:__anon1	file:
UPNP_MSEARCH_RESPONSE	libsrc/ssdp/SSDPServer.cpp	/^static const QString UPNP_MSEARCH_RESPONSE = "HTTP\/1.1 200 OK\\r\\n"$/;"	v	file:
UPNP_UPDATE_MESSAGE	libsrc/ssdp/SSDPServer.cpp	/^static const QString UPNP_UPDATE_MESSAGE = "NOTIFY * HTTP\/1.1\\r\\n"$/;"	v	file:
USB_OLD_PRODUCT_ID	libsrc/leddevice/dev_hid/LedDeviceLightpack.cpp	10;"	d	file:
USB_OLD_PRODUCT_ID	libsrc/leddevice/dev_hid/LedDeviceMultiLightpack.cpp	11;"	d	file:
USB_OLD_VENDOR_ID	libsrc/leddevice/dev_hid/LedDeviceLightpack.cpp	9;"	d	file:
USB_OLD_VENDOR_ID	libsrc/leddevice/dev_hid/LedDeviceMultiLightpack.cpp	10;"	d	file:
USB_PRODUCT_ID	libsrc/leddevice/dev_hid/LedDeviceLightpack.cpp	12;"	d	file:
USB_PRODUCT_ID	libsrc/leddevice/dev_hid/LedDeviceMultiLightpack.cpp	13;"	d	file:
USB_VENDOR_ID	libsrc/leddevice/dev_hid/LedDeviceLightpack.cpp	11;"	d	file:
USB_VENDOR_ID	libsrc/leddevice/dev_hid/LedDeviceMultiLightpack.cpp	12;"	d	file:
UYVY	include/utils/PixelFormat.h	/^	UYVY,$/;"	m	class:PixelFormat
Upgrade	libsrc/webserver/QtHttpHeader.cpp	/^const QByteArray & QtHttpHeader::Upgrade              = QByteArrayLiteral ("Upgrade");$/;"	m	class:QtHttpHeader	file:
Upgrade	libsrc/webserver/QtHttpHeader.h	/^	static const QByteArray & Upgrade;$/;"	m	class:QtHttpHeader
UserAgent	libsrc/webserver/QtHttpHeader.cpp	/^const QByteArray & QtHttpHeader::UserAgent            = QByteArrayLiteral ("User-Agent");$/;"	m	class:QtHttpHeader	file:
UserAgent	libsrc/webserver/QtHttpHeader.h	/^	static const QByteArray & UserAgent;$/;"	m	class:QtHttpHeader
V4L2	include/utils/settings.h	/^		V4L2,$/;"	e	enum:settings::type
V4L2Grabber	include/grabber/V4L2Grabber.h	/^class V4L2Grabber : public Grabber$/;"	c
V4L2Grabber	libsrc/grabber/v4l2/V4L2Grabber.cpp	/^V4L2Grabber::V4L2Grabber(const QString & device$/;"	f	class:V4L2Grabber
V4L2Wrapper	include/grabber/V4L2Wrapper.h	/^class V4L2Wrapper : public GrabberWrapper$/;"	c
V4L2Wrapper	libsrc/grabber/v4l2/V4L2Wrapper.cpp	/^V4L2Wrapper::V4L2Wrapper(const QString &device,$/;"	f	class:V4L2Wrapper
V4L2_CAP_META_CAPTURE	libsrc/grabber/v4l2/V4L2Grabber.cpp	30;"	d	file:
VC_IMAGE_RGBA32	include/grabber/DispmanxFrameGrabberMock.h	/^const int VC_IMAGE_RGBA32 = 1;$/;"	v
VC_RECT_T	include/grabber/DispmanxFrameGrabberMock.h	/^struct VC_RECT_T {$/;"	s
VECTOR_DMP_SET_PROPERTY	libsrc/leddevice/dev_net/LedDeviceUdpE131.cpp	/^const uint8_t VECTOR_DMP_SET_PROPERTY = 0x02;$/;"	v
VECTOR_E131_DATA_PACKET	libsrc/leddevice/dev_net/LedDeviceUdpE131.cpp	/^const uint32_t VECTOR_E131_DATA_PACKET = 0x00000002;$/;"	v
VECTOR_ROOT_E131_DATA	libsrc/leddevice/dev_net/LedDeviceUdpE131.cpp	/^const uint32_t VECTOR_ROOT_E131_DATA = 0x00000004;$/;"	v
VIDEO_2D	include/utils/VideoMode.h	/^	VIDEO_2D,$/;"	m	class:VideoMode
VIDEO_3DSBS	include/utils/VideoMode.h	/^	VIDEO_3DSBS,$/;"	m	class:VideoMode
VIDEO_DEVICE	libsrc/grabber/amlogic/AmlogicGrabber.cpp	20;"	d	file:
VIOLATION	libsrc/webserver/WebSocketUtils.h	/^		VIOLATION = 1008,$/;"	e	enum:CLOSECODE::value
ValidatorOption	include/commandline/ValidatorOption.h	/^    ValidatorOption(const QCommandLineOption &other,$/;"	f	class:commandline::ValidatorOption
ValidatorOption	include/commandline/ValidatorOption.h	/^    ValidatorOption(const QString &name,$/;"	f	class:commandline::ValidatorOption
ValidatorOption	include/commandline/ValidatorOption.h	/^    ValidatorOption(const QStringList &names,$/;"	f	class:commandline::ValidatorOption
ValidatorOption	include/commandline/ValidatorOption.h	/^class ValidatorOption: public Option$/;"	c	namespace:commandline
VectorPair	include/db/DBManager.h	/^typedef QVector<CPair> VectorPair;$/;"	t
Version	libsrc/leddevice/dev_hid/LedDeviceLightpack.h	/^	struct Version$/;"	s	class:LedDeviceLightpack
VideoMode	include/utils/VideoMode.h	/^enum class VideoMode$/;"	c
VideoStandard	include/grabber/VideoStandard.h	/^enum class VideoStandard {$/;"	c
WARNING	include/utils/Logger.h	/^		WARNING,$/;"	e	enum:Logger::LogLevel
WEBSERVER	include/utils/settings.h	/^		WEBSERVER,$/;"	e	enum:settings::type
WEBSERVER_DEFAULT_CRT_PATH	include/webserver/WebServer.h	/^	const QString        WEBSERVER_DEFAULT_CRT_PATH = ":\/hyperion.crt";$/;"	m	class:WebServer
WEBSERVER_DEFAULT_KEY_PATH	include/webserver/WebServer.h	/^	const QString        WEBSERVER_DEFAULT_KEY_PATH = ":\/hyperion.key";$/;"	m	class:WebServer
WEBSERVER_DEFAULT_PATH	include/webserver/WebServer.h	/^	const QString        WEBSERVER_DEFAULT_PATH	    = ":\/webconfig";$/;"	m	class:WebServer
WEBSERVER_DEFAULT_PORT	include/webserver/WebServer.h	/^	quint16              WEBSERVER_DEFAULT_PORT     = 8090;$/;"	m	class:WebServer
WEBSERVER_H	include/webserver/WebServer.h	2;"	d
WHITE	include/utils/ColorArgb.h	/^	static ColorArgb WHITE;$/;"	m	struct:ColorArgb
WHITE	include/utils/ColorBgr.h	/^	static ColorBgr WHITE;$/;"	m	struct:ColorBgr
WHITE	include/utils/ColorRgb.h	/^	static ColorRgb WHITE;$/;"	m	struct:ColorRgb
WHITE	include/utils/ColorRgba.h	/^	static ColorRgba WHITE;$/;"	m	struct:ColorRgba
WHITE	include/utils/ColorRgbw.h	/^	static ColorRgbw WHITE;$/;"	m	struct:ColorRgbw
WHITE	libsrc/utils/ColorArgb.cpp	/^ColorArgb ColorArgb::WHITE = { 255, 255, 255, 255 };$/;"	m	class:ColorArgb	file:
WHITE	libsrc/utils/ColorBgr.cpp	/^ColorBgr ColorBgr::WHITE = { 255, 255, 255 };$/;"	m	class:ColorBgr	file:
WHITE	libsrc/utils/ColorRgb.cpp	/^ColorRgb ColorRgb::WHITE = { 255, 255, 255 };$/;"	m	class:ColorRgb	file:
WHITE	libsrc/utils/ColorRgba.cpp	/^ColorRgba ColorRgba::WHITE = { 255, 255, 255, 255 };$/;"	m	class:ColorRgba	file:
WHITE	libsrc/utils/ColorRgbw.cpp	/^ColorRgbw ColorRgbw::WHITE = {   0,   0,   0, 255 };$/;"	m	class:ColorRgbw	file:
Warning	include/utils/Logger.h	21;"	d
WarningIf	include/utils/Logger.h	27;"	d
WebJsonRpc	libsrc/webserver/WebJsonRpc.cpp	/^WebJsonRpc::WebJsonRpc(QtHttpRequest* request, QtHttpServer* server, const bool& localConnection, QtHttpClientWrapper* parent)$/;"	f	class:WebJsonRpc
WebJsonRpc	libsrc/webserver/WebJsonRpc.h	/^class WebJsonRpc : public QObject {$/;"	c
WebServer	include/webserver/WebServer.h	/^class WebServer : public QObject {$/;"	c
WebServer	libsrc/webserver/WebServer.cpp	/^WebServer::WebServer(const QJsonDocument& config, const bool& useSsl, QObject * parent)$/;"	f	class:WebServer
WebSocketClient	libsrc/webserver/WebSocketClient.cpp	/^WebSocketClient::WebSocketClient(QtHttpRequest* request, QTcpSocket* sock, const bool& localConnection, QObject* parent)$/;"	f	class:WebSocketClient
WebSocketClient	libsrc/webserver/WebSocketClient.h	/^class WebSocketClient : public QObject {$/;"	c
WebSocketHeader	libsrc/webserver/WebSocketClient.h	/^	struct WebSocketHeader$/;"	s	class:WebSocketClient
WhiteAlgorithm	include/utils/RgbToRgbw.h	/^	enum class WhiteAlgorithm {$/;"	c	namespace:RGBW
X11Grabber	include/grabber/X11Grabber.h	/^class X11Grabber : public Grabber , public QAbstractNativeEventFilter$/;"	c
X11Grabber	libsrc/grabber/x11/X11Grabber.cpp	/^X11Grabber::X11Grabber(int cropLeft, int cropRight, int cropTop, int cropBottom, int pixelDecimation)$/;"	f	class:X11Grabber
X11Wrapper	include/grabber/X11Wrapper.h	/^class X11Wrapper: public GrabberWrapper$/;"	c
X11Wrapper	libsrc/grabber/x11/X11Wrapper.cpp	/^X11Wrapper::X11Wrapper(int cropLeft, int cropRight, int cropTop, int cropBottom, int pixelDecimation, const unsigned updateRate_Hz)$/;"	f	class:X11Wrapper
XYColor	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^struct XYColor$/;"	s
YELLOW	include/utils/ColorArgb.h	/^	static ColorArgb YELLOW;$/;"	m	struct:ColorArgb
YELLOW	include/utils/ColorBgr.h	/^	static ColorBgr YELLOW;$/;"	m	struct:ColorBgr
YELLOW	include/utils/ColorRgb.h	/^	static ColorRgb YELLOW;$/;"	m	struct:ColorRgb
YELLOW	include/utils/ColorRgba.h	/^	static ColorRgba YELLOW;$/;"	m	struct:ColorRgba
YELLOW	include/utils/ColorRgbw.h	/^	static ColorRgbw YELLOW;$/;"	m	struct:ColorRgbw
YELLOW	libsrc/utils/ColorArgb.cpp	/^ColorArgb ColorArgb::YELLOW= { 255, 255, 255,   0 };$/;"	m	class:ColorArgb	file:
YELLOW	libsrc/utils/ColorBgr.cpp	/^ColorBgr ColorBgr::YELLOW= {   0, 255, 255 };$/;"	m	class:ColorBgr	file:
YELLOW	libsrc/utils/ColorRgb.cpp	/^ColorRgb ColorRgb::YELLOW= { 255, 255,   0 };$/;"	m	class:ColorRgb	file:
YELLOW	libsrc/utils/ColorRgba.cpp	/^ColorRgba ColorRgba::YELLOW= { 255, 255,   0, 255 };$/;"	m	class:ColorRgba	file:
YELLOW	libsrc/utils/ColorRgbw.cpp	/^ColorRgbw ColorRgbw::YELLOW= { 255, 255,   0,   0 };$/;"	m	class:ColorRgbw	file:
YUYV	include/utils/PixelFormat.h	/^	YUYV,$/;"	m	class:PixelFormat
YeelightLight	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^YeelightLight::YeelightLight( Logger *log, const QString &hostname, quint16 port = API_DEFAULT_PORT)$/;"	f	class:YeelightLight
YeelightLight	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^class YeelightLight$/;"	c
YeelightResponse	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	explicit YeelightResponse() {}$/;"	f	class:YeelightResponse
YeelightResponse	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^class YeelightResponse$/;"	c
_A_M	libsrc/grabber/amlogic/Amvideocap.h	19;"	d
_BGEffectHandler	include/hyperion/Hyperion.h	/^	BGEffectHandler* _BGEffectHandler;$/;"	m	class:Hyperion
_NCA	include/ssdp/SSDPHandler.h	/^	QNetworkConfigurationManager* _NCA;$/;"	m	class:SSDPHandler
_ProductId	libsrc/leddevice/dev_hid/ProviderHID.h	/^	unsigned short _ProductId;$/;"	m	class:ProviderHID
_UAPI_LINUX_ION_H	libsrc/grabber/amlogic/ion.h	18;"	d
_VendorId	libsrc/leddevice/dev_hid/ProviderHID.h	/^	unsigned short _VendorId;$/;"	m	class:ProviderHID
_XRandRAvailable	include/grabber/X11Grabber.h	/^	bool _XShmAvailable, _XShmPixmapAvailable, _XRenderAvailable,  _XRandRAvailable;$/;"	m	class:X11Grabber
_XRandREventBase	include/grabber/X11Grabber.h	/^	int _XRandREventBase;$/;"	m	class:X11Grabber
_XRenderAvailable	include/grabber/X11Grabber.h	/^	bool _XShmAvailable, _XShmPixmapAvailable, _XRenderAvailable,  _XRandRAvailable;$/;"	m	class:X11Grabber
_XShmAvailable	include/grabber/X11Grabber.h	/^	bool _XShmAvailable, _XShmPixmapAvailable, _XRenderAvailable,  _XRandRAvailable;$/;"	m	class:X11Grabber
_XShmPixmapAvailable	include/grabber/X11Grabber.h	/^	bool _XShmAvailable, _XShmPixmapAvailable, _XRenderAvailable,  _XRandRAvailable;$/;"	m	class:X11Grabber
__LINUX_AMLOGIC_ION_H__	libsrc/grabber/amlogic/meson_ion.h	18;"	d
__bcm_frame_counter	libsrc/grabber/dispmanx/DispmanxFrameGrabberMock.cpp	/^unsigned  __bcm_frame_counter = 0;$/;"	v
__osx_frame_counter	libsrc/grabber/osx/OsxFrameGrabberMock.cpp	/^unsigned __osx_frame_counter = 0;$/;"	v
__screenHeight	libsrc/grabber/dispmanx/DispmanxFrameGrabberMock.cpp	/^const int __screenHeight = 600;$/;"	v
__screenHeight	libsrc/grabber/osx/OsxFrameGrabberMock.cpp	/^const int __screenHeight = 600;$/;"	v
__screenWidth	libsrc/grabber/dispmanx/DispmanxFrameGrabberMock.cpp	/^const int __screenWidth  = 800;$/;"	v
__screenWidth	libsrc/grabber/osx/OsxFrameGrabberMock.cpp	/^const int __screenWidth  = 800;$/;"	v
_acn_id	libsrc/leddevice/dev_net/LedDeviceUdpE131.h	/^	uint8_t _acn_id[12] = {0x41, 0x53, 0x43, 0x2d, 0x45, 0x31, 0x2e, 0x31, 0x37, 0x00, 0x00, 0x00 };$/;"	m	class:LedDeviceUdpE131
_activeDeviceType	include/leddevice/LedDevice.h	/^	QString _activeDeviceType;$/;"	m	class:LedDevice
_activeEffects	include/effectengine/EffectEngine.h	/^	std::list<Effect *> _activeEffects;$/;"	m	class:EffectEngine
_activeInputs	include/hyperion/PriorityMuxer.h	/^	QMap<int, InputInfo> _activeInputs;$/;"	m	class:PriorityMuxer
_activeRegisters	include/api/API.h	/^    std::map<int, registerData> _activeRegisters;$/;"	m	class:API
_address	libsrc/leddevice/dev_net/ProviderUdp.h	/^	QHostAddress _address;$/;"	m	class:ProviderUdp
_address	libsrc/leddevice/dev_net/ProviderUdpSSL.h	/^	QHostAddress _address;$/;"	m	class:ProviderUdpSSL
_addressNumber	libsrc/leddevice/dev_hid/LedDeviceLightpack.h	/^	int  _addressNumber;$/;"	m	class:LedDeviceLightpack
_adjust	include/utils/RgbChannelAdjustment.h	/^	uint8_t _adjust[3];$/;"	m	class:RgbChannelAdjustment
_adjustment	include/hyperion/MultiColorAdjustment.h	/^	std::vector<ColorAdjustment*> _adjustment;$/;"	m	class:MultiColorAdjustment
_adjustmentIds	include/hyperion/MultiColorAdjustment.h	/^	QStringList _adjustmentIds;$/;"	m	class:MultiColorAdjustment
_adminAuthorized	include/api/API.h	/^    bool _adminAuthorized;$/;"	m	class:API
_allLightsBlack	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	bool _allLightsBlack;$/;"	m	class:LedDevicePhilipsHue
_apiPort	libsrc/leddevice/dev_net/LedDeviceNanoleaf.h	/^	int  _apiPort;$/;"	m	class:LedDeviceNanoleaf
_apiPort	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	int _apiPort;$/;"	m	class:LedDevicePhilipsHueBridge
_apiPort	libsrc/leddevice/dev_net/LedDeviceWled.h	/^	int		_apiPort;$/;"	m	class:LedDeviceWled
_apiUrl	libsrc/leddevice/dev_net/ProviderRestApi.h	/^	QUrl _apiUrl;$/;"	m	class:ProviderRestApi
_api_major	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	uint _api_major;$/;"	m	class:LedDevicePhilipsHueBridge
_api_minor	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	uint _api_minor;$/;"	m	class:LedDevicePhilipsHueBridge
_api_patch	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	uint _api_patch;$/;"	m	class:LedDevicePhilipsHueBridge
_appname	include/utils/Logger.h	/^	QString  _appname;$/;"	m	class:Logger
_args	include/effectengine/Effect.h	/^	const QJsonObject _args;$/;"	m	class:Effect
_args	libsrc/webserver/CgiHandler.h	/^	QStringList         _args;$/;"	m	class:CgiHandler
_artnet_channelsPerFixture	libsrc/leddevice/dev_net/LedDeviceUdpArtNet.h	/^	int _artnet_channelsPerFixture = 3;$/;"	m	class:LedDeviceUdpArtNet
_artnet_seq	libsrc/leddevice/dev_net/LedDeviceUdpArtNet.h	/^	uint8_t _artnet_seq = 1;$/;"	m	class:LedDeviceUdpArtNet
_artnet_universe	libsrc/leddevice/dev_net/LedDeviceUdpArtNet.h	/^	int _artnet_universe = 1;$/;"	m	class:LedDeviceUdpArtNet
_authBlockTimer	include/hyperion/AuthManager.h	/^	QTimer *_authBlockTimer;$/;"	m	class:AuthManager
_authManager	include/api/API.h	/^    AuthManager *_authManager;$/;"	m	class:API
_authRequired	include/hyperion/AuthManager.h	/^	bool _authRequired;$/;"	m	class:AuthManager
_authTable	include/hyperion/AuthManager.h	/^	AuthTable *_authTable;$/;"	m	class:AuthManager
_authToken	libsrc/leddevice/dev_net/LedDeviceNanoleaf.h	/^	QString _authToken;$/;"	m	class:LedDeviceNanoleaf
_authorized	include/api/API.h	/^    bool _authorized;$/;"	m	class:API
_autoCorrected	include/utils/jsonschema/QJsonSchemaChecker.h	/^	QJsonObject _autoCorrected;$/;"	m	class:QJsonSchemaChecker
_availableActiveEffects	include/effectengine/EffectEngine.h	/^	std::list<ActiveEffectDefinition> _availableActiveEffects;$/;"	m	class:EffectEngine
_availableCommands	include/api/JsonCB.h	/^	QStringList _availableCommands;$/;"	m	class:JsonCB
_availableEffects	include/effectengine/EffectEngine.h	/^	std::list<EffectDefinition> _availableEffects;$/;"	m	class:EffectEngine
_availableEffects	include/effectengine/EffectFileHandler.h	/^	std::list<EffectDefinition> _availableEffects;$/;"	m	class:EffectFileHandler
_backLightEnabled	include/utils/RgbTransform.h	/^	bool      _backLightEnabled$/;"	m	class:RgbTransform
_backlightColored	include/utils/RgbTransform.h	/^		, _backlightColored;$/;"	m	class:RgbTransform
_backlightThreshold	include/utils/RgbTransform.h	/^	double    _backlightThreshold$/;"	m	class:RgbTransform
_basePath	libsrc/leddevice/dev_net/ProviderRestApi.h	/^	QString _basePath;$/;"	m	class:ProviderRestApi
_baseUrl	include/webserver/WebServer.h	/^	QString              _baseUrl;$/;"	m	class:WebServer
_baseUrl	libsrc/webserver/CgiHandler.h	/^	QString             _baseUrl;$/;"	m	class:CgiHandler
_baseUrl	libsrc/webserver/StaticFileServing.h	/^	QString         _baseUrl;$/;"	m	class:StaticFileServing
_baudRate_Hz	libsrc/leddevice/dev_serial/ProviderRs232.h	/^	qint32 _baudRate_Hz;$/;"	m	class:ProviderRs232
_baudRate_Hz	libsrc/leddevice/dev_spi/ProviderSpi.h	/^	int _baudRate_Hz;$/;"	m	class:ProviderSpi
_bitsPerChannel	libsrc/leddevice/dev_hid/LedDeviceLightpack.h	/^	int _bitsPerChannel;$/;"	m	class:LedDeviceLightpack
_blackLightsTimeout	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	int _blackLightsTimeout;$/;"	m	class:LedDevicePhilipsHue
_blackLightsTimer	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	QTimer* _blackLightsTimer;$/;"	m	class:LedDevicePhilipsHue
_blackborderThreshold	include/blackborder/BlackBorderDetector.h	/^		const uint8_t _blackborderThreshold;$/;"	m	class:hyperion::BlackBorderDetector
_blockId	include/utils/Profiler.h	/^	unsigned int    _blockId;$/;"	m	class:Profiler
_blockTimer	include/hyperion/PriorityMuxer.h	/^	QTimer* _blockTimer;$/;"	m	class:PriorityMuxer
_blockedForDelay	libsrc/leddevice/dev_hid/ProviderHID.h	/^	bool _blockedForDelay;$/;"	m	class:ProviderHID
_blueChannel	libsrc/leddevice/dev_tinker/LedDeviceTinkerforge.h	/^	std::vector<uint8_t> _blueChannel;$/;"	m	class:LedDeviceTinkerforge
_blurRemoveCnt	include/blackborder/BlackBorderProcessor.h	/^		unsigned _blurRemoveCnt;$/;"	m	class:hyperion::BlackBorderProcessor
_boblightServer	include/hyperion/Hyperion.h	/^	BoblightServer* _boblightServer;$/;"	m	class:Hyperion
_bonjour	include/api/JsonCB.h	/^	BonjourBrowserWrapper* _bonjour;$/;"	m	class:JsonCB
_bonjourCurrentServiceToResolve	include/bonjour/bonjourbrowserwrapper.h	/^	QString                _bonjourCurrentServiceToResolve;$/;"	m	class:BonjourBrowserWrapper
_bonjourResolver	include/bonjour/bonjourbrowserwrapper.h	/^	BonjourServiceResolver* _bonjourResolver;$/;"	m	class:BonjourBrowserWrapper
_borderProcessor	include/hyperion/ImageProcessor.h	/^	hyperion::BlackBorderProcessor * _borderProcessor;$/;"	m	class:ImageProcessor
_borderSwitchCnt	include/blackborder/BlackBorderProcessor.h	/^		unsigned _borderSwitchCnt;$/;"	m	class:hyperion::BlackBorderProcessor
_bright	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	int _bright;$/;"	m	class:YeelightLight
_brightness	include/utils/RgbChannelAdjustment.h	/^	uint8_t _brightness;$/;"	m	class:RgbChannelAdjustment
_brightness	include/utils/RgbTransform.h	/^	uint8_t   _brightness$/;"	m	class:RgbTransform
_brightnessCompensation	include/utils/RgbTransform.h	/^		, _brightnessCompensation$/;"	m	class:RgbTransform
_brightnessFactor	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	double _brightnessFactor;$/;"	m	class:LedDevicePhilipsHue
_brightnessFactor	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	double _brightnessFactor;$/;"	m	class:LedDeviceYeelight
_brightnessFactor	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	double _brightnessFactor;$/;"	m	class:YeelightLight
_brightnessMax	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	double _brightnessMax;$/;"	m	class:LedDevicePhilipsHue
_brightnessMax	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	int _brightnessMax;$/;"	m	class:LedDeviceYeelight
_brightnessMax	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	int _brightnessMax;$/;"	m	class:YeelightLight
_brightnessMin	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	double _brightnessMin;$/;"	m	class:LedDevicePhilipsHue
_brightnessMin	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	int _brightnessMin;$/;"	m	class:LedDeviceYeelight
_brightnessMin	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	int _brightnessMin;$/;"	m	class:YeelightLight
_brightnessThreshold	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	double _brightnessThreshold;$/;"	m	class:LedDevicePhilipsHue
_brightness_cmy	include/utils/RgbTransform.h	/^		, _brightness_cmy$/;"	m	class:RgbTransform
_brightness_rgb	include/utils/RgbTransform.h	/^		, _brightness_rgb$/;"	m	class:RgbTransform
_brightness_w	include/utils/RgbTransform.h	/^		, _brightness_w;$/;"	m	class:RgbTransform
_browsedServices	include/bonjour/bonjourbrowserwrapper.h	/^	QMap< QString, BonjourServiceBrowser* > _browsedServices;$/;"	m	class:BonjourBrowserWrapper
_buffers	include/grabber/V4L2Grabber.h	/^	std::vector<buffer>								_buffers;$/;"	m	class:V4L2Grabber
_builder	include/flatbufserver/FlatBufferConnection.h	/^	flatbuffers::FlatBufferBuilder _builder;$/;"	m	class:FlatBufferConnection
_builder	libsrc/flatbufserver/FlatBufferClient.h	/^	flatbuffers::FlatBufferBuilder _builder;$/;"	m	class:FlatBufferClient
_busNumber	libsrc/leddevice/dev_hid/LedDeviceLightpack.h	/^	int _busNumber;$/;"	m	class:LedDeviceLightpack
_bytesToRead	include/grabber/AmlogicGrabber.h	/^	ssize_t         _bytesToRead;$/;"	m	class:AmlogicGrabber
_cachedActiveEffects	include/effectengine/EffectEngine.h	/^	std::list<ActiveEffectDefinition> _cachedActiveEffects;$/;"	m	class:EffectEngine
_captureBuffer	include/grabber/DispmanxFrameGrabber.h	/^	ColorRgba* _captureBuffer;$/;"	m	class:DispmanxFrameGrabber
_captureBufferSize	include/grabber/DispmanxFrameGrabber.h	/^	unsigned _captureBufferSize;$/;"	m	class:DispmanxFrameGrabber
_captureCont	include/hyperion/Hyperion.h	/^	CaptureCont* _captureCont;$/;"	m	class:Hyperion
_captureDev	include/grabber/AmlogicGrabber.h	/^	int             _captureDev;$/;"	m	class:AmlogicGrabber
_cfgList	libsrc/hyperion/LinearColorSmoothing.h	/^	QVector<SMOOTHING_CFG> _cfgList;$/;"	m	class:LinearColorSmoothing
_cgi	libsrc/webserver/StaticFileServing.h	/^	CgiHandler      _cgi;$/;"	m	class:StaticFileServing
_changes	include/hyperion/Hyperion.h	/^	QMutex _changes;$/;"	m	class:Hyperion
_channel	libsrc/leddevice/dev_net/LedDeviceFadeCandy.h	/^	unsigned    _channel;$/;"	m	class:LedDeviceFadeCandy
_channel	libsrc/leddevice/dev_rpi_pwm/LedDeviceWS281x.h	/^	int         _channel;$/;"	m	class:LedDeviceWS281x
_channelName	include/utils/RgbChannelAdjustment.h	/^	QString _channelName;$/;"	m	class:RgbChannelAdjustment
_client	libsrc/leddevice/dev_net/LedDeviceFadeCandy.h	/^	QTcpSocket* _client;$/;"	m	class:LedDeviceFadeCandy
_clientAddress	libsrc/boblightserver/BoblightClientConnection.h	/^	QString _clientAddress;$/;"	m	class:BoblightClientConnection
_clientAddress	libsrc/flatbufserver/FlatBufferClient.h	/^	const QString _clientAddress;$/;"	m	class:FlatBufferClient
_clientAddress	libsrc/protoserver/ProtoClientConnection.h	/^	const QString _clientAddress;$/;"	m	class:ProtoClientConnection
_color	include/commandline/ColorOption.h	/^    QColor _color;$/;"	m	class:commandline::ColorOption
_color	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	CiColor _color;$/;"	m	class:PhilipsHueLight
_color	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	QColor _color;$/;"	m	class:YeelightLight
_colorBlack	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	CiColor _colorBlack;$/;"	m	class:PhilipsHueLight
_colorChannelSize	libsrc/leddevice/dev_tinker/LedDeviceTinkerforge.h	/^	unsigned int _colorChannelSize;$/;"	m	class:LedDeviceTinkerforge
_colorOrder	include/leddevice/LedDevice.h	/^	QString	_colorOrder;$/;"	m	class:LedDevice
_colorRgbValue	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	int _colorRgbValue;$/;"	m	class:YeelightLight
_colorSpace	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	CiColorTriangle _colorSpace;$/;"	m	class:PhilipsHueLight
_colors	include/commandline/ColorsOption.h	/^    QList<QColor> _colors;$/;"	m	class:commandline::ColorsOption
_colors	include/effectengine/Effect.h	/^	QVector<ColorRgb> _colors;$/;"	m	class:Effect
_colors	libsrc/leddevice/dev_net/LedDeviceUdpH801.h	/^	const int _colors = 5;$/;"	m	class:LedDeviceUdpH801
_colorsMap	include/hyperion/ImageToLedsMap.h	/^		std::vector<std::vector<unsigned>> _colorsMap;$/;"	m	class:hyperion::ImageToLedsMap
_componentRegister	include/api/JsonCB.h	/^	ComponentRegister* _componentRegister;$/;"	m	class:JsonCB
_componentRegister	include/hyperion/Hyperion.h	/^	ComponentRegister _componentRegister;$/;"	m	class:Hyperion
_componentStates	include/hyperion/ComponentRegister.h	/^	std::map<hyperion::Components, bool> _componentStates;$/;"	m	class:ComponentRegister
_config	include/flatbufserver/FlatBufferServer.h	/^	const QJsonDocument _config;$/;"	m	class:FlatBufferServer
_config	include/protoserver/ProtoServer.h	/^	const QJsonDocument _config;$/;"	m	class:ProtoServer
_config	include/webserver/WebServer.h	/^	QJsonDocument        _config;$/;"	m	class:WebServer
_consistentCnt	include/blackborder/BlackBorderProcessor.h	/^		unsigned _consistentCnt;$/;"	m	class:hyperion::BlackBorderProcessor
_continuousOutput	libsrc/hyperion/LinearColorSmoothing.h	/^	bool _continuousOutput;$/;"	m	class:LinearColorSmoothing
_correct	include/utils/jsonschema/QJsonSchemaChecker.h	/^	QString _correct;$/;"	m	class:QJsonSchemaChecker
_correlationID	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	int _correlationID;$/;"	m	class:YeelightLight
_cropBottom	include/hyperion/Grabber.h	/^	int _cropLeft, _cropRight, _cropTop, _cropBottom;$/;"	m	class:Grabber
_cropBottom	include/utils/ImageResampler.h	/^	int _cropBottom;$/;"	m	class:ImageResampler
_cropLeft	include/hyperion/Grabber.h	/^	int _cropLeft, _cropRight, _cropTop, _cropBottom;$/;"	m	class:Grabber
_cropLeft	include/utils/ImageResampler.h	/^	int _cropLeft;$/;"	m	class:ImageResampler
_cropRight	include/hyperion/Grabber.h	/^	int _cropLeft, _cropRight, _cropTop, _cropBottom;$/;"	m	class:Grabber
_cropRight	include/utils/ImageResampler.h	/^	int _cropRight;$/;"	m	class:ImageResampler
_cropTop	include/hyperion/Grabber.h	/^	int _cropLeft, _cropRight, _cropTop, _cropBottom;$/;"	m	class:Grabber
_cropTop	include/utils/ImageResampler.h	/^	int _cropTop;$/;"	m	class:ImageResampler
_ct	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	int _ct;$/;"	m	class:YeelightLight
_currInstanceIndex	include/api/API.h	/^    quint8 _currInstanceIndex;$/;"	m	class:API
_currVideoMode	include/hyperion/Hyperion.h	/^	VideoMode _currVideoMode = VideoMode::VIDEO_2D;$/;"	m	class:Hyperion
_currentBorder	include/blackborder/BlackBorderProcessor.h	/^		BlackBorder _currentBorder;$/;"	m	class:hyperion::BlackBorderProcessor
_currentConfigId	libsrc/hyperion/LinearColorSmoothing.h	/^	unsigned _currentConfigId;$/;"	m	class:LinearColorSmoothing
_currentLedValues	include/api/JsonAPI.h	/^	std::vector<ColorRgb> _currentLedValues;$/;"	m	class:JsonAPI
_currentPath	include/utils/jsonschema/QJsonSchemaChecker.h	/^	QStringList _currentPath;$/;"	m	class:QJsonSchemaChecker
_currentPriority	include/hyperion/PriorityMuxer.h	/^	int _currentPriority;$/;"	m	class:PriorityMuxer
_custom	libsrc/leddevice/dev_net/ProviderUdpSSL.h	/^	QString      _custom;$/;"	m	class:ProviderUdpSSL
_databasePool	libsrc/db/DBManager.cpp	/^static QThreadStorage<QSqlDatabase> _databasePool;$/;"	v	file:
_dbn	include/db/DBManager.h	/^	QString _dbn = "hyperion";$/;"	m	class:DBManager
_debugLevel	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	int _debugLevel;$/;"	m	class:YeelightLight
_debugLevel	libsrc/leddevice/dev_net/ProviderUdpSSL.h	/^	int          _debugLevel;$/;"	m	class:ProviderUdpSSL
_debugStreamer	libsrc/leddevice/dev_net/ProviderUdpSSL.h	/^	bool         _debugStreamer;$/;"	m	class:ProviderUdpSSL
_debuglevel	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	int _debuglevel;$/;"	m	class:LedDeviceYeelight
_decompress	include/grabber/V4L2Grabber.h	/^	jpeg_decompress_struct* _decompress;$/;"	m	class:V4L2Grabber
_decompress	include/grabber/V4L2Grabber.h	/^	tjhandle _decompress = nullptr;$/;"	m	class:V4L2Grabber
_defaultHost	libsrc/leddevice/dev_net/ProviderUdp.h	/^	QString      _defaultHost;$/;"	m	class:ProviderUdp
_defaultHost	libsrc/leddevice/dev_net/ProviderUdpSSL.h	/^	QString      _defaultHost;$/;"	m	class:ProviderUdpSSL
_delayAfterConnect_ms	libsrc/leddevice/dev_hid/ProviderHID.h	/^	int _delayAfterConnect_ms;$/;"	m	class:ProviderHID
_delayAfterConnect_ms	libsrc/leddevice/dev_serial/ProviderRs232.h	/^	int _delayAfterConnect_ms;$/;"	m	class:ProviderRs232
_descAddress	include/ssdp/SSDPServer.h	/^	QString _descAddress;$/;"	m	class:SSDPServer
_detectionMode	include/blackborder/BlackBorderProcessor.h	/^		QString _detectionMode;$/;"	m	class:hyperion::BlackBorderProcessor
_detector	include/blackborder/BlackBorderProcessor.h	/^		BlackBorderDetector* _detector;$/;"	m	class:hyperion::BlackBorderProcessor
_devConfig	include/leddevice/LedDevice.h	/^	QJsonObject _devConfig;$/;"	m	class:LedDevice
_device	libsrc/leddevice/dev_hid/LedDeviceHyperionUsbasp.h	/^	libusb_device * _device;$/;"	m	class:LedDeviceHyperionUsbasp
_device	libsrc/leddevice/dev_hid/LedDeviceLightpack.h	/^	libusb_device * _device;$/;"	m	class:LedDeviceLightpack
_deviceAPIVersion	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	QString _deviceAPIVersion;$/;"	m	class:LedDevicePhilipsHueBridge
_deviceAutoDiscoverEnabled	include/grabber/V4L2Grabber.h	/^	bool _deviceAutoDiscoverEnabled;$/;"	m	class:V4L2Grabber
_deviceFirmwareVersion	libsrc/leddevice/dev_net/LedDeviceNanoleaf.h	/^	QString _deviceFirmwareVersion;$/;"	m	class:LedDeviceNanoleaf
_deviceFirmwareVersion	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	QString _deviceFirmwareVersion;$/;"	m	class:LedDevicePhilipsHueBridge
_deviceHandle	libsrc/leddevice/dev_hid/LedDeviceHyperionUsbasp.h	/^	libusb_device_handle * _deviceHandle;$/;"	m	class:LedDeviceHyperionUsbasp
_deviceHandle	libsrc/leddevice/dev_hid/LedDeviceLightpack.h	/^	libusb_device_handle * _deviceHandle;$/;"	m	class:LedDeviceLightpack
_deviceHandle	libsrc/leddevice/dev_hid/ProviderHID.h	/^	hid_device * _deviceHandle;$/;"	m	class:ProviderHID
_deviceList	include/ssdp/SSDPHandler.h	/^	std::vector<QString> _deviceList;$/;"	m	class:SSDPHandler
_deviceModel	libsrc/leddevice/dev_net/LedDeviceNanoleaf.h	/^	QString _deviceModel;$/;"	m	class:LedDeviceNanoleaf
_deviceModel	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	QString _deviceModel;$/;"	m	class:LedDevicePhilipsHueBridge
_deviceName	include/grabber/V4L2Grabber.h	/^	QString _deviceName;$/;"	m	class:V4L2Grabber
_deviceName	libsrc/leddevice/dev_other/LedDevicePiBlaster.h	/^	QString _deviceName;$/;"	m	class:LedDevicePiBlaster
_deviceName	libsrc/leddevice/dev_serial/ProviderRs232.h	/^	QString _deviceName;$/;"	m	class:ProviderRs232
_deviceName	libsrc/leddevice/dev_spi/ProviderSpi.h	/^	QString _deviceName;$/;"	m	class:ProviderSpi
_deviceProperties	include/grabber/V4L2Grabber.h	/^	QMap<QString, V4L2Grabber::DeviceProperties>	_deviceProperties;$/;"	m	class:V4L2Grabber
_deviceSmooth	include/hyperion/Hyperion.h	/^	LinearColorSmoothing * _deviceSmooth;$/;"	m	class:Hyperion
_display	include/grabber/OsxFrameGrabber.h	/^	CGDirectDisplayID _display;$/;"	m	class:OsxFrameGrabber
_display	include/grabber/QtGrabber.h	/^	unsigned _display;$/;"	m	class:QtGrabber
_dmxChannelCount	libsrc/leddevice/dev_serial/LedDeviceDMX.h	/^	unsigned int _dmxChannelCount = 0;$/;"	m	class:LedDeviceDMX
_dmxDeviceType	libsrc/leddevice/dev_serial/LedDeviceDMX.h	/^	int _dmxDeviceType = 0;$/;"	m	class:LedDeviceDMX
_dmxLedCount	libsrc/leddevice/dev_serial/LedDeviceDMX.h	/^	int _dmxLedCount = 0;$/;"	m	class:LedDeviceDMX
_dmxSlotsPerLed	libsrc/leddevice/dev_serial/LedDeviceDMX.h	/^	int _dmxSlotsPerLed = 3;$/;"	m	class:LedDeviceDMX
_dmxStart	libsrc/leddevice/dev_serial/LedDeviceDMX.h	/^	int _dmxStart = 1;$/;"	m	class:LedDeviceDMX
_double	include/commandline/DoubleOption.h	/^	double _double;$/;"	m	class:commandline::DoubleOption
_dstFormat	include/grabber/X11Grabber.h	/^	XRenderPictFormat* _dstFormat;$/;"	m	class:X11Grabber
_dstPicture	include/grabber/X11Grabber.h	/^	Picture _dstPicture;$/;"	m	class:X11Grabber
_e131_cid	libsrc/leddevice/dev_net/LedDeviceUdpE131.h	/^	QUuid _e131_cid;$/;"	m	class:LedDeviceUdpE131
_e131_seq	libsrc/leddevice/dev_net/LedDeviceUdpE131.h	/^	uint8_t _e131_seq = 0;$/;"	m	class:LedDeviceUdpE131
_e131_source_name	libsrc/leddevice/dev_net/LedDeviceUdpE131.h	/^	QString _e131_source_name;$/;"	m	class:LedDeviceUdpE131
_e131_universe	libsrc/leddevice/dev_net/LedDeviceUdpE131.h	/^	uint8_t _e131_universe = 1;$/;"	m	class:LedDeviceUdpE131
_effectConfig	include/effectengine/EffectFileHandler.h	/^	QJsonObject _effectConfig;$/;"	m	class:EffectFileHandler
_effectEngine	include/hyperion/Hyperion.h	/^	EffectEngine * _effectEngine;$/;"	m	class:Hyperion
_effectFileHandler	include/effectengine/EffectEngine.h	/^	EffectFileHandler* _effectFileHandler;$/;"	m	class:EffectEngine
_effectSchemas	include/effectengine/EffectFileHandler.h	/^	std::list<EffectSchema> _effectSchemas;$/;"	m	class:EffectFileHandler
_enabled	include/blackborder/BlackBorderProcessor.h	/^		bool _enabled;$/;"	m	class:hyperion::BlackBorderProcessor
_enabled	include/hyperion/Grabber.h	/^	bool _enabled;$/;"	m	class:Grabber
_enabled	include/leddevice/LedDeviceWrapper.h	/^	bool _enabled;$/;"	m	class:LedDeviceWrapper
_enabled	libsrc/hyperion/LinearColorSmoothing.h	/^	bool   _enabled;$/;"	m	class:LinearColorSmoothing
_endOfPixels	include/utils/Image.h	/^		, _endOfPixels(NULL)$/;"	f	class:Image
_endOfPixels	include/utils/Image.h	/^	Pixel_T* _endOfPixels;$/;"	m	class:Image
_endPos	libsrc/leddevice/dev_net/LedDeviceNanoleaf.h	/^	uint _endPos;$/;"	m	class:LedDeviceNanoleaf
_endTime	include/effectengine/Effect.h	/^	int64_t _endTime;$/;"	m	class:Effect
_error	include/commandline/Option.h	/^	QString _error;$/;"	m	class:commandline::Option
_error	include/grabber/V4L2Grabber.h	/^	errorManager* _error;$/;"	m	class:V4L2Grabber
_error	include/utils/jsonschema/QJsonSchemaChecker.h	/^	bool _error;$/;"	m	class:QJsonSchemaChecker
_error	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	API_REPLY _error = API_OK;$/;"	m	class:YeelightResponse
_errorCode	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	int _errorCode = 0;$/;"	m	class:YeelightResponse
_errorReason	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	QString _errorReason;$/;"	m	class:YeelightResponse
_errorReason	libsrc/leddevice/dev_net/ProviderRestApi.h	/^	QString _errorReason;$/;"	m	class:httpResponse
_errorText	include/commandline/Parser.h	/^	QString _errorText;$/;"	m	class:commandline::Parser
_extControlVersion	libsrc/leddevice/dev_net/LedDeviceNanoleaf.h	/^	ushort _extControlVersion;$/;"	m	class:LedDeviceNanoleaf
_extraTimeDarkness	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	int _extraTimeDarkness;$/;"	m	class:LedDeviceYeelight
_extraTimeDarkness	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	int _extraTimeDarkness;$/;"	m	class:YeelightLight
_fbDevice	include/grabber/FramebufferFrameGrabber.h	/^	QString _fbDevice;$/;"	m	class:FramebufferFrameGrabber
_fbGrabber	include/grabber/AmlogicGrabber.h	/^	FramebufferFrameGrabber _fbGrabber;$/;"	m	class:AmlogicGrabber
_fbsPort	include/ssdp/SSDPServer.h	/^	QString _fbsPort;$/;"	m	class:SSDPServer
_fid	libsrc/leddevice/dev_other/LedDevicePiBlaster.h	/^	FILE * _fid;$/;"	m	class:LedDevicePiBlaster
_fid	libsrc/leddevice/dev_spi/ProviderSpi.h	/^	int _fid;$/;"	m	class:ProviderSpi
_file	include/utils/Profiler.h	/^	const char*     _file;$/;"	m	class:Profiler
_file	libsrc/leddevice/dev_other/LedDeviceFile.h	/^	QFile* _file;$/;"	m	class:LedDeviceFile
_fileDescriptor	include/grabber/V4L2Grabber.h	/^	int												_fileDescriptor;$/;"	m	class:V4L2Grabber
_fileName	libsrc/leddevice/dev_other/LedDeviceFile.h	/^	QString _fileName;$/;"	m	class:LedDeviceFile
_filter	include/ssdp/SSDPDiscover.h	/^	QString _filter;$/;"	m	class:SSDPDiscover
_filterHeader	include/ssdp/SSDPDiscover.h	/^	QString _filterHeader;$/;"	m	class:SSDPDiscover
_firmwareVersion	libsrc/leddevice/dev_hid/LedDeviceLightpack.h	/^	Version _firmwareVersion;$/;"	m	class:LedDeviceLightpack
_flatSlaves	include/hyperion/MessageForwarder.h	/^	QStringList _flatSlaves;$/;"	m	class:MessageForwarder
_forwardClients	include/hyperion/MessageForwarder.h	/^	QList<FlatBufferConnection*> _forwardClients;$/;"	m	class:MessageForwarder
_forwarder_enabled	include/hyperion/MessageForwarder.h	/^	bool _forwarder_enabled = true;$/;"	m	class:MessageForwarder
_fps	include/hyperion/Grabber.h	/^	int _fps;$/;"	m	class:Grabber
_fragment	libsrc/leddevice/dev_net/ProviderRestApi.h	/^	QString _fragment;$/;"	m	class:ProviderRestApi
_frameByteSize	include/grabber/V4L2Grabber.h	/^	int         _frameByteSize;$/;"	m	class:V4L2Grabber
_frameDropCounter	libsrc/leddevice/dev_serial/ProviderRs232.h	/^	int _frameDropCounter;$/;"	m	class:ProviderRs232
_func	include/utils/Profiler.h	/^	const char*     _func;$/;"	m	class:Profiler
_fw_ver	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	QString _fw_ver;$/;"	m	class:YeelightLight
_gamma	libsrc/leddevice/dev_net/LedDeviceFadeCandy.h	/^	double      _gamma;$/;"	m	class:LedDeviceFadeCandy
_gammaB	include/utils/RgbTransform.h	/^		, _gammaB;$/;"	m	class:RgbTransform
_gammaG	include/utils/RgbTransform.h	/^		, _gammaG$/;"	m	class:RgbTransform
_gammaR	include/utils/RgbTransform.h	/^	double    _gammaR$/;"	m	class:RgbTransform
_getDescription	libsrc/commandline/Parser.cpp	/^QString Parser::_getDescription(const QString description, const QString default_)$/;"	f	class:Parser
_getNames	libsrc/commandline/Parser.cpp	/^QStringList Parser::_getNames(const char shortOption, const QString longOption)$/;"	f	class:Parser
_ggrabber	include/hyperion/GrabberWrapper.h	/^	Grabber *_ggrabber;$/;"	m	class:GrabberWrapper
_gpio_to_color	libsrc/leddevice/dev_other/LedDevicePiBlaster.h	/^	char _gpio_to_color[64];$/;"	m	class:LedDevicePiBlaster
_gpio_to_led	libsrc/leddevice/dev_other/LedDevicePiBlaster.h	/^	int _gpio_to_led[64];$/;"	m	class:LedDevicePiBlaster
_grabber	include/grabber/AmlogicWrapper.h	/^	AmlogicGrabber  _grabber;$/;"	m	class:AmlogicWrapper
_grabber	include/grabber/DispmanxWrapper.h	/^	DispmanxFrameGrabber _grabber;$/;"	m	class:DispmanxWrapper
_grabber	include/grabber/FramebufferWrapper.h	/^	FramebufferFrameGrabber _grabber;$/;"	m	class:FramebufferWrapper
_grabber	include/grabber/OsxWrapper.h	/^	OsxFrameGrabber _grabber;$/;"	m	class:OsxWrapper
_grabber	include/grabber/QtWrapper.h	/^	QtGrabber _grabber;$/;"	m	class:QtWrapper
_grabber	include/grabber/V4L2Wrapper.h	/^	V4L2Grabber _grabber;$/;"	m	class:V4L2Wrapper
_grabber	include/grabber/X11Wrapper.h	/^	X11Grabber _grabber;$/;"	m	class:X11Wrapper
_grabberName	include/hyperion/GrabberWrapper.h	/^	QString _grabberName;$/;"	m	class:GrabberWrapper
_grabbingModeNotification	include/grabber/AmlogicGrabber.h	/^	int             _grabbingModeNotification;$/;"	m	class:AmlogicGrabber
_greenChannel	libsrc/leddevice/dev_tinker/LedDeviceTinkerforge.h	/^	std::vector<uint8_t> _greenChannel;$/;"	m	class:LedDeviceTinkerforge
_groupAddress	libsrc/leddevice/dev_net/LedDeviceAtmoOrb.h	/^	QHostAddress _groupAddress;$/;"	m	class:LedDeviceAtmoOrb
_groupId	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	quint16 _groupId;$/;"	m	class:LedDevicePhilipsHue
_groupName	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	QString _groupName;$/;"	m	class:LedDevicePhilipsHue
_groupsMap	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	QMap<quint16,QJsonObject> _groupsMap;$/;"	m	class:LedDevicePhilipsHueBridge
_handshake_attempts	libsrc/leddevice/dev_net/ProviderUdpSSL.h	/^	unsigned int _handshake_attempts;$/;"	m	class:ProviderUdpSSL
_handshake_timeout_max	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	int _handshake_timeout_max;$/;"	m	class:LedDevicePhilipsHue
_handshake_timeout_max	libsrc/leddevice/dev_net/ProviderUdpSSL.h	/^	uint32_t     _handshake_timeout_max;$/;"	m	class:ProviderUdpSSL
_handshake_timeout_min	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	int _handshake_timeout_min;$/;"	m	class:LedDevicePhilipsHue
_handshake_timeout_min	libsrc/leddevice/dev_net/ProviderUdpSSL.h	/^	uint32_t     _handshake_timeout_min;$/;"	m	class:ProviderUdpSSL
_hardDisabled	include/blackborder/BlackBorderProcessor.h	/^		bool _hardDisabled;$/;"	m	class:hyperion::BlackBorderProcessor
_hardMappingType	include/hyperion/ImageProcessor.h	/^	int _hardMappingType;$/;"	m	class:ImageProcessor
_hasError	libsrc/leddevice/dev_net/ProviderRestApi.h	/^	bool _hasError = false;$/;"	m	class:httpResponse
_headerSize	libsrc/leddevice/dev_serial/LedDeviceAdalight.h	/^	const short _headerSize;$/;"	m	class:LedDeviceAdalight
_height	include/hyperion/Grabber.h	/^	int _height;$/;"	m	class:Grabber
_height	include/hyperion/ImageToLedsMap.h	/^		const unsigned _height;$/;"	m	class:hyperion::ImageToLedsMap
_height	include/utils/Image.h	/^	unsigned _height;$/;"	m	class:Image
_horizontalBorder	include/hyperion/ImageToLedsMap.h	/^		const unsigned _horizontalBorder;$/;"	m	class:hyperion::ImageToLedsMap
_horizontalDecimation	include/utils/ImageResampler.h	/^	int _horizontalDecimation;$/;"	m	class:ImageResampler
_host	include/flatbufserver/FlatBufferConnection.h	/^	QString _host;$/;"	m	class:FlatBufferConnection
_host	libsrc/leddevice/dev_net/LedDeviceFadeCandy.h	/^	QString     _host;$/;"	m	class:LedDeviceFadeCandy
_host	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	QString _host;$/;"	m	class:YeelightLight
_host	libsrc/leddevice/dev_tinker/LedDeviceTinkerforge.h	/^	QString _host;$/;"	m	class:LedDeviceTinkerforge
_hostname	libsrc/leddevice/dev_net/LedDeviceNanoleaf.h	/^	QString _hostname;$/;"	m	class:LedDeviceNanoleaf
_hostname	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	QString _hostname;$/;"	m	class:LedDevicePhilipsHueBridge
_hostname	libsrc/leddevice/dev_net/LedDeviceWled.h	/^	QString _hostname;$/;"	m	class:LedDeviceWled
_hostname	libsrc/leddevice/dev_net/ProviderRestApi.h	/^	QString _hostname;$/;"	m	class:ProviderRestApi
_httpStatusCode	libsrc/leddevice/dev_net/ProviderRestApi.h	/^	int _httpStatusCode = 0;$/;"	m	class:httpResponse
_hueMutex	libsrc/leddevice/dev_net/ProviderUdpSSL.h	/^	QMutex       _hueMutex;$/;"	m	class:ProviderUdpSSL
_hwLedCount	include/hyperion/Hyperion.h	/^	unsigned _hwLedCount;$/;"	m	class:Hyperion
_hwLedCount	libsrc/leddevice/dev_hid/LedDeviceLightpack.h	/^	int _hwLedCount;$/;"	m	class:LedDeviceLightpack
_hyperion	include/api/API.h	/^    Hyperion *_hyperion;$/;"	m	class:API
_hyperion	include/api/JsonCB.h	/^	Hyperion* _hyperion;$/;"	m	class:JsonCB
_hyperion	include/blackborder/BlackBorderProcessor.h	/^		Hyperion* _hyperion;$/;"	m	class:hyperion::BlackBorderProcessor
_hyperion	include/boblightserver/BoblightServer.h	/^	Hyperion * _hyperion;$/;"	m	class:BoblightServer
_hyperion	include/effectengine/Effect.h	/^	Hyperion *_hyperion;$/;"	m	class:Effect
_hyperion	include/effectengine/EffectEngine.h	/^	Hyperion * _hyperion;$/;"	m	class:EffectEngine
_hyperion	include/hyperion/BGEffectHandler.h	/^	Hyperion* _hyperion;$/;"	m	class:BGEffectHandler
_hyperion	include/hyperion/CaptureCont.h	/^	Hyperion* _hyperion;$/;"	m	class:CaptureCont
_hyperion	include/hyperion/ComponentRegister.h	/^	Hyperion * _hyperion;$/;"	m	class:ComponentRegister
_hyperion	include/hyperion/ImageProcessor.h	/^	Hyperion* _hyperion;$/;"	m	class:ImageProcessor
_hyperion	include/hyperion/MessageForwarder.h	/^	Hyperion *_hyperion;$/;"	m	class:MessageForwarder
_hyperion	include/hyperion/SettingsManager.h	/^	Hyperion* _hyperion;$/;"	m	class:SettingsManager
_hyperion	include/leddevice/LedDeviceWrapper.h	/^	Hyperion* _hyperion;$/;"	m	class:LedDeviceWrapper
_hyperion	libsrc/boblightserver/BoblightClientConnection.h	/^	Hyperion * _hyperion;$/;"	m	class:BoblightClientConnection
_hyperion	libsrc/hyperion/LinearColorSmoothing.h	/^	Hyperion* _hyperion;$/;"	m	class:LinearColorSmoothing
_hyperion	libsrc/webserver/WebSocketClient.h	/^	Hyperion* _hyperion;$/;"	m	class:WebSocketClient
_hyperionSessions	include/bonjour/bonjourbrowserwrapper.h	/^	QMap<QString,BonjourRecord> _hyperionSessions;$/;"	m	class:BonjourBrowserWrapper
_hyperion_inst	include/db/SettingsTable.h	/^	const quint8 _hyperion_inst;$/;"	m	class:SettingsTable
_id	include/hyperion/ColorAdjustment.h	/^	QString _id;$/;"	m	class:ColorAdjustment
_id	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	unsigned int _id;$/;"	m	class:PhilipsHueLight
_id_size	libsrc/leddevice/dev_net/LedDeviceUdpH801.h	/^	const int _id_size = 3;$/;"	m	class:LedDeviceUdpH801
_ids	libsrc/leddevice/dev_net/LedDeviceUdpH801.h	/^	QList<int> _ids;$/;"	m	class:LedDeviceUdpH801
_ignoreRequired	include/utils/jsonschema/QJsonSchemaChecker.h	/^	bool _ignoreRequired;$/;"	m	class:QJsonSchemaChecker
_image	include/commandline/ImageOption.h	/^    QImage _image;$/;"	m	class:commandline::ImageOption
_image	include/effectengine/Effect.h	/^	QImage          _image;$/;"	m	class:Effect
_image	include/grabber/X11Grabber.h	/^	Image<ColorRgb> _image;$/;"	m	class:X11Grabber
_image	include/hyperion/GrabberWrapper.h	/^	Image<ColorRgb> _image;$/;"	m	class:GrabberWrapper
_imageData	include/effectengine/Effect.h	/^	const QString _imageData;$/;"	m	class:Effect
_imageProcessor	include/hyperion/Hyperion.h	/^	ImageProcessor* _imageProcessor;$/;"	m	class:Hyperion
_imageProcessor	libsrc/boblightserver/BoblightClientConnection.h	/^	ImageProcessor * _imageProcessor;$/;"	m	class:BoblightClientConnection
_imageResampler	include/hyperion/Grabber.h	/^	ImageResampler _imageResampler;$/;"	m	class:Grabber
_imageSize	include/effectengine/Effect.h	/^	QSize           _imageSize;$/;"	m	class:Effect
_imageStack	include/effectengine/Effect.h	/^	QVector<QImage> _imageStack;$/;"	m	class:Effect
_imageToLeds	include/hyperion/ImageProcessor.h	/^	hyperion::ImageToLedsMap* _imageToLeds;$/;"	m	class:ImageProcessor
_image_bgr	include/grabber/AmlogicGrabber.h	/^	Image<ColorBgr> _image_bgr;$/;"	m	class:AmlogicGrabber
_image_ptr	include/grabber/AmlogicGrabber.h	/^	void*           _image_ptr;$/;"	m	class:AmlogicGrabber
_image_rgba	include/grabber/DispmanxFrameGrabber.h	/^	Image<ColorRgba>  _image_rgba;$/;"	m	class:DispmanxFrameGrabber
_inProgress	include/hyperion/ComponentRegister.h	/^	bool _inProgress = false;$/;"	m	class:ComponentRegister
_inconsistentCnt	include/blackborder/BlackBorderProcessor.h	/^		unsigned _inconsistentCnt;$/;"	m	class:hyperion::BlackBorderProcessor
_init	include/grabber/X11Wrapper.h	/^	bool _init;$/;"	m	class:X11Wrapper
_inited	include/webserver/WebServer.h	/^	bool                 _inited = false;$/;"	m	class:WebServer
_initialized	include/grabber/V4L2Grabber.h	/^	bool _initialized;$/;"	m	class:V4L2Grabber
_initialized	include/utils/RgbChannelAdjustment.h	/^	bool _initialized[256];$/;"	m	class:RgbChannelAdjustment
_input	include/hyperion/Grabber.h	/^	int _input;$/;"	m	class:Grabber
_instIndex	include/hyperion/Hyperion.h	/^	const quint8 _instIndex;$/;"	m	class:Hyperion
_instance	include/utils/Logger.h	/^	static LoggerManager*          _instance;$/;"	m	class:LoggerManager
_instance	include/utils/SysInfo.h	/^	static SysInfo* _instance;$/;"	m	class:SysInfo
_instance	libsrc/utils/Logger.cpp	/^LoggerManager* LoggerManager::_instance = nullptr;$/;"	m	class:LoggerManager	file:
_instance	libsrc/utils/SysInfo.cpp	/^SysInfo* SysInfo::_instance = nullptr;$/;"	m	class:SysInfo	file:
_instanceManager	include/api/API.h	/^    HyperionIManager *_instanceManager;$/;"	m	class:API
_instanceTable	include/hyperion/HyperionIManager.h	/^	InstanceTable* _instanceTable;$/;"	m	class:HyperionIManager
_int	include/commandline/IntOption.h	/^    int _int;$/;"	m	class:commandline::IntOption
_internetAccessAllowed	include/utils/NetOrigin.h	/^	bool _internetAccessAllowed;$/;"	m	class:NetOrigin
_interupt	include/effectengine/Effect.h	/^	bool _interupt = false;$/;"	m	class:Effect
_interval	libsrc/leddevice/dev_tinker/LedDeviceTinkerforge.h	/^	unsigned _interval;$/;"	m	class:LedDeviceTinkerforge
_ioMethod	include/grabber/V4L2Grabber.h	/^	io_method										_ioMethod;$/;"	m	class:V4L2Grabber
_ipConnection	libsrc/leddevice/dev_tinker/LedDeviceTinkerforge.h	/^	IPConnection *_ipConnection;$/;"	m	class:LedDeviceTinkerforge
_ipWhitelist	include/utils/NetOrigin.h	/^	QList<QHostAddress> _ipWhitelist;$/;"	m	class:NetOrigin
_isAutoDeviceName	libsrc/leddevice/dev_serial/ProviderRs232.h	/^	bool _isAutoDeviceName;$/;"	m	class:ProviderRs232
_isBrightnessSwitchOffMinimum	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	bool _isBrightnessSwitchOffMinimum;$/;"	m	class:LedDeviceYeelight
_isBrightnessSwitchOffMinimum	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	bool _isBrightnessSwitchOffMinimum;$/;"	m	class:YeelightLight
_isDeviceInError	include/leddevice/LedDevice.h	/^	bool _isDeviceInError;$/;"	m	class:LedDevice
_isDeviceInitialised	include/leddevice/LedDevice.h	/^	bool _isDeviceInitialised;$/;"	m	class:LedDevice
_isDeviceReady	include/leddevice/LedDevice.h	/^	bool _isDeviceReady;$/;"	m	class:LedDevice
_isEnabled	include/leddevice/LedDevice.h	/^	bool _isEnabled;$/;"	m	class:LedDevice
_isHueEntertainmentReady	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	bool _isHueEntertainmentReady;$/;"	m	class:LedDevicePhilipsHueBridge
_isInError	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	bool _isInError;$/;"	m	class:YeelightLight
_isInMusicMode	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	bool _isInMusicMode;$/;"	m	class:YeelightLight
_isInSwitchOff	include/leddevice/LedDevice.h	/^	bool _isInSwitchOff;$/;"	m	class:LedDevice
_isInitLeds	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	bool _isInitLeds;$/;"	m	class:LedDevicePhilipsHue
_isOn	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	bool _isOn;$/;"	m	class:YeelightLight
_isOpen	libsrc/leddevice/dev_hid/LedDeviceLightpack.h	/^	bool _isOpen;$/;"	m	class:LedDeviceLightpack
_isRefreshEnabled	include/leddevice/LedDevice.h	/^	bool	_isRefreshEnabled;$/;"	m	class:LedDevice
_isRestoreOrigState	include/leddevice/LedDevice.h	/^	bool	_isRestoreOrigState;$/;"	m	class:LedDevice
_joinedMulticastgroup	libsrc/leddevice/dev_net/LedDeviceAtmoOrb.h	/^	bool _joinedMulticastgroup;$/;"	m	class:LedDeviceAtmoOrb
_jsonAPI	libsrc/jsonserver/JsonClientConnection.h	/^	JsonAPI * _jsonAPI;$/;"	m	class:JsonClientConnection
_jsonAPI	libsrc/webserver/WebJsonRpc.h	/^	JsonAPI* _jsonAPI;$/;"	m	class:WebJsonRpc
_jsonAPI	libsrc/webserver/WebSocketClient.h	/^	JsonAPI* _jsonAPI;$/;"	m	class:WebSocketClient
_jsonCB	include/api/JsonAPI.h	/^	JsonCB *_jsonCB;$/;"	m	class:JsonAPI
_jsonSlaves	include/hyperion/MessageForwarder.h	/^	QStringList   _jsonSlaves;$/;"	m	class:MessageForwarder
_jssPort	include/ssdp/SSDPServer.h	/^	QString _jssPort;$/;"	m	class:SSDPServer
_lastColorRgbValue	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	int _lastColorRgbValue;$/;"	m	class:YeelightLight
_lastError	include/grabber/AmlogicGrabber.h	/^	int             _lastError;$/;"	m	class:AmlogicGrabber
_lastLedValues	include/leddevice/LedDevice.h	/^	std::vector<ColorRgb> _lastLedValues;$/;"	m	class:LedDevice
_lastWriteTime	include/leddevice/LedDevice.h	/^	QDateTime _lastWriteTime;$/;"	m	class:LedDevice
_lastWriteTime	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	qint64	_lastWriteTime;$/;"	m	class:YeelightLight
_latchTime_ms	include/leddevice/LedDevice.h	/^	int _latchTime_ms;$/;"	m	class:LedDevice
_ledAdjustments	include/hyperion/MultiColorAdjustment.h	/^	std::vector<ColorAdjustment*> _ledAdjustments;$/;"	m	class:MultiColorAdjustment
_ledBuffer	include/hyperion/Hyperion.h	/^	std::vector<ColorRgb> _ledBuffer;$/;"	m	class:Hyperion
_ledBuffer	include/leddevice/LedDevice.h	/^	std::vector<uint8_t> _ledBuffer;$/;"	m	class:LedDevice
_ledColors	libsrc/boblightserver/BoblightClientConnection.h	/^	std::vector<ColorRgb> _ledColors;$/;"	m	class:BoblightClientConnection
_ledCount	include/leddevice/LedDevice.h	/^	unsigned int _ledCount;$/;"	m	class:LedDevice
_ledDevice	include/leddevice/LedDeviceWrapper.h	/^	LedDevice* _ledDevice;$/;"	m	class:LedDeviceWrapper
_ledDeviceMap	include/leddevice/LedDeviceWrapper.h	/^	static LedDeviceRegistry _ledDeviceMap;$/;"	m	class:LedDeviceWrapper
_ledDeviceMap	libsrc/leddevice/LedDeviceWrapper.cpp	/^LedDeviceRegistry LedDeviceWrapper::_ledDeviceMap = LedDeviceRegistry();$/;"	m	class:LedDeviceWrapper	file:
_ledDeviceWrapper	include/hyperion/Hyperion.h	/^	LedDeviceWrapper* _ledDeviceWrapper;$/;"	m	class:Hyperion
_ledGridSize	include/hyperion/Hyperion.h	/^	QSize _ledGridSize;$/;"	m	class:Hyperion
_ledOnOff	libsrc/leddevice/dev_net/LedDeviceFadeCandy.h	/^	bool        _ledOnOff;$/;"	m	class:LedDeviceFadeCandy
_ledRGBCount	include/leddevice/LedDevice.h	/^	unsigned int _ledRGBCount;$/;"	m	class:LedDevice
_ledRGBWCount	include/leddevice/LedDevice.h	/^	unsigned int _ledRGBWCount;$/;"	m	class:LedDevice
_ledStreamConnection	include/api/JsonAPI.h	/^	QMetaObject::Connection _ledStreamConnection;$/;"	m	class:JsonAPI
_ledStreamTimer	include/api/JsonAPI.h	/^	QTimer *_ledStreamTimer;$/;"	m	class:JsonAPI
_ledString	include/hyperion/Hyperion.h	/^	LedString _ledString;$/;"	m	class:Hyperion
_ledString	include/hyperion/ImageProcessor.h	/^	LedString _ledString;$/;"	m	class:ImageProcessor
_ledStringColorOrder	include/hyperion/Hyperion.h	/^	std::vector<ColorOrder> _ledStringColorOrder;$/;"	m	class:Hyperion
_ledStrip	libsrc/leddevice/dev_tinker/LedDeviceTinkerforge.h	/^	LEDStrip *_ledStrip;$/;"	m	class:LedDeviceTinkerforge
_led_string	libsrc/leddevice/dev_rpi_pwm/LedDeviceWS281x.h	/^	ws2811_t    _led_string;$/;"	m	class:LedDeviceWS281x
_ledidx	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	unsigned int _ledidx;$/;"	m	class:PhilipsHueLight
_leftRight	libsrc/leddevice/dev_net/LedDeviceNanoleaf.h	/^	bool _leftRight;$/;"	m	class:LedDeviceNanoleaf
_libusbContext	libsrc/leddevice/dev_hid/LedDeviceHyperionUsbasp.h	/^	libusb_context * _libusbContext;$/;"	m	class:LedDeviceHyperionUsbasp
_libusbContext	libsrc/leddevice/dev_hid/LedDeviceLightpack.h	/^	libusb_context * _libusbContext;$/;"	m	class:LedDeviceLightpack
_lightIds	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	std::vector<quint16> _lightIds;$/;"	m	class:LedDevicePhilipsHue
_lightStatesRestored	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	bool _lightStatesRestored;$/;"	m	class:LedDevicePhilipsHue
_lightname	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	QString _lightname;$/;"	m	class:PhilipsHueLight
_lightpacks	libsrc/leddevice/dev_hid/LedDeviceMultiLightpack.h	/^	std::vector<LedDeviceLightpack *> _lightpacks;$/;"	m	class:LedDeviceMultiLightpack
_lights	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	std::vector<PhilipsHueLight> _lights;$/;"	m	class:LedDevicePhilipsHue
_lights	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	std::vector<YeelightLight> _lights;$/;"	m	class:LedDeviceYeelight
_lightsAddressList	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	QVector<yeelightAddress> _lightsAddressList;$/;"	m	class:LedDeviceYeelight
_lightsCount	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	unsigned int _lightsCount;$/;"	m	class:LedDevicePhilipsHue
_lightsCount	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	unsigned int _lightsCount;$/;"	m	class:LedDeviceYeelight
_lightsMap	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	QMap<quint16,QJsonObject> _lightsMap;$/;"	m	class:LedDevicePhilipsHueBridge
_ligthBerryAPA102Mode	libsrc/leddevice/dev_serial/LedDeviceAdalight.h	/^	bool        _ligthBerryAPA102Mode;$/;"	m	class:LedDeviceAdalight
_line	include/utils/Profiler.h	/^	unsigned int    _line;$/;"	m	class:Profiler
_lineLength	include/grabber/V4L2Grabber.h	/^	int         _lineLength;$/;"	m	class:V4L2Grabber
_localAddress	include/ssdp/SSDPHandler.h	/^	QString    _localAddress;$/;"	m	class:SSDPHandler
_localAdminAuthRequired	include/hyperion/AuthManager.h	/^	bool _localAdminAuthRequired;$/;"	m	class:AuthManager
_localAuthRequired	include/hyperion/AuthManager.h	/^	bool _localAuthRequired;$/;"	m	class:AuthManager
_localConnection	include/api/API.h	/^    bool _localConnection;$/;"	m	class:API
_locale	libsrc/boblightserver/BoblightClientConnection.h	/^	QLocale _locale;$/;"	m	class:BoblightClientConnection
_log	include/api/API.h	/^    Logger *_log;$/;"	m	class:API
_log	include/boblightserver/BoblightServer.h	/^	Logger * _log;$/;"	m	class:BoblightServer
_log	include/db/DBManager.h	/^	Logger* _log;$/;"	m	class:DBManager
_log	include/effectengine/Effect.h	/^	Logger *_log;$/;"	m	class:Effect
_log	include/effectengine/EffectEngine.h	/^	Logger * _log;$/;"	m	class:EffectEngine
_log	include/effectengine/EffectFileHandler.h	/^	Logger* _log;$/;"	m	class:EffectFileHandler
_log	include/flatbufserver/FlatBufferConnection.h	/^	Logger * _log;$/;"	m	class:FlatBufferConnection
_log	include/flatbufserver/FlatBufferServer.h	/^	Logger* _log;$/;"	m	class:FlatBufferServer
_log	include/hyperion/ComponentRegister.h	/^	Logger * _log;$/;"	m	class:ComponentRegister
_log	include/hyperion/Grabber.h	/^	Logger * _log;$/;"	m	class:Grabber
_log	include/hyperion/GrabberWrapper.h	/^	Logger * _log;$/;"	m	class:GrabberWrapper
_log	include/hyperion/Hyperion.h	/^	Logger * _log;$/;"	m	class:Hyperion
_log	include/hyperion/HyperionIManager.h	/^	Logger* _log;$/;"	m	class:HyperionIManager
_log	include/hyperion/ImageProcessor.h	/^	Logger * _log;$/;"	m	class:ImageProcessor
_log	include/hyperion/MessageForwarder.h	/^	Logger   *_log;$/;"	m	class:MessageForwarder
_log	include/hyperion/MultiColorAdjustment.h	/^	Logger * _log;$/;"	m	class:MultiColorAdjustment
_log	include/hyperion/PriorityMuxer.h	/^	Logger* _log;$/;"	m	class:PriorityMuxer
_log	include/hyperion/SettingsManager.h	/^	Logger* _log;$/;"	m	class:SettingsManager
_log	include/jsonserver/JsonServer.h	/^	Logger * _log;$/;"	m	class:JsonServer
_log	include/leddevice/LedDevice.h	/^	Logger * _log;$/;"	m	class:LedDevice
_log	include/protoserver/ProtoServer.h	/^	Logger* _log;$/;"	m	class:ProtoServer
_log	include/ssdp/SSDPDiscover.h	/^	Logger* _log;$/;"	m	class:SSDPDiscover
_log	include/ssdp/SSDPServer.h	/^	Logger* _log;$/;"	m	class:SSDPServer
_log	include/utils/NetOrigin.h	/^	Logger* _log;$/;"	m	class:NetOrigin
_log	include/utils/RgbChannelAdjustment.h	/^	Logger * _log;$/;"	m	class:RgbChannelAdjustment
_log	include/webserver/WebServer.h	/^	Logger*              _log;$/;"	m	class:WebServer
_log	libsrc/boblightserver/BoblightClientConnection.h	/^	Logger * _log;$/;"	m	class:BoblightClientConnection
_log	libsrc/flatbufserver/FlatBufferClient.h	/^	Logger *_log;$/;"	m	class:FlatBufferClient
_log	libsrc/hyperion/LinearColorSmoothing.h	/^	Logger* _log;$/;"	m	class:LinearColorSmoothing
_log	libsrc/jsonserver/JsonClientConnection.h	/^	Logger * _log;$/;"	m	class:JsonClientConnection
_log	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	Logger* _log;$/;"	m	class:PhilipsHueLight
_log	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	Logger* _log;$/;"	m	class:YeelightLight
_log	libsrc/leddevice/dev_net/ProviderRestApi.h	/^	Logger* _log;$/;"	m	class:ProviderRestApi
_log	libsrc/protoserver/ProtoClientConnection.h	/^	Logger*_log;$/;"	m	class:ProtoClientConnection
_log	libsrc/webserver/CgiHandler.h	/^	Logger *            _log;$/;"	m	class:CgiHandler
_log	libsrc/webserver/StaticFileServing.h	/^	Logger        * _log;$/;"	m	class:StaticFileServing
_log	libsrc/webserver/WebJsonRpc.h	/^	Logger* _log;$/;"	m	class:WebJsonRpc
_log	libsrc/webserver/WebSocketClient.h	/^	Logger* _log;$/;"	m	class:WebSocketClient
_logMessageBuffer	include/utils/Logger.h	/^	QVector<Logger::T_LOG_MESSAGE> _logMessageBuffer;$/;"	m	class:LoggerManager
_logger	include/utils/Profiler.h	/^	static Logger*  _logger;$/;"	m	class:Profiler
_logger	libsrc/utils/Profiler.cpp	/^Logger* Profiler::_logger = nullptr;$/;"	m	class:Profiler	file:
_loggerId	include/utils/Logger.h	/^	unsigned _loggerId;$/;"	m	class:Logger
_loggerMaxMsgBufferSize	include/utils/Logger.h	/^	const int                      _loggerMaxMsgBufferSize;$/;"	m	class:LoggerManager
_lowestPriorityInfo	include/hyperion/PriorityMuxer.h	/^	InputInfo _lowestPriorityInfo;$/;"	m	class:PriorityMuxer
_manualLED	libsrc/leddevice/dev_net/LedDeviceFadeCandy.h	/^	bool        _manualLED;$/;"	m	class:LedDeviceFadeCandy
_manualSelectedPriority	include/hyperion/PriorityMuxer.h	/^	int _manualSelectedPriority;$/;"	m	class:PriorityMuxer
_mapping	include/utils/RgbChannelAdjustment.h	/^	uint8_t _mapping[3][256];$/;"	m	class:RgbChannelAdjustment
_mappingB	include/utils/RgbTransform.h	/^		, _mappingB[256];$/;"	m	class:RgbTransform
_mappingG	include/utils/RgbTransform.h	/^		, _mappingG[256]$/;"	m	class:RgbTransform
_mappingR	include/utils/RgbTransform.h	/^	uint8_t   _mappingR[256]$/;"	m	class:RgbTransform
_mappingType	include/hyperion/ImageProcessor.h	/^	int _mappingType;$/;"	m	class:ImageProcessor
_maskKey	libsrc/webserver/WebSocketClient.h	/^	quint8 _maskKey[4];$/;"	m	class:WebSocketClient
_maxInconsistentCnt	include/blackborder/BlackBorderProcessor.h	/^		unsigned _maxInconsistentCnt;$/;"	m	class:hyperion::BlackBorderProcessor
_maxRepeatCountSize	libsrc/utils/Logger.cpp	/^const int _maxRepeatCountSize = 200;$/;"	v
_message	libsrc/leddevice/dev_net/LedDeviceUdpH801.h	/^	QByteArray _message;$/;"	m	class:LedDeviceUdpH801
_messageForwarder	include/hyperion/Hyperion.h	/^	MessageForwarder * _messageForwarder;$/;"	m	class:Hyperion
_messages	include/utils/jsonschema/QJsonSchemaChecker.h	/^	QStringList _messages;$/;"	m	class:QJsonSchemaChecker
_metaTable	include/hyperion/AuthManager.h	/^	MetaTable *_metaTable;$/;"	m	class:AuthManager
_mimeDb	libsrc/webserver/StaticFileServing.h	/^	QMimeDatabase * _mimeDb;$/;"	m	class:StaticFileServing
_minLevel	include/utils/Logger.h	/^	LogLevel _minLevel;$/;"	m	class:Logger
_model	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	QString _model;$/;"	m	class:YeelightLight
_modelId	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	QString _modelId;$/;"	m	class:PhilipsHueLight
_multiCastGroupPort	libsrc/leddevice/dev_net/LedDeviceAtmoOrb.h	/^	quint16 _multiCastGroupPort;$/;"	m	class:LedDeviceAtmoOrb
_multicastGroup	libsrc/leddevice/dev_net/LedDeviceAtmoOrb.h	/^	QString _multicastGroup;$/;"	m	class:LedDeviceAtmoOrb
_musicModeServerAddress	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	QHostAddress _musicModeServerAddress;$/;"	m	class:LedDeviceYeelight
_musicModeServerPort	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	int _musicModeServerPort;$/;"	m	class:LedDeviceYeelight
_muxer	include/hyperion/Hyperion.h	/^	PriorityMuxer _muxer;$/;"	m	class:Hyperion
_muxer	include/hyperion/MessageForwarder.h	/^	PriorityMuxer *_muxer;$/;"	m	class:MessageForwarder
_name	include/effectengine/Effect.h	/^	const QString _name;$/;"	m	class:Effect
_name	include/ssdp/SSDPServer.h	/^	QString _name;$/;"	m	class:SSDPServer
_name	include/utils/Logger.h	/^	QString  _name;$/;"	m	class:Logger
_name	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	QString _name;$/;"	m	class:YeelightLight
_netOrigin	include/flatbufserver/FlatBufferServer.h	/^	NetOrigin* _netOrigin;$/;"	m	class:FlatBufferServer
_netOrigin	include/jsonserver/JsonServer.h	/^	NetOrigin* _netOrigin;$/;"	m	class:JsonServer
_netOrigin	include/protoserver/ProtoServer.h	/^	NetOrigin* _netOrigin;$/;"	m	class:ProtoServer
_networkManager	libsrc/leddevice/dev_net/ProviderRestApi.h	/^	QNetworkAccessManager* _networkManager;$/;"	m	class:ProviderRestApi
_networkReplyError	libsrc/leddevice/dev_net/ProviderRestApi.h	/^	QNetworkReply::NetworkError _networkReplyError = QNetworkReply::NoError;$/;"	m	class:httpResponse
_noDither	libsrc/leddevice/dev_net/LedDeviceFadeCandy.h	/^	bool        _noDither;$/;"	m	class:LedDeviceFadeCandy
_noInterp	libsrc/leddevice/dev_net/LedDeviceFadeCandy.h	/^	bool        _noInterp;$/;"	m	class:LedDeviceFadeCandy
_noListener	include/api/JsonAPI.h	/^	bool _noListener;$/;"	m	class:JsonAPI
_noSignalCounter	include/grabber/V4L2Grabber.h	/^	int      _noSignalCounter;$/;"	m	class:V4L2Grabber
_noSignalCounterThreshold	include/grabber/V4L2Grabber.h	/^	int      _noSignalCounterThreshold;$/;"	m	class:V4L2Grabber
_noSignalDetected	include/grabber/V4L2Grabber.h	/^	bool     _noSignalDetected;$/;"	m	class:V4L2Grabber
_noSignalThresholdColor	include/grabber/V4L2Grabber.h	/^	ColorRgb _noSignalThresholdColor;$/;"	m	class:V4L2Grabber
_notEnoughData	libsrc/webserver/WebSocketClient.h	/^	bool _notEnoughData = false;$/;"	m	class:WebSocketClient
_numLeds	libsrc/leddevice/dev_net/LedDeviceAtmoOrb.h	/^	int _numLeds;$/;"	m	class:LedDeviceAtmoOrb
_oldThreshold	include/blackborder/BlackBorderProcessor.h	/^		double _oldThreshold;$/;"	m	class:hyperion::BlackBorderProcessor
_on	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	bool _on;$/;"	m	class:PhilipsHueLight
_onContinuation	libsrc/webserver/WebSocketClient.h	/^	bool _onContinuation = false;$/;"	m	class:WebSocketClient
_opc_data	libsrc/leddevice/dev_net/LedDeviceFadeCandy.h	/^	QByteArray  _opc_data;$/;"	m	class:LedDeviceFadeCandy
_openConnections	include/boblightserver/BoblightServer.h	/^	QSet<BoblightClientConnection *> _openConnections;$/;"	m	class:BoblightServer
_openConnections	include/flatbufserver/FlatBufferServer.h	/^	QVector<FlatBufferClient*> _openConnections;$/;"	m	class:FlatBufferServer
_openConnections	include/jsonserver/JsonServer.h	/^	QSet<JsonClientConnection *> _openConnections;$/;"	m	class:JsonServer
_openConnections	include/protoserver/ProtoServer.h	/^	QVector<ProtoClientConnection*> _openConnections;$/;"	m	class:ProtoServer
_options	include/commandline/Parser.h	/^	QHash<QString, Option *> _options;$/;"	m	class:commandline::Parser
_orbIds	libsrc/leddevice/dev_net/LedDeviceAtmoOrb.h	/^	QVector<int> _orbIds;$/;"	m	class:LedDeviceAtmoOrb
_origin	include/flatbufserver/FlatBufferConnection.h	/^	QString _origin;$/;"	m	class:FlatBufferConnection
_originalColor	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	CiColor _originalColor;$/;"	m	class:PhilipsHueLight
_originalState	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	QString _originalState;$/;"	m	class:PhilipsHueLight
_originalStateJSON	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	QJsonObject _originalStateJSON;$/;"	m	class:PhilipsHueLight
_originalStateProperties	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	QJsonObject _originalStateProperties;$/;"	m	class:YeelightLight
_orignalStateValues	include/leddevice/LedDevice.h	/^	QJsonObject _orignalStateValues;$/;"	m	class:LedDevice
_outputColorModel	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	int _outputColorModel;$/;"	m	class:LedDeviceYeelight
_outputDelay	libsrc/hyperion/LinearColorSmoothing.h	/^	unsigned _outputDelay;$/;"	m	class:LinearColorSmoothing
_outputQueue	libsrc/hyperion/LinearColorSmoothing.h	/^	std::list<std::vector<ColorRgb> > _outputQueue;$/;"	m	class:LinearColorSmoothing
_painter	include/effectengine/Effect.h	/^	QPainter       *_painter;$/;"	m	class:Effect
_panelIds	libsrc/leddevice/dev_net/LedDeviceNanoleaf.h	/^	QVector<uint> _panelIds;$/;"	m	class:LedDeviceNanoleaf
_panelLedCount	libsrc/leddevice/dev_net/LedDeviceNanoleaf.h	/^	uint _panelLedCount;$/;"	m	class:LedDeviceNanoleaf
_parser	include/commandline/Parser.h	/^	QCommandLineParser _parser;$/;"	m	class:commandline::Parser
_path	libsrc/leddevice/dev_net/ProviderRestApi.h	/^	QString _path;$/;"	m	class:ProviderRestApi
_pause	libsrc/hyperion/LinearColorSmoothing.h	/^	bool _pause;$/;"	m	class:LinearColorSmoothing
_peerAddress	include/api/JsonAPI.h	/^	QString _peerAddress;$/;"	m	class:JsonAPI
_pendingRequests	include/hyperion/AuthManager.h	/^	QMap<QString, AuthDefinition> _pendingRequests;$/;"	m	class:AuthManager
_pictAttr	include/grabber/X11Grabber.h	/^	XRenderPictureAttributes _pictAttr;$/;"	m	class:X11Grabber
_pixelDecimation	include/grabber/QtGrabber.h	/^	int _pixelDecimation;$/;"	m	class:QtGrabber
_pixelDecimation	include/grabber/V4L2Grabber.h	/^	int         _pixelDecimation;$/;"	m	class:V4L2Grabber
_pixelDecimation	include/grabber/X11Grabber.h	/^	int _pixelDecimation;$/;"	m	class:X11Grabber
_pixelFormat	include/grabber/V4L2Grabber.h	/^	PixelFormat _pixelFormat;$/;"	m	class:V4L2Grabber
_pixels	include/utils/Image.h	/^	Pixel_T* _pixels;$/;"	m	class:Image
_pixmap	include/grabber/X11Grabber.h	/^	Pixmap _pixmap;$/;"	m	class:X11Grabber
_port	include/boblightserver/BoblightServer.h	/^	uint16_t  _port;$/;"	m	class:BoblightServer
_port	include/bonjour/bonjourserviceregister.h	/^	quint16 _port = 0;$/;"	m	class:BonjourServiceRegister
_port	include/flatbufserver/FlatBufferConnection.h	/^	uint16_t _port;$/;"	m	class:FlatBufferConnection
_port	include/flatbufserver/FlatBufferServer.h	/^	quint16 _port;$/;"	m	class:FlatBufferServer
_port	include/jsonserver/JsonServer.h	/^	uint16_t _port = 0;$/;"	m	class:JsonServer
_port	include/protoserver/ProtoServer.h	/^	quint16 _port;$/;"	m	class:ProtoServer
_port	include/webserver/WebServer.h	/^	quint16              _port;$/;"	m	class:WebServer
_port	libsrc/leddevice/dev_net/LedDeviceFadeCandy.h	/^	uint16_t    _port;$/;"	m	class:LedDeviceFadeCandy
_port	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	quint16 _port;$/;"	m	class:YeelightLight
_port	libsrc/leddevice/dev_net/ProviderRestApi.h	/^	int _port;$/;"	m	class:ProviderRestApi
_port	libsrc/leddevice/dev_net/ProviderUdp.h	/^	ushort       _port;$/;"	m	class:ProviderUdp
_port	libsrc/leddevice/dev_net/ProviderUdpSSL.h	/^	int          _port;$/;"	m	class:ProviderUdpSSL
_port	libsrc/leddevice/dev_tinker/LedDeviceTinkerforge.h	/^	uint16_t _port;$/;"	m	class:LedDeviceTinkerforge
_power	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	QString _power;$/;"	m	class:YeelightLight
_prefix_size	libsrc/leddevice/dev_net/LedDeviceUdpH801.h	/^	const int _prefix_size = 2;$/;"	m	class:LedDeviceUdpH801
_prevComponentStates	include/hyperion/ComponentRegister.h	/^	std::map<hyperion::Components, bool> _prevComponentStates;$/;"	m	class:ComponentRegister
_prevSocketState	include/flatbufserver/FlatBufferConnection.h	/^	QAbstractSocket::SocketState  _prevSocketState;$/;"	m	class:FlatBufferConnection
_prevVisComp	include/hyperion/PriorityMuxer.h	/^	hyperion::Components _prevVisComp = hyperion::COMP_INVALID;$/;"	m	class:PriorityMuxer
_previousDetectedBorder	include/blackborder/BlackBorderProcessor.h	/^		BlackBorder _previousDetectedBorder;$/;"	m	class:hyperion::BlackBorderProcessor
_previousTime	libsrc/hyperion/LinearColorSmoothing.h	/^	int64_t _previousTime;$/;"	m	class:LinearColorSmoothing
_previousValues	libsrc/hyperion/LinearColorSmoothing.h	/^	std::vector<ColorRgb> _previousValues;$/;"	m	class:LinearColorSmoothing
_printTimeStamp	libsrc/leddevice/dev_other/LedDeviceFile.h	/^	bool _printTimeStamp;$/;"	m	class:LedDeviceFile
_prioMuxer	include/api/JsonCB.h	/^	PriorityMuxer* _prioMuxer;$/;"	m	class:JsonCB
_priority	include/boblightserver/BoblightServer.h	/^	int _priority;$/;"	m	class:BoblightServer
_priority	include/effectengine/Effect.h	/^	const int _priority;$/;"	m	class:Effect
_priority	include/flatbufserver/FlatBufferConnection.h	/^	int _priority;$/;"	m	class:FlatBufferConnection
_priority	include/hyperion/MessageForwarder.h	/^	const int _priority;$/;"	m	class:MessageForwarder
_priority	libsrc/boblightserver/BoblightClientConnection.h	/^	int _priority;$/;"	m	class:BoblightClientConnection
_priority	libsrc/flatbufserver/FlatBufferClient.h	/^	int _priority;$/;"	m	class:FlatBufferClient
_priority	libsrc/protoserver/ProtoClientConnection.h	/^	int _priority;$/;"	m	class:ProtoClientConnection
_psk	libsrc/leddevice/dev_net/ProviderUdpSSL.h	/^	QString      _psk;$/;"	m	class:ProviderUdpSSL
_psk_identity	libsrc/leddevice/dev_net/ProviderUdpSSL.h	/^	QString      _psk_identity;$/;"	m	class:ProviderUdpSSL
_qSchema	include/utils/jsonschema/QJsonSchemaChecker.h	/^	QJsonObject _qSchema;$/;"	m	class:QJsonSchemaChecker
_qconfig	include/hyperion/SettingsManager.h	/^	QJsonObject _qconfig;$/;"	m	class:SettingsManager
_query	libsrc/leddevice/dev_net/ProviderRestApi.h	/^	QUrlQuery _query;$/;"	m	class:ProviderRestApi
_raw2ledAdjustment	include/hyperion/Hyperion.h	/^	MultiColorAdjustment * _raw2ledAdjustment;$/;"	m	class:Hyperion
_read_timeout	libsrc/leddevice/dev_net/ProviderUdpSSL.h	/^	uint32_t     _read_timeout;$/;"	m	class:ProviderUdpSSL
_receiveBuffer	include/flatbufserver/FlatBufferConnection.h	/^	QByteArray _receiveBuffer;$/;"	m	class:FlatBufferConnection
_receiveBuffer	libsrc/boblightserver/BoblightClientConnection.h	/^	QByteArray _receiveBuffer;$/;"	m	class:BoblightClientConnection
_receiveBuffer	libsrc/flatbufserver/FlatBufferClient.h	/^	QByteArray _receiveBuffer;$/;"	m	class:FlatBufferClient
_receiveBuffer	libsrc/jsonserver/JsonClientConnection.h	/^	QByteArray _receiveBuffer;$/;"	m	class:JsonClientConnection
_receiveBuffer	libsrc/protoserver/ProtoClientConnection.h	/^	QByteArray _receiveBuffer;$/;"	m	class:ProtoClientConnection
_receiveBuffer	libsrc/webserver/WebSocketClient.h	/^	QByteArray _receiveBuffer;$/;"	m	class:WebSocketClient
_rectangle	include/grabber/DispmanxFrameGrabber.h	/^	VC_RECT_T _rectangle;$/;"	m	class:DispmanxFrameGrabber
_redChannel	libsrc/leddevice/dev_tinker/LedDeviceTinkerforge.h	/^	std::vector<uint8_t> _redChannel;$/;"	m	class:LedDeviceTinkerforge
_refreshTimer	include/leddevice/LedDevice.h	/^	QTimer*	_refreshTimer;$/;"	m	class:LedDevice
_refreshTimerInterval_ms	include/leddevice/LedDevice.h	/^	int _refreshTimerInterval_ms;$/;"	m	class:LedDevice
_regExFilter	include/ssdp/SSDPDiscover.h	/^	QRegularExpression _regExFilter;$/;"	m	class:SSDPDiscover
_registered	include/flatbufserver/FlatBufferConnection.h	/^	bool _registered;$/;"	m	class:FlatBufferConnection
_repeatCount	libsrc/utils/Logger.cpp	/^int _repeatCount = 0;$/;"	v
_repeatMessage	libsrc/utils/Logger.cpp	/^Logger::T_LOG_MESSAGE _repeatMessage;$/;"	v
_reply	libsrc/webserver/CgiHandler.h	/^	QtHttpReply *       _reply;$/;"	m	class:CgiHandler
_request	libsrc/webserver/CgiHandler.h	/^	QtHttpRequest *     _request;$/;"	m	class:CgiHandler
_responseBody	libsrc/leddevice/dev_net/ProviderRestApi.h	/^	QJsonDocument _responseBody;$/;"	m	class:httpResponse
_restApi	libsrc/leddevice/dev_net/LedDeviceNanoleaf.h	/^	ProviderRestApi* _restApi;$/;"	m	class:LedDeviceNanoleaf
_restApi	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	ProviderRestApi* _restApi;$/;"	m	class:LedDevicePhilipsHueBridge
_restApi	libsrc/leddevice/dev_net/LedDeviceWled.h	/^	ProviderRestApi* _restApi;$/;"	m	class:LedDeviceWled
_resultArray	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	QJsonArray _resultArray;$/;"	m	class:YeelightResponse
_retry_left	libsrc/leddevice/dev_net/ProviderUdpSSL.h	/^	int          _retry_left;$/;"	m	class:ProviderUdpSSL
_rgbBlackAdjustment	include/hyperion/ColorAdjustment.h	/^	RgbChannelAdjustment _rgbBlackAdjustment;$/;"	m	class:ColorAdjustment
_rgbBlueAdjustment	include/hyperion/ColorAdjustment.h	/^	RgbChannelAdjustment _rgbBlueAdjustment;$/;"	m	class:ColorAdjustment
_rgbCyanAdjustment	include/hyperion/ColorAdjustment.h	/^	RgbChannelAdjustment _rgbCyanAdjustment;$/;"	m	class:ColorAdjustment
_rgbGreenAdjustment	include/hyperion/ColorAdjustment.h	/^	RgbChannelAdjustment _rgbGreenAdjustment;$/;"	m	class:ColorAdjustment
_rgbMagentaAdjustment	include/hyperion/ColorAdjustment.h	/^	RgbChannelAdjustment _rgbMagentaAdjustment;$/;"	m	class:ColorAdjustment
_rgbRedAdjustment	include/hyperion/ColorAdjustment.h	/^	RgbChannelAdjustment _rgbRedAdjustment;$/;"	m	class:ColorAdjustment
_rgbTransform	include/hyperion/ColorAdjustment.h	/^	RgbTransform _rgbTransform;$/;"	m	class:ColorAdjustment
_rgbWhiteAdjustment	include/hyperion/ColorAdjustment.h	/^	RgbChannelAdjustment _rgbWhiteAdjustment;$/;"	m	class:ColorAdjustment
_rgbYellowAdjustment	include/hyperion/ColorAdjustment.h	/^	RgbChannelAdjustment _rgbYellowAdjustment;$/;"	m	class:ColorAdjustment
_rootPath	include/effectengine/EffectFileHandler.h	/^	const QString _rootPath;$/;"	m	class:EffectFileHandler
_rootPath	include/hyperion/HyperionIManager.h	/^	const QString _rootPath;$/;"	m	class:HyperionIManager
_rootPath	libsrc/db/DBManager.cpp	/^static QString _rootPath;$/;"	v	file:
_rs232Port	libsrc/leddevice/dev_serial/ProviderRs232.h	/^	QSerialPort _rs232Port;$/;"	m	class:ProviderRs232
_running	include/ssdp/SSDPServer.h	/^	bool    _running;$/;"	m	class:SSDPServer
_runningInstances	include/hyperion/HyperionIManager.h	/^	QMap<quint8, Hyperion*> _runningInstances;$/;"	m	class:HyperionIManager
_sTable	include/hyperion/SettingsManager.h	/^	SettingsTable* _sTable;$/;"	m	class:SettingsManager
_schemaError	include/utils/jsonschema/QJsonSchemaChecker.h	/^	bool _schemaError;$/;"	m	class:QJsonSchemaChecker
_scheme	libsrc/leddevice/dev_net/ProviderRestApi.h	/^	QString _scheme;$/;"	m	class:ProviderRestApi
_screen	include/grabber/QtGrabber.h	/^	QScreen* _screen;$/;"	m	class:QtGrabber
_screenHeight	include/grabber/QtGrabber.h	/^	unsigned _screenHeight;$/;"	m	class:QtGrabber
_screenHeight	include/grabber/X11Grabber.h	/^	unsigned _screenHeight;$/;"	m	class:X11Grabber
_screenIndex	include/grabber/OsxFrameGrabber.h	/^	unsigned _screenIndex;$/;"	m	class:OsxFrameGrabber
_screenWidth	include/grabber/QtGrabber.h	/^	unsigned _screenWidth;$/;"	m	class:QtGrabber
_screenWidth	include/grabber/X11Grabber.h	/^	unsigned _screenWidth;$/;"	m	class:X11Grabber
_script	include/effectengine/Effect.h	/^	const QString _script;$/;"	m	class:Effect
_searchTarget	include/ssdp/SSDPDiscover.h	/^	QString _searchTarget;$/;"	m	class:SSDPDiscover
_serialNumber	libsrc/leddevice/dev_hid/LedDeviceLightpack.h	/^	QString _serialNumber;$/;"	m	class:LedDeviceLightpack
_server	include/boblightserver/BoblightServer.h	/^	QTcpServer * _server;$/;"	m	class:BoblightServer
_server	include/flatbufserver/FlatBufferServer.h	/^	QTcpServer* _server;$/;"	m	class:FlatBufferServer
_server	include/jsonserver/JsonServer.h	/^	QTcpServer * _server;$/;"	m	class:JsonServer
_server	include/protoserver/ProtoServer.h	/^	QTcpServer* _server;$/;"	m	class:ProtoServer
_server	include/webserver/WebServer.h	/^	QtHttpServer*        _server;$/;"	m	class:WebServer
_server	libsrc/webserver/WebJsonRpc.h	/^	QtHttpServer* _server;$/;"	m	class:WebJsonRpc
_serverHeader	include/ssdp/SSDPServer.h	/^	QString _serverHeader;$/;"	m	class:SSDPServer
_server_name	libsrc/leddevice/dev_net/ProviderUdpSSL.h	/^	QString      _server_name;$/;"	m	class:ProviderUdpSSL
_serviceRegister	include/jsonserver/JsonServer.h	/^	BonjourServiceRegister * _serviceRegister = nullptr;$/;"	m	class:JsonServer
_serviceRegister	include/webserver/WebServer.h	/^	BonjourServiceRegister * _serviceRegister = nullptr;$/;"	m	class:WebServer
_services	include/ssdp/SSDPDiscover.h	/^	QMap<QString, SSDPService> _services;$/;"	m	class:SSDPDiscover
_setFcConfig	libsrc/leddevice/dev_net/LedDeviceFadeCandy.h	/^	bool        _setFcConfig;$/;"	m	class:LedDeviceFadeCandy
_settingsManager	include/hyperion/Hyperion.h	/^	SettingsManager* _settingsManager;$/;"	m	class:Hyperion
_settlingTime	libsrc/hyperion/LinearColorSmoothing.h	/^	int64_t _settlingTime;$/;"	m	class:LinearColorSmoothing
_shminfo	include/grabber/X11Grabber.h	/^	XShmSegmentInfo _shminfo;$/;"	m	class:X11Grabber
_signalDetectionEnabled	include/grabber/V4L2Grabber.h	/^	bool     _signalDetectionEnabled;$/;"	m	class:V4L2Grabber
_skipDupKeys	include/ssdp/SSDPDiscover.h	/^	bool _skipDupKeys;$/;"	m	class:SSDPDiscover
_skipSmoothingDiff	libsrc/leddevice/dev_net/LedDeviceAtmoOrb.h	/^	int _skipSmoothingDiff;$/;"	m	class:LedDeviceAtmoOrb
_socket	include/flatbufserver/FlatBufferConnection.h	/^	QTcpSocket _socket;$/;"	m	class:FlatBufferConnection
_socket	libsrc/boblightserver/BoblightClientConnection.h	/^	QTcpSocket * _socket;$/;"	m	class:BoblightClientConnection
_socket	libsrc/flatbufserver/FlatBufferClient.h	/^	QTcpSocket *_socket;$/;"	m	class:FlatBufferClient
_socket	libsrc/jsonserver/JsonClientConnection.h	/^	QTcpSocket* _socket;$/;"	m	class:JsonClientConnection
_socket	libsrc/protoserver/ProtoClientConnection.h	/^	QTcpSocket* _socket;$/;"	m	class:ProtoClientConnection
_socket	libsrc/webserver/WebSocketClient.h	/^	QTcpSocket* _socket;$/;"	m	class:WebSocketClient
_sourceAutoSelectEnabled	include/hyperion/PriorityMuxer.h	/^	bool _sourceAutoSelectEnabled;$/;"	m	class:PriorityMuxer
_spi	libsrc/leddevice/dev_spi/ProviderSpi.h	/^	spi_ioc_transfer _spi;$/;"	m	class:ProviderSpi
_spiDataInvert	libsrc/leddevice/dev_spi/ProviderSpi.h	/^	bool _spiDataInvert;$/;"	m	class:ProviderSpi
_spiMode	libsrc/leddevice/dev_spi/ProviderSpi.h	/^	int _spiMode;$/;"	m	class:ProviderSpi
_srcFormat	include/grabber/X11Grabber.h	/^	XRenderPictFormat* _srcFormat;$/;"	m	class:X11Grabber
_srcPicture	include/grabber/X11Grabber.h	/^	Picture _srcPicture;$/;"	m	class:X11Grabber
_src_x	include/grabber/QtGrabber.h	/^	unsigned _src_x;$/;"	m	class:QtGrabber
_src_x	include/grabber/X11Grabber.h	/^	unsigned _src_x;$/;"	m	class:X11Grabber
_src_x_max	include/grabber/QtGrabber.h	/^	unsigned _src_x_max;$/;"	m	class:QtGrabber
_src_y	include/grabber/QtGrabber.h	/^	unsigned _src_y;$/;"	m	class:QtGrabber
_src_y	include/grabber/X11Grabber.h	/^	unsigned _src_y;$/;"	m	class:X11Grabber
_src_y_max	include/grabber/QtGrabber.h	/^	unsigned _src_y_max;$/;"	m	class:QtGrabber
_ssdpAddr	include/ssdp/SSDPDiscover.h	/^	QHostAddress _ssdpAddr;$/;"	m	class:SSDPDiscover
_ssdpDescription	libsrc/webserver/StaticFileServing.h	/^	QByteArray      _ssdpDescription;$/;"	m	class:StaticFileServing
_ssdpMaxWaitResponseTime	include/ssdp/SSDPDiscover.h	/^	int _ssdpMaxWaitResponseTime;$/;"	m	class:SSDPDiscover
_ssdpPort	include/ssdp/SSDPDiscover.h	/^	quint16 _ssdpPort;$/;"	m	class:SSDPDiscover
_ssdpTimeout	include/ssdp/SSDPDiscover.h	/^	int	_ssdpTimeout;$/;"	m	class:SSDPDiscover
_ssl_port	libsrc/leddevice/dev_net/ProviderUdpSSL.h	/^	int          _ssl_port;$/;"	m	class:ProviderUdpSSL
_ssl_read_timeout	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	int _ssl_read_timeout;$/;"	m	class:LedDevicePhilipsHue
_startPos	libsrc/leddevice/dev_net/LedDeviceNanoleaf.h	/^	uint _startPos;$/;"	m	class:LedDeviceNanoleaf
_startQueue	include/hyperion/HyperionIManager.h	/^	QList<quint8> _startQueue;$/;"	m	class:HyperionIManager
_startTime	include/utils/Profiler.h	/^	clock_t         _startTime;$/;"	m	class:Profiler
_staticFileServing	include/webserver/WebServer.h	/^	StaticFileServing*   _staticFileServing;$/;"	m	class:WebServer
_stopConnection	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	bool _stopConnection;$/;"	m	class:LedDevicePhilipsHue
_stopConnection	libsrc/leddevice/dev_net/ProviderUdpSSL.h	/^	bool         _stopConnection;$/;"	m	class:ProviderUdpSSL
_stopHandle	libsrc/webserver/WebJsonRpc.h	/^	bool _stopHandle = false;$/;"	m	class:WebJsonRpc
_streamNotifier	include/grabber/V4L2Grabber.h	/^	QSocketNotifier *_streamNotifier;$/;"	m	class:V4L2Grabber
_streamOwner	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	QString _streamOwner;$/;"	m	class:LedDevicePhilipsHue
_streaming_image_reply	include/api/JsonAPI.h	/^	QJsonObject _streaming_image_reply;$/;"	m	class:JsonAPI
_streaming_leds_reply	include/api/JsonAPI.h	/^	QJsonObject _streaming_leds_reply;$/;"	m	class:JsonAPI
_streaming_logging_activated	include/api/JsonAPI.h	/^	bool _streaming_logging_activated;$/;"	m	class:JsonAPI
_streaming_logging_reply	include/api/JsonAPI.h	/^	QJsonObject _streaming_logging_reply;$/;"	m	class:JsonAPI
_subsamp	include/grabber/V4L2Grabber.h	/^	int _subsamp;$/;"	m	class:V4L2Grabber
_subscribedCommands	include/api/JsonCB.h	/^	QStringList _subscribedCommands;$/;"	m	class:JsonCB
_suffix_size	libsrc/leddevice/dev_net/LedDeviceUdpH801.h	/^	const int _suffix_size = 1;$/;"	m	class:LedDeviceUdpH801
_sumBrightnessLow	include/utils/RgbTransform.h	/^		, _sumBrightnessLow;$/;"	m	class:RgbTransform
_switchOffOnBlack	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	bool _switchOffOnBlack;$/;"	m	class:LedDevicePhilipsHue
_switches	include/commandline/SwitchOption.h	/^	QMap<QString, T> _switches;$/;"	m	class:commandline::SwitchOption
_sysinfo	include/utils/SysInfo.h	/^	HyperionSysInfo _sysinfo;$/;"	m	class:SysInfo
_syslogEnabled	include/utils/Logger.h	/^	bool     _syslogEnabled;$/;"	m	class:Logger
_systemCaptEnabled	include/hyperion/CaptureCont.h	/^	bool _systemCaptEnabled;$/;"	m	class:CaptureCont
_systemCaptName	include/hyperion/CaptureCont.h	/^	QString _systemCaptName;$/;"	m	class:CaptureCont
_systemCaptPrio	include/hyperion/CaptureCont.h	/^	quint8 _systemCaptPrio;$/;"	m	class:CaptureCont
_systemInactiveTimer	include/hyperion/CaptureCont.h	/^	QTimer* _systemInactiveTimer;$/;"	m	class:CaptureCont
_table	include/db/DBManager.h	/^	QString _table;$/;"	m	class:DBManager
_targetTime	libsrc/hyperion/LinearColorSmoothing.h	/^	int64_t _targetTime;$/;"	m	class:LinearColorSmoothing
_targetValues	libsrc/hyperion/LinearColorSmoothing.h	/^	std::vector<ColorRgb> _targetValues;$/;"	m	class:LinearColorSmoothing
_tcpMusicModeServer	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	QTcpServer* _tcpMusicModeServer = nullptr;$/;"	m	class:LedDeviceYeelight
_tcpSocket	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	QTcpSocket*	 _tcpSocket;$/;"	m	class:YeelightLight
_tcpStreamSocket	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	QTcpSocket*	 _tcpStreamSocket;$/;"	m	class:YeelightLight
_temp_rgbw	libsrc/leddevice/dev_rpi_pwm/LedDeviceWS281x.h	/^	ColorRgbw   _temp_rgbw;$/;"	m	class:LedDeviceWS281x
_temp_rgbw	libsrc/leddevice/dev_spi/LedDeviceSk6812SPI.h	/^	ColorRgbw _temp_rgbw;$/;"	m	class:LedDeviceSk6812SPI
_timeout	include/effectengine/Effect.h	/^	const int _timeout;$/;"	m	class:Effect
_timeout	include/flatbufserver/FlatBufferServer.h	/^	int _timeout;$/;"	m	class:FlatBufferServer
_timeout	include/protoserver/ProtoServer.h	/^	int _timeout;$/;"	m	class:ProtoServer
_timeout	libsrc/flatbufserver/FlatBufferClient.h	/^	int _timeout;$/;"	m	class:FlatBufferClient
_timeout	libsrc/protoserver/ProtoClientConnection.h	/^	int _timeout;$/;"	m	class:ProtoClientConnection
_timeoutTimer	libsrc/flatbufserver/FlatBufferClient.h	/^	QTimer *_timeoutTimer;$/;"	m	class:FlatBufferClient
_timeoutTimer	libsrc/protoserver/ProtoClientConnection.h	/^	QTimer*_timeoutTimer;$/;"	m	class:ProtoClientConnection
_timer	include/flatbufserver/FlatBufferConnection.h	/^	QTimer _timer;$/;"	m	class:FlatBufferConnection
_timer	include/hyperion/AuthManager.h	/^	QTimer *_timer;$/;"	m	class:AuthManager
_timer	include/hyperion/GrabberWrapper.h	/^	QTimer* _timer;$/;"	m	class:GrabberWrapper
_timer	include/hyperion/PriorityMuxer.h	/^	QTimer* _timer;$/;"	m	class:PriorityMuxer
_timer	libsrc/hyperion/LinearColorSmoothing.h	/^	QTimer * _timer;$/;"	m	class:LinearColorSmoothing
_timerBonjourResolver	include/bonjour/bonjourbrowserwrapper.h	/^	QTimer* _timerBonjourResolver;$/;"	m	class:BonjourBrowserWrapper
_tokenAuthAttempts	include/hyperion/AuthManager.h	/^	QVector<uint64_t> _tokenAuthAttempts;$/;"	m	class:AuthManager
_topDown	libsrc/leddevice/dev_net/LedDeviceNanoleaf.h	/^	bool _topDown;$/;"	m	class:LedDeviceNanoleaf
_tpm2ByteCount	libsrc/leddevice/dev_net/LedDeviceTpm2net.h	/^	int _tpm2ByteCount;$/;"	m	class:LedDeviceTpm2net
_tpm2ThisPacket	libsrc/leddevice/dev_net/LedDeviceTpm2net.h	/^	int _tpm2ThisPacket;$/;"	m	class:LedDeviceTpm2net
_tpm2TotalPackets	libsrc/leddevice/dev_net/LedDeviceTpm2net.h	/^	int _tpm2TotalPackets;$/;"	m	class:LedDeviceTpm2net
_tpm2_max	libsrc/leddevice/dev_net/LedDeviceTpm2net.h	/^	int _tpm2_max;$/;"	m	class:LedDeviceTpm2net
_transform	include/grabber/X11Grabber.h	/^	XTransform _transform;$/;"	m	class:X11Grabber
_transitionDuration	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	int _transitionDuration;$/;"	m	class:LedDeviceYeelight
_transitionDuration	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	int _transitionDuration;$/;"	m	class:YeelightLight
_transitionEffect	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	API_EFFECT _transitionEffect;$/;"	m	class:YeelightLight
_transitionEffect	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	YeelightLight::API_EFFECT _transitionEffect;$/;"	m	class:LedDeviceYeelight
_transitionEffectParam	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	QString _transitionEffectParam;$/;"	m	class:YeelightLight
_transitionTime	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	int _transitionTime;$/;"	m	class:LedDevicePhilipsHue
_transitionTime	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	int _transitionTime;$/;"	m	class:PhilipsHueLight
_transitiontime	libsrc/leddevice/dev_net/LedDeviceAtmoOrb.h	/^	int _transitiontime;$/;"	m	class:LedDeviceAtmoOrb
_transport_type	libsrc/leddevice/dev_net/ProviderUdpSSL.h	/^	QString      _transport_type;$/;"	m	class:ProviderUdpSSL
_udpSocket	include/ssdp/SSDPDiscover.h	/^	QUdpSocket* _udpSocket;$/;"	m	class:SSDPDiscover
_udpSocket	include/ssdp/SSDPServer.h	/^	QUdpSocket* _udpSocket;$/;"	m	class:SSDPServer
_udpSocket	libsrc/leddevice/dev_net/LedDeviceAtmoOrb.h	/^	QUdpSocket * _udpSocket;$/;"	m	class:LedDeviceAtmoOrb
_udpSocket	libsrc/leddevice/dev_net/ProviderUdp.h	/^	QUdpSocket * _udpSocket;$/;"	m	class:ProviderUdp
_uid	libsrc/leddevice/dev_tinker/LedDeviceTinkerforge.h	/^	QString _uid;$/;"	m	class:LedDeviceTinkerforge
_unknownSwitchCnt	include/blackborder/BlackBorderProcessor.h	/^		unsigned _unknownSwitchCnt;$/;"	m	class:hyperion::BlackBorderProcessor
_unlocked	libsrc/webserver/WebJsonRpc.h	/^	bool _unlocked = false;$/;"	m	class:WebJsonRpc
_updateInterval	libsrc/hyperion/LinearColorSmoothing.h	/^	int64_t _updateInterval;$/;"	m	class:LinearColorSmoothing
_updateInterval_ms	include/hyperion/GrabberWrapper.h	/^	int _updateInterval_ms;$/;"	m	class:GrabberWrapper
_updateTimer	include/hyperion/PriorityMuxer.h	/^	QTimer* _updateTimer;$/;"	m	class:PriorityMuxer
_usbProductDescription	libsrc/leddevice/dev_hid/LedDeviceHyperionUsbasp.cpp	/^QString  _usbProductDescription = "Hyperion led controller";$/;"	m	namespace:__anon14	file:
_usbProductId	libsrc/leddevice/dev_hid/LedDeviceHyperionUsbasp.cpp	/^uint16_t _usbProductId = 0x05dc;$/;"	m	namespace:__anon14	file:
_usbVendorId	libsrc/leddevice/dev_hid/LedDeviceHyperionUsbasp.cpp	/^uint16_t _usbVendorId = 0x16c0;$/;"	m	namespace:__anon14	file:
_useFeature	libsrc/leddevice/dev_hid/ProviderHID.h	/^	bool           _useFeature;$/;"	m	class:ProviderHID
_useHueEntertainmentAPI	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	bool _useHueEntertainmentAPI;$/;"	m	class:LedDevicePhilipsHueBridge
_useImageResampler	include/hyperion/Grabber.h	/^	bool _useImageResampler;$/;"	m	class:Grabber
_useOrbSmoothing	libsrc/leddevice/dev_net/LedDeviceAtmoOrb.h	/^	bool _useOrbSmoothing;$/;"	m	class:LedDeviceAtmoOrb
_useSsl	include/webserver/WebServer.h	/^	bool				 _useSsl;$/;"	m	class:WebServer
_userAuthAttempts	include/hyperion/AuthManager.h	/^	QVector<uint64_t> _userAuthAttempts;$/;"	m	class:AuthManager
_userEnabled	include/blackborder/BlackBorderProcessor.h	/^		bool _userEnabled;$/;"	m	class:hyperion::BlackBorderProcessor
_userMappingType	include/hyperion/ImageProcessor.h	/^	int _userMappingType;$/;"	m	class:ImageProcessor
_username	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	QString _username;$/;"	m	class:LedDevicePhilipsHueBridge
_usnList	include/ssdp/SSDPDiscover.h	/^	QStringList _usnList;$/;"	m	class:SSDPDiscover
_uuid	include/hyperion/AuthManager.h	/^	QString _uuid;$/;"	m	class:AuthManager
_uuid	include/ssdp/SSDPHandler.h	/^	QString _uuid;$/;"	m	class:SSDPHandler
_uuid	include/ssdp/SSDPServer.h	/^	QString _uuid;$/;"	m	class:SSDPServer
_v4lCaptEnabled	include/hyperion/CaptureCont.h	/^	bool _v4lCaptEnabled;$/;"	m	class:CaptureCont
_v4lCaptName	include/hyperion/CaptureCont.h	/^	QString _v4lCaptName;$/;"	m	class:CaptureCont
_v4lCaptPrio	include/hyperion/CaptureCont.h	/^	quint8 _v4lCaptPrio;$/;"	m	class:CaptureCont
_v4lDevices	include/grabber/V4L2Grabber.h	/^	std::map<QString, QString>						_v4lDevices;$/;"	m	class:V4L2Grabber
_v4lInactiveTimer	include/hyperion/CaptureCont.h	/^	QTimer* _v4lInactiveTimer;$/;"	m	class:CaptureCont
_vc_display	include/grabber/DispmanxFrameGrabber.h	/^	DISPMANX_DISPLAY_HANDLE_T _vc_display;$/;"	m	class:DispmanxFrameGrabber
_vc_flags	include/grabber/DispmanxFrameGrabber.h	/^	int _vc_flags;$/;"	m	class:DispmanxFrameGrabber
_vc_resource	include/grabber/DispmanxFrameGrabber.h	/^	DISPMANX_RESOURCE_HANDLE_T _vc_resource;$/;"	m	class:DispmanxFrameGrabber
_verticalBorder	include/hyperion/ImageToLedsMap.h	/^		const unsigned _verticalBorder;$/;"	m	class:hyperion::ImageToLedsMap
_verticalDecimation	include/utils/ImageResampler.h	/^	int _verticalDecimation;$/;"	m	class:ImageResampler
_videoDev	include/grabber/AmlogicGrabber.h	/^	int             _videoDev;$/;"	m	class:AmlogicGrabber
_videoMode	include/hyperion/Grabber.h	/^	VideoMode    _videoMode;$/;"	m	class:Grabber
_videoMode	include/utils/ImageResampler.h	/^	VideoMode _videoMode;$/;"	m	class:ImageResampler
_videoPlaying	include/grabber/AmlogicGrabber.h	/^	bool            _videoPlaying;$/;"	m	class:AmlogicGrabber
_videoStandard	include/grabber/V4L2Grabber.h	/^	VideoStandard									_videoStandard;$/;"	m	class:V4L2Grabber
_waitTimeQuota	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	int _waitTimeQuota;$/;"	m	class:LedDeviceYeelight
_waitTimeQuota	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	int _waitTimeQuota;$/;"	m	class:YeelightLight
_webserver	include/ssdp/SSDPHandler.h	/^	WebServer* _webserver;$/;"	m	class:SSDPHandler
_whiteAlgorithm	libsrc/leddevice/dev_rpi_pwm/LedDeviceWS281x.h	/^	RGBW::WhiteAlgorithm _whiteAlgorithm;$/;"	m	class:LedDeviceWS281x
_whiteAlgorithm	libsrc/leddevice/dev_spi/LedDeviceSk6812SPI.h	/^	RGBW::WhiteAlgorithm _whiteAlgorithm;$/;"	m	class:LedDeviceSk6812SPI
_whitePoint_b	libsrc/leddevice/dev_net/LedDeviceFadeCandy.h	/^	double      _whitePoint_b;$/;"	m	class:LedDeviceFadeCandy
_whitePoint_g	libsrc/leddevice/dev_net/LedDeviceFadeCandy.h	/^	double      _whitePoint_g;$/;"	m	class:LedDeviceFadeCandy
_whitePoint_r	libsrc/leddevice/dev_net/LedDeviceFadeCandy.h	/^	double      _whitePoint_r;$/;"	m	class:LedDeviceFadeCandy
_width	include/hyperion/Grabber.h	/^	int _width;$/;"	m	class:Grabber
_width	include/hyperion/ImageToLedsMap.h	/^		const unsigned _width;$/;"	m	class:hyperion::ImageToLedsMap
_width	include/utils/Image.h	/^	unsigned _width;$/;"	m	class:Image
_window	include/grabber/X11Grabber.h	/^	Window _window;$/;"	m	class:X11Grabber
_windowAttr	include/grabber/X11Grabber.h	/^	XWindowAttributes _windowAttr;$/;"	m	class:X11Grabber
_wrapper	libsrc/webserver/WebJsonRpc.h	/^	QtHttpClientWrapper* _wrapper;$/;"	m	class:WebJsonRpc
_writeLedsCommand	libsrc/leddevice/dev_hid/LedDeviceHyperionUsbasp.h	/^	uint8_t _writeLedsCommand;$/;"	m	class:LedDeviceHyperionUsbasp
_writeToLedsEnable	libsrc/hyperion/LinearColorSmoothing.h	/^	bool _writeToLedsEnable;$/;"	m	class:LinearColorSmoothing
_wsReceiveBuffer	libsrc/webserver/WebSocketClient.h	/^	QByteArray _wsReceiveBuffer;$/;"	m	class:WebSocketClient
_wsh	libsrc/webserver/WebSocketClient.h	/^	WebSocketHeader _wsh;$/;"	m	class:WebSocketClient
_x11Display	include/grabber/X11Grabber.h	/^	Display* _x11Display;$/;"	m	class:X11Grabber
_xImage	include/grabber/X11Grabber.h	/^	XImage* _xImage;$/;"	m	class:X11Grabber
_x_frac_max	include/grabber/V4L2Grabber.h	/^	double   _x_frac_max;$/;"	m	class:V4L2Grabber
_x_frac_min	include/grabber/V4L2Grabber.h	/^	double   _x_frac_min;$/;"	m	class:V4L2Grabber
_y_frac_max	include/grabber/V4L2Grabber.h	/^	double   _y_frac_max;$/;"	m	class:V4L2Grabber
_y_frac_min	include/grabber/V4L2Grabber.h	/^	double   _y_frac_min;$/;"	m	class:V4L2Grabber
accessAllowed	libsrc/utils/NetOrigin.cpp	/^bool NetOrigin::accessAllowed(const QHostAddress& address, const QHostAddress& local)$/;"	f	class:NetOrigin
acn_id	libsrc/leddevice/dev_net/LedDeviceUdpE131.h	/^		uint8_t  acn_id[12];$/;"	m	struct:__anon6::__anon7
action	libsrc/grabber/amlogic/AmlogicWrapper.cpp	/^void AmlogicWrapper::action()$/;"	f	class:AmlogicWrapper
action	libsrc/grabber/dispmanx/DispmanxWrapper.cpp	/^void DispmanxWrapper::action()$/;"	f	class:DispmanxWrapper
action	libsrc/grabber/framebuffer/FramebufferWrapper.cpp	/^void FramebufferWrapper::action()$/;"	f	class:FramebufferWrapper
action	libsrc/grabber/osx/OsxWrapper.cpp	/^void OsxWrapper::action()$/;"	f	class:OsxWrapper
action	libsrc/grabber/qt/QtWrapper.cpp	/^void QtWrapper::action()$/;"	f	class:QtWrapper
action	libsrc/grabber/v4l2/V4L2Wrapper.cpp	/^void V4L2Wrapper::action()$/;"	f	class:V4L2Wrapper
action	libsrc/grabber/x11/X11Wrapper.cpp	/^void X11Wrapper::action()$/;"	f	class:X11Wrapper
active	libsrc/boblightserver/BoblightServer.cpp	/^bool BoblightServer::active()$/;"	f	class:BoblightServer
add	include/commandline/Parser.h	/^	OptionT &add($/;"	f	class:commandline::Parser
addAdjustment	libsrc/hyperion/MultiColorAdjustment.cpp	/^void MultiColorAdjustment::addAdjustment(ColorAdjustment * adjustment)$/;"	f	class:MultiColorAdjustment
addConfig	libsrc/hyperion/LinearColorSmoothing.cpp	/^unsigned LinearColorSmoothing::addConfig(int settlingTime_ms, double ledUpdateFrequency_hz, unsigned updateDelay)$/;"	f	class:LinearColorSmoothing
addFlatbufferSlave	libsrc/hyperion/MessageForwarder.cpp	/^void MessageForwarder::addFlatbufferSlave(QString slave)$/;"	f	class:MessageForwarder
addHeader	libsrc/webserver/QtHttpReply.cpp	/^void QtHttpReply::addHeader (const QByteArray & header, const QByteArray & value)$/;"	f	class:QtHttpReply
addHeader	libsrc/webserver/QtHttpRequest.cpp	/^void QtHttpRequest::addHeader (const QByteArray & header, const QByteArray & value)$/;"	f	class:QtHttpRequest
addHelpOption	include/commandline/Parser.h	/^	QCommandLineOption addHelpOption()$/;"	f	class:commandline::Parser
addJsonSlave	libsrc/hyperion/MessageForwarder.cpp	/^void MessageForwarder::addJsonSlave(QString slave)$/;"	f	class:MessageForwarder
addOption	libsrc/commandline/Parser.cpp	/^bool Parser::addOption(Option &option)$/;"	f	class:Parser
addOption	libsrc/commandline/Parser.cpp	/^bool Parser::addOption(Option * const option)$/;"	f	class:Parser
addPositionalArgument	include/commandline/Parser.h	/^	void addPositionalArgument(const QString &name, const QString &description, const QString &syntax = QString())$/;"	f	class:commandline::Parser
addSmoothingConfig	libsrc/hyperion/Hyperion.cpp	/^unsigned Hyperion::addSmoothingConfig(int settlingTime_ms, double ledUpdateFrequency_hz, unsigned updateDelay)$/;"	f	class:Hyperion
addSwitch	include/commandline/SwitchOption.h	/^	void addSwitch(const QString &switch_, T value=T())              { _switches[switch_.toLower()] = value; }$/;"	f	class:commandline::SwitchOption
addToDeviceMap	libsrc/leddevice/LedDeviceWrapper.cpp	/^int LedDeviceWrapper::addToDeviceMap(QString name, LedDeviceCreateFuncType funcPtr)$/;"	f	class:LedDeviceWrapper
addVersionOption	include/commandline/Parser.h	/^	QCommandLineOption addVersionOption()$/;"	f	class:commandline::Parser
address	include/bonjour/bonjourrecord.h	/^	QString address;$/;"	m	class:BonjourRecord
address_increment	libsrc/leddevice/dev_net/LedDeviceUdpE131.h	/^		uint16_t address_increment;$/;"	m	struct:__anon6::__anon7
adjustmentsUpdated	libsrc/hyperion/Hyperion.cpp	/^void Hyperion::adjustmentsUpdated()$/;"	f	class:Hyperion
align	libsrc/grabber/amlogic/ion.h	/^	size_t align;$/;"	m	struct:ion_allocation_data
allChannelsCleared	libsrc/effectengine/EffectEngine.cpp	/^void EffectEngine::allChannelsCleared()$/;"	f	class:EffectEngine
alpha	include/utils/ColorArgb.h	/^	uint8_t alpha;$/;"	m	struct:ColorArgb
alpha	include/utils/ColorRgba.h	/^	uint8_t alpha;$/;"	m	struct:ColorRgba
appName	include/utils/Logger.h	/^		QString      appName;$/;"	m	struct:Logger::__anon16
appendPath	libsrc/leddevice/dev_net/ProviderRestApi.cpp	/^void ProviderRestApi::appendPath ( QString& path, const QString &appendPath) const$/;"	f	class:ProviderRestApi
appendPath	libsrc/leddevice/dev_net/ProviderRestApi.cpp	/^void ProviderRestApi::appendPath ( const QString &path )$/;"	f	class:ProviderRestApi
appendRawData	libsrc/webserver/QtHttpReply.h	/^	void appendRawData (const QByteArray & data) { m_data.append(data);       };$/;"	f	class:QtHttpReply
appendRawData	libsrc/webserver/QtHttpRequest.h	/^	void appendRawData (const QByteArray & data)     { m_data.append (data); };$/;"	f	class:QtHttpRequest
applicationDescription	include/commandline/Parser.h	/^	QString applicationDescription() const$/;"	f	class:commandline::Parser
apply	libsrc/utils/RgbChannelAdjustment.cpp	/^void RgbChannelAdjustment::apply(uint8_t input, uint8_t brightness, uint8_t & red, uint8_t & green, uint8_t & blue)$/;"	f	class:RgbChannelAdjustment
applyAdjustment	libsrc/hyperion/MultiColorAdjustment.cpp	/^void MultiColorAdjustment::applyAdjustment(std::vector<ColorRgb>& ledColors)$/;"	f	class:MultiColorAdjustment
architecture	include/utils/SysInfo.h	/^		QString architecture;$/;"	m	struct:SysInfo::HyperionSysInfo
arg	libsrc/grabber/amlogic/ion.h	/^	unsigned long arg;$/;"	m	struct:ion_custom_data
args	include/api/apiStructs.h	/^    QJsonObject args;$/;"	m	struct:EffectCmdData
args	include/effectengine/ActiveEffectDefinition.h	/^	QJsonObject args;$/;"	m	struct:ActiveEffectDefinition
args	include/effectengine/EffectDefinition.h	/^	QJsonObject args;$/;"	m	struct:EffectDefinition
artnet_packet	libsrc/leddevice/dev_net/LedDeviceUdpArtNet.h	/^	artnet_packet_t artnet_packet;$/;"	m	class:LedDeviceUdpArtNet
artnet_packet_t	libsrc/leddevice/dev_net/LedDeviceUdpArtNet.h	/^} artnet_packet_t;$/;"	t	typeref:union:__anon11
availableGrabbers	libsrc/hyperion/GrabberWrapper.cpp	/^QStringList GrabberWrapper::availableGrabbers()$/;"	f	class:GrabberWrapper
bcm_host_deinit	libsrc/grabber/dispmanx/DispmanxFrameGrabberMock.cpp	/^void bcm_host_deinit()$/;"	f
bcm_host_init	libsrc/grabber/dispmanx/DispmanxFrameGrabberMock.cpp	/^void bcm_host_init()$/;"	f
bitpair_to_byte	libsrc/leddevice/dev_spi/LedDeviceAPA104.h	/^	uint8_t bitpair_to_byte[4];$/;"	m	class:LedDeviceAPA104
bitpair_to_byte	libsrc/leddevice/dev_spi/LedDeviceSk6812SPI.h	/^	uint8_t bitpair_to_byte[4];$/;"	m	class:LedDeviceSk6812SPI
bitpair_to_byte	libsrc/leddevice/dev_spi/LedDeviceSk6822SPI.h	/^	uint8_t bitpair_to_byte[4];$/;"	m	class:LedDeviceSk6822SPI
bitpair_to_byte	libsrc/leddevice/dev_spi/LedDeviceWs2812SPI.h	/^	uint8_t bitpair_to_byte[4];$/;"	m	class:LedDeviceWs2812SPI
blackBorderDetectorEnabled	libsrc/hyperion/ImageProcessor.cpp	/^bool ImageProcessor::blackBorderDetectorEnabled()$/;"	f	class:ImageProcessor
blockCounter	libsrc/utils/Profiler.cpp	/^static unsigned int blockCounter = 0;$/;"	v	file:
blue	include/utils/ColorArgb.h	/^	uint8_t blue;$/;"	m	struct:ColorArgb
blue	include/utils/ColorBgr.h	/^	uint8_t blue;$/;"	m	struct:ColorBgr
blue	include/utils/ColorRgb.h	/^	uint8_t blue;$/;"	m	struct:ColorRgb
blue	include/utils/ColorRgba.h	/^	uint8_t blue;$/;"	m	struct:ColorRgba
blue	include/utils/ColorRgbw.h	/^	uint8_t blue;$/;"	m	struct:ColorRgbw
blue	include/utils/Image.h	/^	uint8_t blue(const unsigned pixel) const$/;"	f	class:Image
blue	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	XYColor red, green, blue;$/;"	m	struct:CiColorTriangle
bonjourBrowseReply	libsrc/bonjour/bonjourservicebrowser.cpp	/^void BonjourServiceBrowser::bonjourBrowseReply(DNSServiceRef , DNSServiceFlags flags,$/;"	f	class:BonjourServiceBrowser
bonjourPort	include/bonjour/bonjourserviceresolver.h	/^    int bonjourPort;$/;"	m	class:BonjourServiceResolver
bonjourRecordResolved	libsrc/bonjour/bonjourbrowserwrapper.cpp	/^void BonjourBrowserWrapper::bonjourRecordResolved(const QHostInfo &hostInfo, int port)$/;"	f	class:BonjourBrowserWrapper
bonjourRecords	include/bonjour/bonjourservicebrowser.h	/^	QList<BonjourRecord> bonjourRecords;$/;"	m	class:BonjourServiceBrowser
bonjourRegisterService	libsrc/bonjour/bonjourserviceregister.cpp	/^void BonjourServiceRegister::bonjourRegisterService(DNSServiceRef, DNSServiceFlags,$/;"	f	class:BonjourServiceRegister
bonjourResolve	libsrc/bonjour/bonjourbrowserwrapper.cpp	/^void BonjourBrowserWrapper::bonjourResolve()$/;"	f	class:BonjourBrowserWrapper
bonjourResolveReply	libsrc/bonjour/bonjourserviceresolver.cpp	/^void BonjourServiceResolver::bonjourResolveReply(DNSServiceRef sdRef, DNSServiceFlags ,$/;"	f	class:BonjourServiceResolver
bonjourSocket	include/bonjour/bonjourservicebrowser.h	/^	QSocketNotifier *bonjourSocket;$/;"	m	class:BonjourServiceBrowser
bonjourSocket	include/bonjour/bonjourserviceregister.h	/^    QSocketNotifier *bonjourSocket;$/;"	m	class:BonjourServiceRegister
bonjourSocket	include/bonjour/bonjourserviceresolver.h	/^    QSocketNotifier *bonjourSocket;$/;"	m	class:BonjourServiceResolver
bonjourSocketReadyRead	libsrc/bonjour/bonjourservicebrowser.cpp	/^void BonjourServiceBrowser::bonjourSocketReadyRead()$/;"	f	class:BonjourServiceBrowser
bonjourSocketReadyRead	libsrc/bonjour/bonjourserviceregister.cpp	/^void BonjourServiceRegister::bonjourSocketReadyRead()$/;"	f	class:BonjourServiceRegister
bonjourSocketReadyRead	libsrc/bonjour/bonjourserviceresolver.cpp	/^void BonjourServiceResolver::bonjourSocketReadyRead()$/;"	f	class:BonjourServiceResolver
bri	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	double bri;$/;"	m	struct:CiColor
browseForServiceType	libsrc/bonjour/bonjourbrowserwrapper.cpp	/^bool BonjourBrowserWrapper::browseForServiceType(const QString &serviceType)$/;"	f	class:BonjourBrowserWrapper
browseForServiceType	libsrc/bonjour/bonjourservicebrowser.cpp	/^void BonjourServiceBrowser::browseForServiceType(const QString &serviceType)$/;"	f	class:BonjourServiceBrowser
browsingType	include/bonjour/bonjourservicebrowser.h	/^	QString browsingType;$/;"	m	class:BonjourServiceBrowser
buffer	include/grabber/V4L2Grabber.h	/^	struct buffer$/;"	s	class:V4L2Grabber
bufferSize	libsrc/grabber/amlogic/IonBuffer.h	/^	size_t bufferSize = 0;$/;"	m	class:IonBuffer
buildDesc	libsrc/ssdp/SSDPHandler.cpp	/^QString SSDPHandler::buildDesc() const$/;"	f	class:SSDPHandler
cacert	libsrc/leddevice/dev_net/ProviderUdpSSL.h	/^	mbedtls_x509_crt             cacert;$/;"	m	class:ProviderUdpSSL
cacheControl	include/ssdp/SSDPDiscover.h	/^	QString cacheControl;$/;"	m	struct:SSDPService
cacheRunningEffects	libsrc/effectengine/EffectEngine.cpp	/^void EffectEngine::cacheRunningEffects()$/;"	f	class:EffectEngine
calcMeanColor	include/hyperion/ImageToLedsMap.h	/^		ColorRgb calcMeanColor(const Image<Pixel_T> & image) const$/;"	f	class:hyperion::ImageToLedsMap
calcMeanColor	include/hyperion/ImageToLedsMap.h	/^		ColorRgb calcMeanColor(const Image<Pixel_T> & image, const std::vector<unsigned> & colors) const$/;"	f	class:hyperion::ImageToLedsMap
calcPasswordHashOfUser	include/db/AuthTable.h	/^	inline const QByteArray calcPasswordHashOfUser(const QString& user, const QString& pw)$/;"	f	class:AuthTable
calculateChecksum	libsrc/leddevice/dev_spi/LedDeviceP9813.cpp	/^uint8_t LedDeviceP9813::calculateChecksum(const ColorRgb & color) const$/;"	f	class:LedDeviceP9813
calculateThreshold	libsrc/blackborder/BlackBorderDetector.cpp	/^uint8_t BlackBorderDetector::calculateThreshold(double threshold)$/;"	f	class:BlackBorderDetector
caller	include/hyperion/AuthManager.h	/^		QObject *caller;$/;"	m	struct:AuthManager::AuthDefinition
callerComp	include/api/apiStructs.h	/^    const hyperion::Components callerComp;$/;"	m	struct:registerData
cancelNewTokenRequest	libsrc/api/API.cpp	/^void API::cancelNewTokenRequest(const QString &comment, const QString &id)$/;"	f	class:API
cancelNewTokenRequest	libsrc/hyperion/AuthManager.cpp	/^void AuthManager::cancelNewTokenRequest(QObject *caller, const QString &comment, const QString &id)$/;"	f	class:AuthManager
changeToExternalControlMode	libsrc/leddevice/dev_net/LedDeviceNanoleaf.cpp	/^QJsonDocument LedDeviceNanoleaf::changeToExternalControlMode()$/;"	f	class:LedDeviceNanoleaf
channelCleared	libsrc/effectengine/EffectEngine.cpp	/^void EffectEngine::channelCleared(int priority)$/;"	f	class:EffectEngine
checkAdditionalProperties	libsrc/utils/jsonschema/QJsonSchemaChecker.cpp	/^void QJsonSchemaChecker::checkAdditionalProperties(const QJsonObject & value, const QJsonValue & schema, const QStringList & ignoredProperties)$/;"	f	class:QJsonSchemaChecker
checkApiError	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^bool LedDevicePhilipsHueBridge::checkApiError(const QJsonDocument &response )$/;"	f	class:LedDevicePhilipsHueBridge
checkAuthBlockTimeout	libsrc/hyperion/AuthManager.cpp	/^void AuthManager::checkAuthBlockTimeout()$/;"	f	class:AuthManager
checkDependencies	libsrc/utils/jsonschema/QJsonSchemaChecker.cpp	/^void QJsonSchemaChecker::checkDependencies(const QJsonObject & value, const QJsonObject & schema)$/;"	f	class:QJsonSchemaChecker
checkEnum	libsrc/utils/jsonschema/QJsonSchemaChecker.cpp	/^void QJsonSchemaChecker::checkEnum(const QJsonValue & value, const QJsonValue & schema, const QJsonValue & defaultValue)$/;"	f	class:QJsonSchemaChecker
checkItems	libsrc/utils/jsonschema/QJsonSchemaChecker.cpp	/^void QJsonSchemaChecker::checkItems(const QJsonValue & value, const QJsonObject & schema)$/;"	f	class:QJsonSchemaChecker
checkMaxItems	libsrc/utils/jsonschema/QJsonSchemaChecker.cpp	/^void QJsonSchemaChecker::checkMaxItems(const QJsonValue & value, const QJsonValue & schema, const QJsonValue & defaultValue)$/;"	f	class:QJsonSchemaChecker
checkMaxLength	libsrc/utils/jsonschema/QJsonSchemaChecker.cpp	/^void QJsonSchemaChecker::checkMaxLength(const QJsonValue & value, const QJsonValue & schema, const QJsonValue & defaultValue)$/;"	f	class:QJsonSchemaChecker
checkMaximum	libsrc/utils/jsonschema/QJsonSchemaChecker.cpp	/^void QJsonSchemaChecker::checkMaximum(const QJsonValue & value, const QJsonValue & schema, const QJsonValue & defaultValue)$/;"	f	class:QJsonSchemaChecker
checkMinItems	libsrc/utils/jsonschema/QJsonSchemaChecker.cpp	/^void QJsonSchemaChecker::checkMinItems(const QJsonValue & value, const QJsonValue & schema, const QJsonValue & defaultValue)$/;"	f	class:QJsonSchemaChecker
checkMinLength	libsrc/utils/jsonschema/QJsonSchemaChecker.cpp	/^void QJsonSchemaChecker::checkMinLength(const QJsonValue & value, const QJsonValue & schema, const QJsonValue & defaultValue)$/;"	f	class:QJsonSchemaChecker
checkMinimum	libsrc/utils/jsonschema/QJsonSchemaChecker.cpp	/^void QJsonSchemaChecker::checkMinimum(const QJsonValue & value, const QJsonValue & schema, const QJsonValue & defaultValue)$/;"	f	class:QJsonSchemaChecker
checkProperties	libsrc/utils/jsonschema/QJsonSchemaChecker.cpp	/^void QJsonSchemaChecker::checkProperties(const QJsonObject & value, const QJsonObject & schema)$/;"	f	class:QJsonSchemaChecker
checkTimeout	libsrc/hyperion/AuthManager.cpp	/^void AuthManager::checkTimeout()$/;"	f	class:AuthManager
checkTokenResponse	libsrc/api/API.cpp	/^void API::checkTokenResponse(const bool &success, QObject *caller, const QString &token, const QString &comment, const QString &id)$/;"	f	class:API
checkType	libsrc/utils/jsonschema/QJsonSchemaChecker.cpp	/^void QJsonSchemaChecker::checkType(const QJsonValue & value, const QJsonValue & schema, const QJsonValue & defaultValue)$/;"	f	class:QJsonSchemaChecker
checkUniqueItems	libsrc/utils/jsonschema/QJsonSchemaChecker.cpp	/^void QJsonSchemaChecker::checkUniqueItems(const QJsonValue & value, const QJsonValue & schema)$/;"	f	class:QJsonSchemaChecker
cid	libsrc/leddevice/dev_net/LedDeviceUdpE131.h	/^		char     cid[16];$/;"	m	struct:__anon6::__anon7
clamp	libsrc/utils/ImageResampler.cpp	/^uint8_t ImageResampler::clamp(int x)$/;"	f	class:ImageResampler
cleanupResolve	libsrc/bonjour/bonjourserviceresolver.cpp	/^void BonjourServiceResolver::cleanupResolve()$/;"	f	class:BonjourServiceResolver
clear	include/utils/Image.h	/^	void clear()$/;"	f	class:Image
clear	libsrc/flatbufserver/FlatBufferConnection.cpp	/^void FlatBufferConnection::clear(int priority)$/;"	f	class:FlatBufferConnection
clear	libsrc/hyperion/Hyperion.cpp	/^bool Hyperion::clear(const int priority, bool forceClearAll)$/;"	f	class:Hyperion
clearAll	libsrc/flatbufserver/FlatBufferConnection.cpp	/^void FlatBufferConnection::clearAll()$/;"	f	class:FlatBufferConnection
clearAll	libsrc/hyperion/PriorityMuxer.cpp	/^void PriorityMuxer::clearAll(bool forceClearAll)$/;"	f	class:PriorityMuxer
clearInput	libsrc/hyperion/PriorityMuxer.cpp	/^bool PriorityMuxer::clearInput(const uint8_t priority)$/;"	f	class:PriorityMuxer
clearPositionalArguments	include/commandline/Parser.h	/^	void clearPositionalArguments()$/;"	f	class:commandline::Parser
clearPriority	libsrc/api/API.cpp	/^bool API::clearPriority(const int &priority, QString &replyMsg, const hyperion::Components &callerComp)$/;"	f	class:API
clearQueuedColors	libsrc/hyperion/LinearColorSmoothing.cpp	/^void LinearColorSmoothing::clearQueuedColors()$/;"	f	class:LinearColorSmoothing
clearSearchFilter	include/ssdp/SSDPDiscover.h	/^	void clearSearchFilter () { _filter=DEFAULT_FILTER; _filterHeader="ST"; }$/;"	f	class:SSDPDiscover
clientAddress	libsrc/webserver/QtHttpRequest.h	/^		QHostAddress clientAddress;$/;"	m	struct:QtHttpRequest::ClientInfo
clientDisconnected	libsrc/flatbufserver/FlatBufferServer.cpp	/^void FlatBufferServer::clientDisconnected()$/;"	f	class:FlatBufferServer
clientDisconnected	libsrc/protoserver/ProtoServer.cpp	/^void ProtoServer::clientDisconnected()$/;"	f	class:ProtoServer
client_fd	libsrc/leddevice/dev_net/ProviderUdpSSL.h	/^	mbedtls_net_context          client_fd;$/;"	m	class:ProviderUdpSSL
close	libsrc/leddevice/LedDevice.cpp	/^int LedDevice::close()$/;"	f	class:LedDevice
close	libsrc/leddevice/LedDeviceTemplate.cpp	/^int LedDeviceTemplate::close()$/;"	f	class:LedDeviceTemplate
close	libsrc/leddevice/dev_hid/LedDeviceHyperionUsbasp.cpp	/^int LedDeviceHyperionUsbasp::close()$/;"	f	class:LedDeviceHyperionUsbasp
close	libsrc/leddevice/dev_hid/LedDeviceLightpack.cpp	/^int LedDeviceLightpack::close()$/;"	f	class:LedDeviceLightpack
close	libsrc/leddevice/dev_hid/LedDeviceMultiLightpack.cpp	/^int LedDeviceMultiLightpack::close()$/;"	f	class:LedDeviceMultiLightpack
close	libsrc/leddevice/dev_hid/ProviderHID.cpp	/^int ProviderHID::close()$/;"	f	class:ProviderHID
close	libsrc/leddevice/dev_net/LedDeviceAtmoOrb.cpp	/^int LedDeviceAtmoOrb::close()$/;"	f	class:LedDeviceAtmoOrb
close	libsrc/leddevice/dev_net/LedDeviceFadeCandy.cpp	/^int LedDeviceFadeCandy::close()$/;"	f	class:LedDeviceFadeCandy
close	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^int LedDevicePhilipsHue::close()$/;"	f	class:LedDevicePhilipsHue
close	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^int LedDevicePhilipsHueBridge::close()$/;"	f	class:LedDevicePhilipsHueBridge
close	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^bool YeelightLight::close()$/;"	f	class:YeelightLight
close	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^int LedDeviceYeelight::close()$/;"	f	class:LedDeviceYeelight
close	libsrc/leddevice/dev_net/ProviderUdp.cpp	/^int ProviderUdp::close()$/;"	f	class:ProviderUdp
close	libsrc/leddevice/dev_net/ProviderUdpSSL.cpp	/^int ProviderUdpSSL::close()$/;"	f	class:ProviderUdpSSL
close	libsrc/leddevice/dev_other/LedDeviceFile.cpp	/^int LedDeviceFile::close()$/;"	f	class:LedDeviceFile
close	libsrc/leddevice/dev_other/LedDevicePiBlaster.cpp	/^int LedDevicePiBlaster::close()$/;"	f	class:LedDevicePiBlaster
close	libsrc/leddevice/dev_rpi_pwm/LedDeviceWS281x.cpp	/^int LedDeviceWS281x::close()$/;"	f	class:LedDeviceWS281x
close	libsrc/leddevice/dev_serial/ProviderRs232.cpp	/^int ProviderRs232::close()$/;"	f	class:ProviderRs232
close	libsrc/leddevice/dev_spi/ProviderSpi.cpp	/^int ProviderSpi::close()$/;"	f	class:ProviderSpi
closeConnection	libsrc/webserver/QtHttpClientWrapper.cpp	/^void QtHttpClientWrapper::closeConnection()$/;"	f	class:QtHttpClientWrapper
closeDev	libsrc/grabber/amlogic/AmlogicGrabber.cpp	/^void AmlogicGrabber::closeDev(int &fd)$/;"	f	class:AmlogicGrabber
closeSSLConnection	libsrc/leddevice/dev_net/ProviderUdpSSL.cpp	/^void ProviderUdpSSL::closeSSLConnection()$/;"	f	class:ProviderUdpSSL
closeSSLNotify	libsrc/leddevice/dev_net/ProviderUdpSSL.cpp	/^void ProviderUdpSSL::closeSSLNotify()$/;"	f	class:ProviderUdpSSL
close_device	libsrc/grabber/v4l2/V4L2Grabber.cpp	/^void V4L2Grabber::close_device()$/;"	f	class:V4L2Grabber
closedConnection	libsrc/boblightserver/BoblightServer.cpp	/^void BoblightServer::closedConnection(BoblightClientConnection *connection)$/;"	f	class:BoblightServer
closedConnection	libsrc/jsonserver/JsonServer.cpp	/^void JsonServer::closedConnection(void)$/;"	f	class:JsonServer
cmd	libsrc/grabber/amlogic/ion.h	/^	unsigned int cmd;$/;"	m	struct:ion_custom_data
cmd_cfg_jsonserver	libsrc/webserver/CgiHandler.cpp	/^void CgiHandler::cmd_cfg_jsonserver()$/;"	f	class:CgiHandler
cmd_runscript	libsrc/webserver/CgiHandler.cpp	/^void CgiHandler::cmd_runscript()$/;"	f	class:CgiHandler
colorOrder	include/hyperion/LedString.h	/^	ColorOrder colorOrder;$/;"	m	struct:Led
colorOrderToString	include/hyperion/LedString.h	/^inline QString colorOrderToString(const ColorOrder colorOrder)$/;"	f
command_exec	libsrc/utils/Process.cpp	/^QByteArray command_exec(QString \/*cmd*\/, QByteArray \/*data*\/)$/;"	f	namespace:Process
command_exec	libsrc/utils/Process.cpp	/^QByteArray command_exec(QString cmd, QByteArray data)$/;"	f	namespace:Process
commandline	include/commandline/BooleanOption.h	/^namespace commandline$/;"	n
commandline	include/commandline/ColorOption.h	/^namespace commandline$/;"	n
commandline	include/commandline/ColorsOption.h	/^namespace commandline$/;"	n
commandline	include/commandline/DoubleOption.h	/^namespace commandline$/;"	n
commandline	include/commandline/ImageOption.h	/^namespace commandline$/;"	n
commandline	include/commandline/IntOption.h	/^namespace commandline$/;"	n
commandline	include/commandline/Option.h	/^namespace commandline$/;"	n
commandline	include/commandline/Parser.h	/^namespace commandline$/;"	n
commandline	include/commandline/RegularExpressionOption.h	/^namespace commandline$/;"	n
commandline	include/commandline/SwitchOption.h	/^namespace commandline$/;"	n
commandline	include/commandline/ValidatorOption.h	/^namespace commandline$/;"	n
comment	include/hyperion/AuthManager.h	/^		QString comment;$/;"	m	struct:AuthManager::AuthDefinition
compStateChangeRequest	libsrc/boblightserver/BoblightServer.cpp	/^void BoblightServer::compStateChangeRequest(const hyperion::Components component, bool enable)$/;"	f	class:BoblightServer
compareLightpacks	libsrc/leddevice/dev_hid/LedDeviceMultiLightpack.cpp	/^bool compareLightpacks(LedDeviceLightpack * lhs, LedDeviceLightpack * rhs)$/;"	f
component	include/api/apiStructs.h	/^    const hyperion::Components component;$/;"	m	struct:registerData
componentId	include/hyperion/PriorityMuxer.h	/^		hyperion::Components componentId;$/;"	m	struct:PriorityMuxer::InputInfo
componentState	include/leddevice/LedDevice.h	/^	inline bool componentState() const { return isEnabled(); }$/;"	f	class:LedDevice
componentStateChange	libsrc/hyperion/LinearColorSmoothing.cpp	/^void LinearColorSmoothing::componentStateChange(const hyperion::Components component, const bool state)$/;"	f	class:LinearColorSmoothing
componentToIdString	include/utils/Components.h	/^inline const char* componentToIdString(Components c)$/;"	f	namespace:hyperion
componentToString	include/utils/Components.h	/^inline const char* componentToString(Components c)$/;"	f	namespace:hyperion
conf	libsrc/leddevice/dev_net/ProviderUdpSSL.h	/^	mbedtls_ssl_config           conf;$/;"	m	class:ProviderUdpSSL
configLog	libsrc/leddevice/dev_net/ProviderUdpSSL.cpp	/^void ProviderUdpSSL::configLog(const char* msg, const char* type, ...)$/;"	f	class:ProviderUdpSSL
connectToHost	libsrc/flatbufserver/FlatBufferConnection.cpp	/^void FlatBufferConnection::connectToHost()$/;"	f	class:FlatBufferConnection
construct	libsrc/leddevice/LedDeviceFactory.cpp	/^LedDevice * LedDeviceFactory::construct(const QJsonObject & deviceConfig)$/;"	f	class:LedDeviceFactory
construct	libsrc/leddevice/LedDeviceTemplate.cpp	/^LedDevice* LedDeviceTemplate::construct(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceTemplate
construct	libsrc/leddevice/dev_hid/LedDeviceHyperionUsbasp.cpp	/^LedDevice* LedDeviceHyperionUsbasp::construct(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceHyperionUsbasp
construct	libsrc/leddevice/dev_hid/LedDeviceLightpack.cpp	/^LedDevice* LedDeviceLightpack::construct(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceLightpack
construct	libsrc/leddevice/dev_hid/LedDeviceMultiLightpack.cpp	/^LedDevice* LedDeviceMultiLightpack::construct(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceMultiLightpack
construct	libsrc/leddevice/dev_hid/LedDevicePaintpack.cpp	/^LedDevice* LedDevicePaintpack::construct(const QJsonObject &deviceConfig)$/;"	f	class:LedDevicePaintpack
construct	libsrc/leddevice/dev_hid/LedDeviceRawHID.cpp	/^LedDevice* LedDeviceRawHID::construct(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceRawHID
construct	libsrc/leddevice/dev_net/LedDeviceAtmoOrb.cpp	/^LedDevice* LedDeviceAtmoOrb::construct(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceAtmoOrb
construct	libsrc/leddevice/dev_net/LedDeviceFadeCandy.cpp	/^LedDevice* LedDeviceFadeCandy::construct(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceFadeCandy
construct	libsrc/leddevice/dev_net/LedDeviceNanoleaf.cpp	/^LedDevice* LedDeviceNanoleaf::construct(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceNanoleaf
construct	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^LedDevice* LedDevicePhilipsHue::construct(const QJsonObject &deviceConfig)$/;"	f	class:LedDevicePhilipsHue
construct	libsrc/leddevice/dev_net/LedDeviceTpm2net.cpp	/^LedDevice* LedDeviceTpm2net::construct(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceTpm2net
construct	libsrc/leddevice/dev_net/LedDeviceUdpArtNet.cpp	/^LedDevice* LedDeviceUdpArtNet::construct(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceUdpArtNet
construct	libsrc/leddevice/dev_net/LedDeviceUdpE131.cpp	/^LedDevice* LedDeviceUdpE131::construct(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceUdpE131
construct	libsrc/leddevice/dev_net/LedDeviceUdpH801.cpp	/^LedDevice* LedDeviceUdpH801::construct(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceUdpH801
construct	libsrc/leddevice/dev_net/LedDeviceUdpRaw.cpp	/^LedDevice* LedDeviceUdpRaw::construct(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceUdpRaw
construct	libsrc/leddevice/dev_net/LedDeviceWled.cpp	/^LedDevice* LedDeviceWled::construct(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceWled
construct	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^LedDevice* LedDeviceYeelight::construct(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceYeelight
construct	libsrc/leddevice/dev_other/LedDeviceFile.cpp	/^LedDevice* LedDeviceFile::construct(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceFile
construct	libsrc/leddevice/dev_other/LedDevicePiBlaster.cpp	/^LedDevice* LedDevicePiBlaster::construct(const QJsonObject &deviceConfig)$/;"	f	class:LedDevicePiBlaster
construct	libsrc/leddevice/dev_rpi_pwm/LedDeviceWS281x.cpp	/^LedDevice* LedDeviceWS281x::construct(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceWS281x
construct	libsrc/leddevice/dev_serial/LedDeviceAdalight.cpp	/^LedDevice* LedDeviceAdalight::construct(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceAdalight
construct	libsrc/leddevice/dev_serial/LedDeviceAtmo.cpp	/^LedDevice* LedDeviceAtmo::construct(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceAtmo
construct	libsrc/leddevice/dev_serial/LedDeviceDMX.cpp	/^LedDevice* LedDeviceDMX::construct(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceDMX
construct	libsrc/leddevice/dev_serial/LedDeviceKarate.cpp	/^LedDevice* LedDeviceKarate::construct(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceKarate
construct	libsrc/leddevice/dev_serial/LedDeviceSedu.cpp	/^LedDevice* LedDeviceSedu::construct(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceSedu
construct	libsrc/leddevice/dev_serial/LedDeviceTpm2.cpp	/^LedDevice* LedDeviceTpm2::construct(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceTpm2
construct	libsrc/leddevice/dev_spi/LedDeviceAPA102.cpp	/^LedDevice* LedDeviceAPA102::construct(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceAPA102
construct	libsrc/leddevice/dev_spi/LedDeviceAPA104.cpp	/^LedDevice* LedDeviceAPA104::construct(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceAPA104
construct	libsrc/leddevice/dev_spi/LedDeviceLpd6803.cpp	/^LedDevice* LedDeviceLpd6803::construct(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceLpd6803
construct	libsrc/leddevice/dev_spi/LedDeviceLpd8806.cpp	/^LedDevice* LedDeviceLpd8806::construct(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceLpd8806
construct	libsrc/leddevice/dev_spi/LedDeviceP9813.cpp	/^LedDevice* LedDeviceP9813::construct(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceP9813
construct	libsrc/leddevice/dev_spi/LedDeviceSk6812SPI.cpp	/^LedDevice* LedDeviceSk6812SPI::construct(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceSk6812SPI
construct	libsrc/leddevice/dev_spi/LedDeviceSk6822SPI.cpp	/^LedDevice* LedDeviceSk6822SPI::construct(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceSk6822SPI
construct	libsrc/leddevice/dev_spi/LedDeviceWs2801.cpp	/^LedDevice* LedDeviceWs2801::construct(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceWs2801
construct	libsrc/leddevice/dev_spi/LedDeviceWs2812SPI.cpp	/^LedDevice* LedDeviceWs2812SPI::construct(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceWs2812SPI
construct	libsrc/leddevice/dev_tinker/LedDeviceTinkerforge.cpp	/^LedDevice* LedDeviceTinkerforge::construct(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceTinkerforge
copy	include/utils/Image.h	/^	void copy(const Image<Pixel_T>& other)$/;"	f	class:Image
create	include/utils/jsonschema/QJsonUtils.h	/^	static QJsonValue create(QJsonValue schema, bool ignoreRequired = false)$/;"	f	class:QJsonUtils
createColorAdjustment	include/utils/hyperion.h	/^	ColorAdjustment* createColorAdjustment(const QJsonObject & adjustmentConfig)$/;"	f	namespace:hyperion
createColorOrder	include/utils/hyperion.h	/^	ColorOrder createColorOrder(const QJsonObject &deviceConfig)$/;"	f	namespace:hyperion
createColumn	libsrc/db/DBManager.cpp	/^bool DBManager::createColumn(const QString& column) const$/;"	f	class:DBManager
createInstance	include/db/InstanceTable.h	/^	inline bool createInstance(const QString& name, quint8& inst)$/;"	f	class:InstanceTable
createInstance	include/db/InstanceTable.h	/^	inline void createInstance()$/;"	f	class:InstanceTable
createInstance	libsrc/api/API.cpp	/^QString API::createInstance(const QString &name)$/;"	f	class:API
createInstance	libsrc/hyperion/HyperionIManager.cpp	/^bool HyperionIManager::createInstance(const QString& name, const bool& start)$/;"	f	class:HyperionIManager
createLedColorsAdjustment	include/utils/hyperion.h	/^	MultiColorAdjustment * createLedColorsAdjustment(const unsigned ledCnt, const QJsonObject & colorConfig)$/;"	f	namespace:hyperion
createLedDevice	libsrc/leddevice/LedDeviceWrapper.cpp	/^void LedDeviceWrapper::createLedDevice(const QJsonObject& config)$/;"	f	class:LedDeviceWrapper
createLedString	include/utils/hyperion.h	/^	LedString createLedString(const QJsonArray& ledConfigArray, const ColorOrder deviceOrder)$/;"	f	namespace:hyperion
createRecord	libsrc/db/DBManager.cpp	/^bool DBManager::createRecord(const VectorPair& conditions, const QVariantMap& columns) const$/;"	f	class:DBManager
createRgbChannelAdjustment	include/utils/hyperion.h	/^	RgbChannelAdjustment createRgbChannelAdjustment(const QJsonObject& colorConfig, const QString& channelName, const int defaultR, const int defaultG, const int defaultB)$/;"	f	namespace:hyperion
createRgbTransform	include/utils/hyperion.h	/^	RgbTransform createRgbTransform(const QJsonObject& colorConfig)$/;"	f	namespace:hyperion
createSettingsRecord	include/db/SettingsTable.h	/^	inline bool createSettingsRecord(const QString& type, const QString& config) const$/;"	f	class:SettingsTable
createTable	libsrc/db/DBManager.cpp	/^bool DBManager::createTable(QStringList& columns) const$/;"	f	class:DBManager
createToken	include/db/AuthTable.h	/^	inline bool createToken(const QString& token, const QString& comment, const QString& id)$/;"	f	class:AuthTable
createToken	libsrc/api/API.cpp	/^QString API::createToken(const QString &comment, AuthManager::AuthDefinition &def)$/;"	f	class:API
createToken	libsrc/hyperion/AuthManager.cpp	/^AuthManager::AuthDefinition AuthManager::createToken(const QString &comment)$/;"	f	class:AuthManager
createUser	include/db/AuthTable.h	/^	inline bool createUser(const QString& user, const QString& pw)$/;"	f	class:AuthTable
createValue	include/utils/jsonschema/QJsonUtils.h	/^	static QJsonValue createValue(QJsonValue schema, bool ignoreRequired)$/;"	f	class:QJsonUtils
crossProduct	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^double CiColor::crossProduct(XYColor p1, XYColor p2)$/;"	f	class:CiColor
ctr_drbg	libsrc/leddevice/dev_net/ProviderUdpSSL.h	/^	mbedtls_ctr_drbg_context     ctr_drbg;$/;"	m	class:ProviderUdpSSL
currentBonjourRecordsChanged	libsrc/bonjour/bonjourbrowserwrapper.cpp	/^void BonjourBrowserWrapper::currentBonjourRecordsChanged(const QList<BonjourRecord> &list)$/;"	f	class:BonjourBrowserWrapper
currentRecords	include/bonjour/bonjourservicebrowser.h	/^	inline QList<BonjourRecord> currentRecords() const { return bonjourRecords; }$/;"	f	class:BonjourServiceBrowser
data	include/api/apiStructs.h	/^    QByteArray data;$/;"	m	struct:ImageCmdData
data	include/api/apiStructs.h	/^    QString data;$/;"	m	struct:EffectCmdData
decipher_trace	libsrc/utils/DefaultSignalHandler.cpp	/^std::string decipher_trace(const std::string &trace)$/;"	f	namespace:DefaultSignalHandler
deleteEffect	libsrc/api/API.cpp	/^QString API::deleteEffect(const QString &name)$/;"	f	class:API
deleteEffect	libsrc/effectengine/EffectEngine.cpp	/^QString EffectEngine::deleteEffect(const QString& effectName)$/;"	f	class:EffectEngine
deleteEffect	libsrc/effectengine/EffectFileHandler.cpp	/^QString EffectFileHandler::deleteEffect(const QString& effectName)$/;"	f	class:EffectFileHandler
deleteEffect	libsrc/hyperion/Hyperion.cpp	/^QString Hyperion::deleteEffect(const QString& effectName)$/;"	f	class:Hyperion
deleteInstance	include/db/InstanceTable.h	/^	inline bool deleteInstance(const quint8& inst)$/;"	f	class:InstanceTable
deleteInstance	include/db/SettingsTable.h	/^	inline void deleteInstance() const$/;"	f	class:SettingsTable
deleteInstance	libsrc/api/API.cpp	/^bool API::deleteInstance(const quint8 &index, QString &replyMsg)$/;"	f	class:API
deleteInstance	libsrc/hyperion/HyperionIManager.cpp	/^bool HyperionIManager::deleteInstance(const quint8& inst)$/;"	f	class:HyperionIManager
deleteInstance	libsrc/utils/Logger.cpp	/^void Logger::deleteInstance(QString name)$/;"	f	class:Logger
deleteRecord	libsrc/db/DBManager.cpp	/^bool DBManager::deleteRecord(const VectorPair& conditions) const$/;"	f	class:DBManager
deleteTable	libsrc/db/DBManager.cpp	/^bool DBManager::deleteTable(const QString& table) const$/;"	f	class:DBManager
deleteToken	include/db/AuthTable.h	/^	inline bool deleteToken(const QString& id)$/;"	f	class:AuthTable
deleteToken	libsrc/api/API.cpp	/^QString API::deleteToken(const QString &id)$/;"	f	class:API
deleteToken	libsrc/hyperion/AuthManager.cpp	/^bool AuthManager::deleteToken(const QString &id)$/;"	f	class:AuthManager
disableSmoothing	libsrc/leddevice/dev_hid/LedDeviceLightpack.cpp	/^int LedDeviceLightpack::disableSmoothing()$/;"	f	class:LedDeviceLightpack
disconnected	libsrc/flatbufserver/FlatBufferClient.cpp	/^void FlatBufferClient::disconnected()$/;"	f	class:FlatBufferClient
disconnected	libsrc/jsonserver/JsonClientConnection.cpp	/^void JsonClientConnection::disconnected(void)$/;"	f	class:JsonClientConnection
disconnected	libsrc/protoserver/ProtoClientConnection.cpp	/^void ProtoClientConnection::disconnected()$/;"	f	class:ProtoClientConnection
discover	libsrc/leddevice/LedDevice.cpp	/^QJsonObject LedDevice::discover()$/;"	f	class:LedDevice
discover	libsrc/leddevice/dev_hid/ProviderHID.cpp	/^QJsonObject ProviderHID::discover()$/;"	f	class:ProviderHID
discover	libsrc/leddevice/dev_net/LedDeviceNanoleaf.cpp	/^QJsonObject LedDeviceNanoleaf::discover()$/;"	f	class:LedDeviceNanoleaf
discover	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^QJsonObject LedDevicePhilipsHue::discover()$/;"	f	class:LedDevicePhilipsHue
discover	libsrc/leddevice/dev_net/LedDeviceWled.cpp	/^QJsonObject LedDeviceWled::discover()$/;"	f	class:LedDeviceWled
discover	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^QJsonObject LedDeviceYeelight::discover()$/;"	f	class:LedDeviceYeelight
discover	libsrc/leddevice/dev_serial/ProviderRs232.cpp	/^QJsonObject ProviderRs232::discover()$/;"	f	class:ProviderRs232
discoverFirst	libsrc/leddevice/LedDevice.cpp	/^QString LedDevice::discoverFirst()$/;"	f	class:LedDevice
discoverFirst	libsrc/leddevice/dev_serial/ProviderRs232.cpp	/^QString ProviderRs232::discoverFirst()$/;"	f	class:ProviderRs232
discoverServices	libsrc/ssdp/SSDPDiscover.cpp	/^int SSDPDiscover::discoverServices(const QString& searchTarget, const QString& key)$/;"	f	class:SSDPDiscover
dmp_flength	libsrc/leddevice/dev_net/LedDeviceUdpE131.h	/^		uint16_t dmp_flength;$/;"	m	struct:__anon6::__anon7
dmp_vector	libsrc/leddevice/dev_net/LedDeviceUdpE131.h	/^		uint8_t  dmp_vector;$/;"	m	struct:__anon6::__anon7
dnssref	include/bonjour/bonjourservicebrowser.h	/^	DNSServiceRef dnssref;$/;"	m	class:BonjourServiceBrowser
dnssref	include/bonjour/bonjourserviceregister.h	/^    DNSServiceRef dnssref;$/;"	m	class:BonjourServiceRegister
dnssref	include/bonjour/bonjourserviceresolver.h	/^    DNSServiceRef dnssref;$/;"	m	class:BonjourServiceResolver
doAddBindValue	libsrc/db/DBManager.cpp	/^void DBManager::doAddBindValue(QSqlQuery& query, const QVariantList& variants) const$/;"	f	class:DBManager
doCallback	libsrc/api/JsonCB.cpp	/^void JsonCB::doCallback(const QString& cmd, const QVariant& data)$/;"	f	class:JsonCB
domainName	include/utils/SysInfo.h	/^		QString domainName;$/;"	m	struct:SysInfo::HyperionSysInfo
duration	include/api/apiStructs.h	/^    int duration;$/;"	m	struct:EffectCmdData
duration	include/api/apiStructs.h	/^    int64_t duration;$/;"	m	struct:ImageCmdData
e131_packet	libsrc/leddevice/dev_net/LedDeviceUdpE131.h	/^	e131_packet_t e131_packet;$/;"	m	class:LedDeviceUdpE131
e131_packet_t	libsrc/leddevice/dev_net/LedDeviceUdpE131.h	/^} e131_packet_t;$/;"	t	typeref:union:__anon6
e131debug	libsrc/leddevice/dev_net/LedDeviceUdpE131.cpp	137;"	d	file:
effectFinished	libsrc/effectengine/EffectEngine.cpp	/^void EffectEngine::effectFinished()$/;"	f	class:EffectEngine
effectMethods	include/effectengine/EffectModule.h	/^	static PyMethodDef effectMethods[];$/;"	m	class:EffectModule
effectMethods	libsrc/effectengine/EffectModule.cpp	/^PyMethodDef EffectModule::effectMethods[] = {$/;"	m	class:EffectModule	file:
effectName	include/api/apiStructs.h	/^    QString effectName;$/;"	m	struct:EffectCmdData
effectName	libsrc/effectengine/EffectFileHandler.cpp	/^	QString effectName;$/;"	m	struct:find_effect	file:
efhInstance	include/effectengine/EffectFileHandler.h	/^	static EffectFileHandler* efhInstance;$/;"	m	class:EffectFileHandler
efhInstance	libsrc/effectengine/EffectFileHandler.cpp	/^EffectFileHandler* EffectFileHandler::efhInstance;$/;"	m	class:EffectFileHandler	file:
enabled	libsrc/blackborder/BlackBorderProcessor.cpp	/^bool BlackBorderProcessor::enabled() const$/;"	f	class:BlackBorderProcessor
enabled	libsrc/hyperion/LinearColorSmoothing.h	/^	bool enabled() const { return _enabled && !_pause; }$/;"	f	class:LinearColorSmoothing
enabled	libsrc/leddevice/LedDeviceWrapper.cpp	/^bool LedDeviceWrapper::enabled()$/;"	f	class:LedDeviceWrapper
entropy	libsrc/leddevice/dev_net/ProviderUdpSSL.h	/^	mbedtls_entropy_context      entropy;$/;"	m	class:ProviderUdpSSL
enumFrameIntervals	libsrc/grabber/v4l2/V4L2Grabber.cpp	/^void V4L2Grabber::enumFrameIntervals(QStringList &framerates, int fileDescriptor, int pixelformat, int width, int height)$/;"	f	class:V4L2Grabber
error	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	API_REPLY error() { return _error;}$/;"	f	class:YeelightResponse
error	libsrc/leddevice/dev_net/ProviderRestApi.h	/^	bool error() { return _hasError;}$/;"	f	class:httpResponse
errorHandler	include/grabber/V4L2Grabber.h	/^	static void errorHandler(j_common_ptr cInfo)$/;"	f	class:V4L2Grabber
errorManager	include/grabber/V4L2Grabber.h	/^	struct errorManager$/;"	s	class:V4L2Grabber
errorMsg	libsrc/leddevice/dev_net/ProviderUdpSSL.cpp	/^QString ProviderUdpSSL::errorMsg(int ret) {$/;"	f	class:ProviderUdpSSL
errorText	libsrc/commandline/Parser.cpp	/^QString Parser::errorText() const$/;"	f	class:Parser
exec	libsrc/webserver/CgiHandler.cpp	/^void CgiHandler::exec(const QStringList & args, QtHttpRequest * request, QtHttpReply * reply)$/;"	f	class:CgiHandler
exportHandle	libsrc/grabber/amlogic/IonBuffer.h	/^	int exportHandle = 0;$/;"	m	class:IonBuffer
fd	libsrc/grabber/amlogic/ion.h	/^	int fd;$/;"	m	struct:ion_fd_data
file	include/effectengine/EffectDefinition.h	/^	QString name, script, file;$/;"	m	struct:EffectDefinition
fileExists	libsrc/utils/FileUtils.cpp	/^	bool fileExists(const QString& path, Logger* log, bool ignError)$/;"	f	namespace:FileUtils
fileName	include/utils/Logger.h	/^		QString      fileName;$/;"	m	struct:Logger::__anon16
fin	libsrc/webserver/WebSocketClient.h	/^		bool          fin;$/;"	m	struct:WebSocketClient::WebSocketHeader
finalRecord	include/bonjour/bonjourserviceregister.h	/^    BonjourRecord finalRecord;$/;"	m	class:BonjourServiceRegister
find_effect	libsrc/effectengine/EffectFileHandler.cpp	/^	find_effect(QString effectName) :effectName(effectName) { }$/;"	f	struct:find_effect
find_effect	libsrc/effectengine/EffectFileHandler.cpp	/^struct find_effect: std::unary_function<EffectDefinition, bool>$/;"	s	file:
find_schema	libsrc/effectengine/EffectFileHandler.cpp	/^	find_schema(QString pyFile):pyFile(pyFile) { }$/;"	f	struct:find_schema
find_schema	libsrc/effectengine/EffectFileHandler.cpp	/^struct find_schema: std::unary_function<EffectSchema, bool>$/;"	s	file:
finishConnect	libsrc/bonjour/bonjourserviceresolver.cpp	/^void BonjourServiceResolver::finishConnect(const QHostInfo &hostInfo)$/;"	f	class:BonjourServiceResolver
first_address	libsrc/leddevice/dev_net/LedDeviceUdpE131.h	/^		uint16_t first_address;$/;"	m	struct:__anon6::__anon7
flags	libsrc/grabber/amlogic/ion.h	/^	unsigned int flags;$/;"	m	struct:ion_allocation_data
flatbuf	libsrc/flatbufserver/FlatBufferClient.h	/^namespace flatbuf {$/;"	n
forceClose	libsrc/flatbufserver/FlatBufferClient.cpp	/^void FlatBufferClient::forceClose()$/;"	f	class:FlatBufferClient
forceClose	libsrc/protoserver/ProtoClientConnection.cpp	/^void ProtoClientConnection::forceClose()$/;"	f	class:ProtoClientConnection
format	include/api/apiStructs.h	/^    QString format;$/;"	m	struct:ImageCmdData
forwardFlatbufferMessage	libsrc/hyperion/MessageForwarder.cpp	/^void MessageForwarder::forwardFlatbufferMessage(const QString& name, const Image<ColorRgb> &image)$/;"	f	class:MessageForwarder
forwardJsonMessage	libsrc/hyperion/MessageForwarder.cpp	/^void MessageForwarder::forwardJsonMessage(const QJsonObject &message)$/;"	f	class:MessageForwarder
frame_flength	libsrc/leddevice/dev_net/LedDeviceUdpE131.h	/^		uint16_t frame_flength;$/;"	m	struct:__anon6::__anon7
frame_vector	libsrc/leddevice/dev_net/LedDeviceUdpE131.h	/^		uint32_t frame_vector;$/;"	m	struct:__anon6::__anon7
framerates	include/grabber/V4L2Grabber.h	/^		QStringList				framerates	= QStringList();$/;"	m	struct:V4L2Grabber::DeviceProperties
freeObjects	libsrc/hyperion/Hyperion.cpp	/^void Hyperion::freeObjects(bool emitCloseSignal)$/;"	f	class:Hyperion
freeResources	libsrc/grabber/dispmanx/DispmanxFrameGrabber.cpp	/^void DispmanxFrameGrabber::freeResources()$/;"	f	class:DispmanxFrameGrabber
freeResources	libsrc/grabber/qt/QtGrabber.cpp	/^void QtGrabber::freeResources()$/;"	f	class:QtGrabber
freeResources	libsrc/grabber/x11/X11Grabber.cpp	/^void X11Grabber::freeResources()$/;"	f	class:X11Grabber
freeSSLConnection	libsrc/leddevice/dev_net/ProviderUdpSSL.cpp	/^void ProviderUdpSSL::freeSSLConnection()$/;"	f	class:ProviderUdpSSL
func	libsrc/utils/Profiler.cpp	/^	const char* func;$/;"	m	struct:StopWatchItem	file:
function	include/utils/Logger.h	/^		QString      function;$/;"	m	struct:Logger::__anon16
geometryChanged	libsrc/grabber/qt/QtGrabber.cpp	/^void QtGrabber::geometryChanged(const QRect &geo)$/;"	f	class:QtGrabber
get	libsrc/leddevice/dev_net/ProviderRestApi.cpp	/^httpResponse ProviderRestApi::get()$/;"	f	class:ProviderRestApi
get	libsrc/leddevice/dev_net/ProviderRestApi.cpp	/^httpResponse ProviderRestApi::get(const QUrl &url)$/;"	f	class:ProviderRestApi
get	libsrc/utils/SysInfo.cpp	/^SysInfo::HyperionSysInfo SysInfo::get()$/;"	f	class:SysInfo
getActiveDeviceType	include/leddevice/LedDevice.h	/^	const QString & getActiveDeviceType() const { return _activeDeviceType; }$/;"	f	class:LedDevice
getActiveDeviceType	libsrc/hyperion/Hyperion.cpp	/^const QString & Hyperion::getActiveDeviceType()$/;"	f	class:Hyperion
getActiveDeviceType	libsrc/leddevice/LedDeviceWrapper.cpp	/^const QString & LedDeviceWrapper::getActiveDeviceType()$/;"	f	class:LedDeviceWrapper
getActiveEffects	libsrc/effectengine/EffectEngine.cpp	/^const std::list<ActiveEffectDefinition> &EffectEngine::getActiveEffects()$/;"	f	class:EffectEngine
getActiveEffects	libsrc/hyperion/Hyperion.cpp	/^const std::list<ActiveEffectDefinition> & Hyperion::getActiveEffects()$/;"	f	class:Hyperion
getActivePriorities	libsrc/hyperion/Hyperion.cpp	/^QList<int> Hyperion::getActivePriorities() const$/;"	f	class:Hyperion
getAdjustment	libsrc/hyperion/Hyperion.cpp	/^ColorAdjustment * Hyperion::getAdjustment(const QString& id)$/;"	f	class:Hyperion
getAdjustment	libsrc/hyperion/MultiColorAdjustment.cpp	/^ColorAdjustment* MultiColorAdjustment::getAdjustment(const QString& id)$/;"	f	class:MultiColorAdjustment
getAdjustmentB	libsrc/utils/RgbChannelAdjustment.cpp	/^uint8_t RgbChannelAdjustment::getAdjustmentB() const$/;"	f	class:RgbChannelAdjustment
getAdjustmentG	libsrc/utils/RgbChannelAdjustment.cpp	/^uint8_t RgbChannelAdjustment::getAdjustmentG() const$/;"	f	class:RgbChannelAdjustment
getAdjustmentIds	libsrc/hyperion/Hyperion.cpp	/^const QStringList & Hyperion::getAdjustmentIds() const$/;"	f	class:Hyperion
getAdjustmentIds	libsrc/hyperion/MultiColorAdjustment.cpp	/^const QStringList & MultiColorAdjustment::getAdjustmentIds()$/;"	f	class:MultiColorAdjustment
getAdjustmentR	libsrc/utils/RgbChannelAdjustment.cpp	/^uint8_t RgbChannelAdjustment::getAdjustmentR() const$/;"	f	class:RgbChannelAdjustment
getAllBridgeInfos	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^QJsonDocument LedDevicePhilipsHueBridge::getAllBridgeInfos()$/;"	f	class:LedDevicePhilipsHueBridge
getAllComponents	libsrc/api/API.cpp	/^std::map<hyperion::Components, bool> API::getAllComponents()$/;"	f	class:API
getAllComponents	libsrc/hyperion/Hyperion.cpp	/^std::map<hyperion::Components, bool> Hyperion::getAllComponents()$/;"	f	class:Hyperion
getAllInstanceData	libsrc/api/API.cpp	/^QVector<QVariantMap> API::getAllInstanceData(void)$/;"	f	class:API
getAllInstances	include/db/InstanceTable.h	/^	inline QVector<QVariantMap> getAllInstances(const bool& justEnabled = false)$/;"	f	class:InstanceTable
getAllServices	include/bonjour/bonjourbrowserwrapper.h	/^	QMap<QString,BonjourRecord> getAllServices() { return _hyperionSessions; };$/;"	f	class:BonjourBrowserWrapper
getArgs	include/effectengine/Effect.h	/^	QJsonObject getArgs() const { return _args; }$/;"	f	class:Effect
getAutoCorrectedConfig	libsrc/utils/jsonschema/QJsonSchemaChecker.cpp	/^QJsonObject QJsonSchemaChecker::getAutoCorrectedConfig(const QJsonObject& value, bool ignoreRequired)$/;"	f	class:QJsonSchemaChecker
getBackLightEnabled	libsrc/utils/RgbTransform.cpp	/^bool RgbTransform::getBackLightEnabled() const$/;"	f	class:RgbTransform
getBacklightColored	libsrc/utils/RgbTransform.cpp	/^bool RgbTransform::getBacklightColored() const$/;"	f	class:RgbTransform
getBacklightThreshold	libsrc/utils/RgbTransform.cpp	/^int RgbTransform::getBacklightThreshold() const$/;"	f	class:RgbTransform
getBaseAddress	libsrc/ssdp/SSDPHandler.cpp	/^QString SSDPHandler::getBaseAddress() const$/;"	f	class:SSDPHandler
getBaseName	libsrc/utils/FileUtils.cpp	/^	QString getBaseName(QString sourceFile)$/;"	f	namespace:FileUtils
getBody	libsrc/leddevice/dev_net/ProviderRestApi.h	/^	QJsonDocument getBody() const { return _responseBody; }$/;"	f	class:httpResponse
getBrightness	libsrc/utils/RgbTransform.cpp	/^uint8_t RgbTransform::getBrightness() const$/;"	f	class:RgbTransform
getBrightnessCompensation	libsrc/utils/RgbTransform.cpp	/^uint8_t RgbTransform::getBrightnessCompensation() const$/;"	f	class:RgbTransform
getBrightnessComponents	libsrc/utils/RgbTransform.cpp	/^void RgbTransform::getBrightnessComponents(uint8_t & rgb, uint8_t & cmy, uint8_t & w) const$/;"	f	class:RgbTransform
getCString	libsrc/commandline/Option.cpp	/^const char* Option::getCString(Parser &parser)$/;"	f	class:Option
getCertificates	libsrc/webserver/QtHttpServer.h	/^	QList<QSslCertificate> getCertificates() 					{ return m_sslCerts; };$/;"	f	class:QtHttpServer
getCiphersuites	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const int *LedDevicePhilipsHueBridge::getCiphersuites()$/;"	f	class:LedDevicePhilipsHueBridge
getCiphersuites	libsrc/leddevice/dev_net/ProviderUdpSSL.cpp	/^const int *ProviderUdpSSL::getCiphersuites()$/;"	f	class:ProviderUdpSSL
getClient	libsrc/webserver/QtHttpRequest.h	/^	QtHttpClientWrapper * getClient      (void) const { return m_clientHandle;        };$/;"	f	class:QtHttpRequest
getClientInfo	libsrc/webserver/QtHttpRequest.h	/^	ClientInfo            getClientInfo  (void) const { return m_clientInfo;          };$/;"	f	class:QtHttpRequest
getClockDelta	libsrc/utils/Profiler.cpp	/^double getClockDelta(clock_t start)$/;"	f
getClosestPointToPoint	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^XYColor CiColor::getClosestPointToPoint(XYColor a, XYColor b, CiColor p)$/;"	f	class:CiColor
getColor	include/commandline/ColorOption.h	/^    QColor getColor(Parser &parser)$/;"	f	class:commandline::ColorOption
getColor	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^CiColor PhilipsHueLight::getColor() const$/;"	f	class:PhilipsHueLight
getColorOrder	include/leddevice/LedDevice.h	/^	const QString & getColorOrder() const { return _colorOrder; }$/;"	f	class:LedDevice
getColorOrder	libsrc/leddevice/LedDeviceWrapper.cpp	/^const QString & LedDeviceWrapper::getColorOrder()$/;"	f	class:LedDeviceWrapper
getColorSpace	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^CiColorTriangle PhilipsHueLight::getColorSpace() const$/;"	f	class:PhilipsHueLight
getColors	include/commandline/ColorsOption.h	/^    QList<QColor> &getColors(Parser &parser)$/;"	f	class:commandline::ColorsOption
getCommand	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^QJsonDocument YeelightLight::getCommand(const QString &method, const QJsonArray &params)$/;"	f	class:YeelightLight
getCommand	libsrc/webserver/QtHttpRequest.h	/^	QString               getCommand     (void) const { return m_command;             };$/;"	f	class:QtHttpRequest
getCommands	include/api/JsonCB.h	/^	QStringList getCommands() { return _availableCommands; };$/;"	f	class:JsonCB
getComponentOfPriority	libsrc/hyperion/PriorityMuxer.cpp	/^hyperion::Components PriorityMuxer::getComponentOfPriority(const int &priority)$/;"	f	class:PriorityMuxer
getComponentRegister	include/hyperion/Hyperion.h	/^	ComponentRegister& getComponentRegister() { return _componentRegister; }$/;"	f	class:Hyperion
getCurrentBorder	libsrc/blackborder/BlackBorderProcessor.cpp	/^BlackBorder BlackBorderProcessor::getCurrentBorder() const$/;"	f	class:BlackBorderProcessor
getCurrentPriority	include/hyperion/PriorityMuxer.h	/^	int getCurrentPriority() const { return _currentPriority; }$/;"	f	class:PriorityMuxer
getCurrentPriority	libsrc/hyperion/Hyperion.cpp	/^int Hyperion::getCurrentPriority() const$/;"	f	class:Hyperion
getCurrentVideoMode	libsrc/hyperion/Hyperion.cpp	/^const VideoMode & Hyperion::getCurrentVideoMode()$/;"	f	class:Hyperion
getDB	libsrc/db/DBManager.cpp	/^QSqlDatabase DBManager::getDB() const$/;"	f	class:DBManager
getDefaultValue	include/utils/jsonschema/QJsonUtils.h	/^	static QString getDefaultValue(const QJsonValue & value)$/;"	f	class:QJsonUtils
getDescAddress	libsrc/ssdp/SSDPHandler.cpp	/^QString SSDPHandler::getDescAddress() const$/;"	f	class:SSDPHandler
getDeviceMap	libsrc/leddevice/LedDeviceWrapper.cpp	/^const LedDeviceRegistry& LedDeviceWrapper::getDeviceMap()$/;"	f	class:LedDeviceWrapper
getDirName	libsrc/utils/FileUtils.cpp	/^	QString getDirName(QString sourceFile)$/;"	f	namespace:FileUtils
getDistanceBetweenTwoPoints	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^double CiColor::getDistanceBetweenTwoPoints(CiColor p1, XYColor p2)$/;"	f	class:CiColor
getDouble	libsrc/commandline/DoubleOption.cpp	/^double DoubleOption::getDouble(Parser &parser, bool *ok)$/;"	f	class:DoubleOption
getDoublePtr	libsrc/commandline/DoubleOption.cpp	/^double *DoubleOption::getDoublePtr(Parser &parser, bool *ok)$/;"	f	class:DoubleOption
getEffect	libsrc/effectengine/EffectModule.cpp	17;"	d	file:
getEffectEngineInstance	include/hyperion/Hyperion.h	/^	EffectEngine* getEffectEngineInstance() { return _effectEngine; }$/;"	f	class:Hyperion
getEffectSchemas	include/effectengine/EffectFileHandler.h	/^	const std::list<EffectSchema> & getEffectSchemas() { return _effectSchemas; };$/;"	f	class:EffectFileHandler
getEffectSchemas	libsrc/effectengine/EffectEngine.cpp	/^const std::list<EffectSchema> & EffectEngine::getEffectSchemas()$/;"	f	class:EffectEngine
getEffectSchemas	libsrc/hyperion/Hyperion.cpp	/^const std::list<EffectSchema> & Hyperion::getEffectSchemas()$/;"	f	class:Hyperion
getEffects	include/effectengine/EffectEngine.h	/^	const std::list<EffectDefinition> & getEffects() const { return _availableEffects; };$/;"	f	class:EffectEngine
getEffects	include/effectengine/EffectFileHandler.h	/^	const std::list<EffectDefinition> & getEffects() const { return _availableEffects; };$/;"	f	class:EffectFileHandler
getEffects	libsrc/hyperion/Hyperion.cpp	/^const std::list<EffectDefinition> & Hyperion::getEffects() const$/;"	f	class:Hyperion
getError	libsrc/commandline/Option.cpp	/^QString Option::getError()$/;"	f	class:Option
getErrorCode	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	int getErrorCode() const { return _errorCode; }$/;"	f	class:YeelightResponse
getErrorReason	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	QString getErrorReason() const { return _errorReason; }$/;"	f	class:YeelightResponse
getErrorReason	libsrc/leddevice/dev_net/ProviderRestApi.h	/^	QString getErrorReason() const { return _errorReason; }$/;"	f	class:httpResponse
getErrorString	libsrc/webserver/QtHttpServer.h	/^	QString getErrorString (void) const { return m_sockServer->errorString(); };$/;"	f	class:QtHttpServer
getFirstService	libsrc/ssdp/SSDPDiscover.cpp	/^const QString SSDPDiscover::getFirstService(const searchType& type, const QString& st, const int& timeout_ms)$/;"	f	class:SSDPDiscover
getFlatBufPort	include/ssdp/SSDPServer.h	/^	quint16 getFlatBufPort() { return _fbsPort.toInt(); };$/;"	f	class:SSDPServer
getFramerates	include/hyperion/Grabber.h	/^	virtual QStringList getFramerates(QString devicePath) { return QStringList(); }$/;"	f	class:Grabber
getFramerates	libsrc/grabber/v4l2/V4L2Grabber.cpp	/^QStringList V4L2Grabber::getFramerates(QString devicePath)$/;"	f	class:V4L2Grabber
getFramerates	libsrc/hyperion/GrabberWrapper.cpp	/^QStringList GrabberWrapper::getFramerates(QString devicePath)$/;"	f	class:GrabberWrapper
getGammaB	libsrc/utils/RgbTransform.cpp	/^double RgbTransform::getGammaB() const$/;"	f	class:RgbTransform
getGammaG	libsrc/utils/RgbTransform.cpp	/^double RgbTransform::getGammaG() const$/;"	f	class:RgbTransform
getGammaR	libsrc/utils/RgbTransform.cpp	/^double RgbTransform::getGammaR() const$/;"	f	class:RgbTransform
getGroupLights	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^QJsonArray LedDevicePhilipsHueBridge::getGroupLights(quint16 groupId)$/;"	f	class:LedDevicePhilipsHueBridge
getGroupMap	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const QMap<quint16,QJsonObject>& LedDevicePhilipsHueBridge::getGroupMap(void)$/;"	f	class:LedDevicePhilipsHueBridge
getGroupName	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^QString LedDevicePhilipsHueBridge::getGroupName(quint16 groupId)$/;"	f	class:LedDevicePhilipsHueBridge
getGroupState	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^QJsonDocument LedDevicePhilipsHueBridge::getGroupState(const unsigned int groupId)$/;"	f	class:LedDevicePhilipsHueBridge
getGuid	libsrc/webserver/QtHttpClientWrapper.cpp	/^QString QtHttpClientWrapper::getGuid (void)$/;"	f	class:QtHttpClientWrapper
getHeader	libsrc/webserver/QtHttpReply.h	/^	QByteArray getHeader (const QByteArray & header) const$/;"	f	class:QtHttpReply
getHeader	libsrc/webserver/QtHttpRequest.h	/^	QByteArray            getHeader      (const QByteArray & header) const$/;"	f	class:QtHttpRequest
getHeadersList	libsrc/webserver/QtHttpReply.h	/^	QList<QByteArray> getHeadersList (void) const { return m_headersHash.keys (); };$/;"	f	class:QtHttpReply
getHeadersList	libsrc/webserver/QtHttpRequest.h	/^	QList<QByteArray>     getHeadersList (void) const { return m_headersHash.keys (); };$/;"	f	class:QtHttpRequest
getHttpStatusCode	libsrc/leddevice/dev_net/ProviderRestApi.h	/^	int getHttpStatusCode() const { return _httpStatusCode; }$/;"	f	class:httpResponse
getHyperionInstance	libsrc/hyperion/HyperionIManager.cpp	/^Hyperion* HyperionIManager::getHyperionInstance(const quint8& instance)$/;"	f	class:HyperionIManager
getHyperionName	include/ssdp/SSDPServer.h	/^	QString getHyperionName() { return _name; };$/;"	f	class:SSDPServer
getID	include/hyperion/AuthManager.h	/^	const QString &getID() { return _uuid; };$/;"	f	class:AuthManager
getId	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^unsigned int PhilipsHueLight::getId() const$/;"	f	class:PhilipsHueLight
getImage	include/commandline/ImageOption.h	/^    QImage &getImage(Parser &parser)$/;"	f	class:commandline::ImageOption
getImageHeight	include/hyperion/Grabber.h	/^	virtual int getImageHeight() { return _height; }$/;"	f	class:Grabber
getImageProcessor	include/hyperion/Hyperion.h	/^	ImageProcessor* getImageProcessor() { return _imageProcessor; }$/;"	f	class:Hyperion
getImageWidth	include/hyperion/Grabber.h	/^	virtual int getImageWidth() { return _width; }$/;"	f	class:Grabber
getInputInfo	libsrc/hyperion/PriorityMuxer.cpp	/^const PriorityMuxer::InputInfo PriorityMuxer::getInputInfo(const int priority) const$/;"	f	class:PriorityMuxer
getInstance	include/bonjour/bonjourbrowserwrapper.h	/^	static BonjourBrowserWrapper* getInstance(){ return instance; };$/;"	f	class:BonjourBrowserWrapper
getInstance	include/effectengine/EffectFileHandler.h	/^	static EffectFileHandler* getInstance() { return efhInstance; };$/;"	f	class:EffectFileHandler
getInstance	include/hyperion/AuthManager.h	/^	static AuthManager *getInstance() { return manager; };$/;"	f	class:AuthManager
getInstance	include/hyperion/GrabberWrapper.h	/^	static GrabberWrapper* getInstance(){ return instance; }$/;"	f	class:GrabberWrapper
getInstance	include/hyperion/HyperionIManager.h	/^	static HyperionIManager* getInstance() { return HIMinstance; }$/;"	f	class:HyperionIManager
getInstance	include/utils/GlobalSignals.h	/^    static GlobalSignals* getInstance()$/;"	f	class:GlobalSignals
getInstance	include/utils/NetOrigin.h	/^	static NetOrigin* getInstance(){ return instance; };$/;"	f	class:NetOrigin
getInstance	libsrc/utils/Logger.cpp	/^Logger* Logger::getInstance(QString name, Logger::LogLevel minLevel)$/;"	f	class:Logger
getInstance	libsrc/utils/Logger.cpp	/^LoggerManager* LoggerManager::getInstance()$/;"	f	class:LoggerManager
getInstanceData	libsrc/hyperion/HyperionIManager.cpp	/^const QVector<QVariantMap> HyperionIManager::getInstanceData()$/;"	f	class:HyperionIManager
getInstanceIndex	include/hyperion/Hyperion.h	/^	const quint8 & getInstanceIndex() { return _instIndex; }$/;"	f	class:Hyperion
getInt	libsrc/commandline/IntOption.cpp	/^int IntOption::getInt(Parser &parser, bool *ok, int base)$/;"	f	class:IntOption
getIntPtr	libsrc/commandline/IntOption.cpp	/^int *IntOption::getIntPtr(Parser &parser, bool *ok, int base)$/;"	f	class:IntOption
getJsonServerPort	include/ssdp/SSDPServer.h	/^	quint16 getJsonServerPort() { return _jssPort.toInt(); };$/;"	f	class:SSDPServer
getLatchTime	include/leddevice/LedDevice.h	/^	int getLatchTime() const { return _latchTime_ms; }$/;"	f	class:LedDevice
getLatchTime	libsrc/hyperion/Hyperion.cpp	/^int Hyperion::getLatchTime() const$/;"	f	class:Hyperion
getLatchTime	libsrc/leddevice/LedDeviceWrapper.cpp	/^int LedDeviceWrapper::getLatchTime()$/;"	f	class:LedDeviceWrapper
getLedCount	include/leddevice/LedDevice.h	/^	unsigned int getLedCount() const { return _ledCount; }$/;"	f	class:LedDevice
getLedCount	libsrc/hyperion/Hyperion.cpp	/^unsigned Hyperion::getLedCount() const$/;"	f	class:Hyperion
getLedCount	libsrc/leddevice/LedDeviceWrapper.cpp	/^unsigned int LedDeviceWrapper::getLedCount() const$/;"	f	class:LedDeviceWrapper
getLedDeviceSchemas	libsrc/leddevice/LedDeviceWrapper.cpp	/^const QJsonObject LedDeviceWrapper::getLedDeviceSchemas()$/;"	f	class:LedDeviceWrapper
getLedGridSize	include/hyperion/Hyperion.h	/^	QSize getLedGridSize() const { return _ledGridSize; }$/;"	f	class:Hyperion
getLedLayoutGridSize	include/utils/hyperion.h	/^	QSize getLedLayoutGridSize(const QJsonArray& ledConfigArray)$/;"	f	namespace:hyperion
getLedMappingType	libsrc/hyperion/Hyperion.cpp	/^const int & Hyperion::getLedMappingType()$/;"	f	class:Hyperion
getLightMap	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^const QMap<quint16,QJsonObject>& LedDevicePhilipsHueBridge::getLightMap(void)$/;"	f	class:LedDevicePhilipsHueBridge
getLightpackSerials	libsrc/leddevice/dev_hid/LedDeviceMultiLightpack.cpp	/^QStringList LedDeviceMultiLightpack::getLightpackSerials()$/;"	f	class:LedDeviceMultiLightpack
getLightsCount	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	unsigned int getLightsCount() const { return _lightsCount; }$/;"	f	class:LedDevicePhilipsHue
getLightsCount	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	uint getLightsCount() const { return _lightsCount; }$/;"	f	class:LedDeviceYeelight
getLocalAddress	libsrc/ssdp/SSDPHandler.cpp	/^QString SSDPHandler::getLocalAddress() const$/;"	f	class:SSDPHandler
getLogLevel	libsrc/utils/Logger.cpp	/^Logger::LogLevel Logger::getLogLevel(QString name)$/;"	f	class:Logger
getLogMessageBuffer	include/utils/Logger.h	/^	QVector<Logger::T_LOG_MESSAGE>* getLogMessageBuffer() { return &_logMessageBuffer; }$/;"	f	class:LoggerManager
getMeanLedColor	include/hyperion/ImageToLedsMap.h	/^		std::vector<ColorRgb> getMeanLedColor(const Image<Pixel_T> & image) const$/;"	f	class:hyperion::ImageToLedsMap
getMeanLedColor	include/hyperion/ImageToLedsMap.h	/^		void getMeanLedColor(const Image<Pixel_T> & image, std::vector<ColorRgb> & ledColors) const$/;"	f	class:hyperion::ImageToLedsMap
getMessages	libsrc/utils/jsonschema/QJsonSchemaChecker.cpp	/^const QStringList & QJsonSchemaChecker::getMessages() const$/;"	f	class:QJsonSchemaChecker
getMinLevel	include/utils/Logger.h	/^	LogLevel getMinLevel() { return _minLevel; }$/;"	f	class:Logger
getMuxerInstance	include/hyperion/Hyperion.h	/^	PriorityMuxer* getMuxerInstance() { return &_muxer; }$/;"	f	class:Hyperion
getName	include/effectengine/Effect.h	/^	QString getName() const { return _name; }$/;"	f	class:Effect
getName	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	QString getName() const { return _name; }$/;"	f	class:YeelightLight
getNamebyIndex	include/db/InstanceTable.h	/^	inline const QString getNamebyIndex(const quint8 index)$/;"	f	class:InstanceTable
getNetworkReplyError	libsrc/leddevice/dev_net/ProviderRestApi.h	/^	QNetworkReply::NetworkError getNetworkReplyError() const { return _networkReplyError; }$/;"	f	class:httpResponse
getOnOffRequest	libsrc/leddevice/dev_net/LedDeviceNanoleaf.cpp	/^QString LedDeviceNanoleaf::getOnOffRequest (bool isOn ) const$/;"	f	class:LedDeviceNanoleaf
getOnOffRequest	libsrc/leddevice/dev_net/LedDeviceWled.cpp	/^QString LedDeviceWled::getOnOffRequest (bool isOn ) const$/;"	f	class:LedDeviceWled
getOnOffState	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^bool PhilipsHueLight::getOnOffState() const$/;"	f	class:PhilipsHueLight
getOriginalState	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^QString PhilipsHueLight::getOriginalState() const$/;"	f	class:PhilipsHueLight
getPasswordHashOfUser	include/db/AuthTable.h	/^	inline const QByteArray getPasswordHashOfUser(const QString& user)$/;"	f	class:AuthTable
getPendingRequests	libsrc/hyperion/AuthManager.cpp	/^QVector<AuthManager::AuthDefinition> AuthManager::getPendingRequests()$/;"	f	class:AuthManager
getPendingTokenRequests	libsrc/api/API.cpp	/^bool API::getPendingTokenRequests(QVector<AuthManager::AuthDefinition> &map)$/;"	f	class:API
getPort	include/bonjour/bonjourserviceregister.h	/^	const quint16 & getPort() { return _port; };$/;"	f	class:BonjourServiceRegister
getPort	include/webserver/WebServer.h	/^	quint16 getPort() const { return _port; }$/;"	f	class:WebServer
getPort	libsrc/boblightserver/BoblightServer.cpp	/^uint16_t BoblightServer::getPort() const$/;"	f	class:BoblightServer
getPort	libsrc/jsonserver/JsonServer.cpp	/^uint16_t JsonServer::getPort() const$/;"	f	class:JsonServer
getPostData	libsrc/webserver/QtHttpRequest.h	/^	QtHttpPostData        getPostData    (void) const { return m_postData;            };$/;"	f	class:QtHttpRequest
getPriorities	libsrc/hyperion/PriorityMuxer.cpp	/^QList<int> PriorityMuxer::getPriorities() const$/;"	f	class:PriorityMuxer
getPriority	include/effectengine/Effect.h	/^	int getPriority() const { return _priority; };$/;"	f	class:Effect
getPriorityInfo	libsrc/hyperion/Hyperion.cpp	/^const Hyperion::InputInfo Hyperion::getPriorityInfo(const int priority) const$/;"	f	class:Hyperion
getPrivateKey	libsrc/webserver/QtHttpServer.h	/^	QSslKey getPrivateKey()                  					{ return m_sslKey; };$/;"	f	class:QtHttpServer
getProperties	libsrc/leddevice/LedDevice.cpp	/^QJsonObject LedDevice::getProperties(const QJsonObject& params)$/;"	f	class:LedDevice
getProperties	libsrc/leddevice/dev_net/LedDeviceNanoleaf.cpp	/^QJsonObject LedDeviceNanoleaf::getProperties(const QJsonObject& params)$/;"	f	class:LedDeviceNanoleaf
getProperties	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^QJsonObject LedDevicePhilipsHue::getProperties(const QJsonObject& params)$/;"	f	class:LedDevicePhilipsHue
getProperties	libsrc/leddevice/dev_net/LedDeviceWled.cpp	/^QJsonObject LedDeviceWled::getProperties(const QJsonObject& params)$/;"	f	class:LedDeviceWled
getProperties	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^QJsonObject LedDeviceYeelight::getProperties(const QJsonObject& params)$/;"	f	class:LedDeviceYeelight
getProperties	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^QJsonObject YeelightLight::getProperties()$/;"	f	class:YeelightLight
getQJsonConfig	libsrc/hyperion/Hyperion.cpp	/^const QJsonObject& Hyperion::getQJsonConfig()$/;"	f	class:Hyperion
getRawData	libsrc/webserver/QtHttpReply.h	/^	QByteArray        getRawData     (void) const { return m_data;                };$/;"	f	class:QtHttpReply
getRawData	libsrc/webserver/QtHttpRequest.h	/^	QByteArray            getRawData     (void) const { return m_data;                };$/;"	f	class:QtHttpRequest
getRawDataSize	libsrc/webserver/QtHttpReply.h	/^	int               getRawDataSize (void) const { return m_data.size();         };$/;"	f	class:QtHttpReply
getRawDataSize	libsrc/webserver/QtHttpRequest.h	/^	int                   getRawDataSize (void) const { return m_data.size ();        };$/;"	f	class:QtHttpRequest
getRecord	libsrc/db/DBManager.cpp	/^bool DBManager::getRecord(const VectorPair& conditions, QVariantMap& results, const QStringList& tColumns, const QStringList& tOrder) const$/;"	f	class:DBManager
getRecords	libsrc/db/DBManager.cpp	/^bool DBManager::getRecords(QVector<QVariantMap>& results, const QStringList& tColumns, const QStringList& tOrder) const$/;"	f	class:DBManager
getRegister	include/hyperion/ComponentRegister.h	/^	std::map<hyperion::Components, bool> getRegister() { return _componentStates; };$/;"	f	class:ComponentRegister
getResolutions	include/hyperion/Grabber.h	/^	virtual QStringList getResolutions(QString devicePath) { return QStringList(); }$/;"	f	class:Grabber
getResolutions	libsrc/grabber/v4l2/V4L2Grabber.cpp	/^QStringList V4L2Grabber::getResolutions(QString devicePath)$/;"	f	class:V4L2Grabber
getResolutions	libsrc/hyperion/GrabberWrapper.cpp	/^QStringList GrabberWrapper::getResolutions(QString devicePath)$/;"	f	class:GrabberWrapper
getResponse	libsrc/leddevice/dev_net/ProviderRestApi.cpp	/^httpResponse ProviderRestApi::getResponse(QNetworkReply* const &reply)$/;"	f	class:ProviderRestApi
getResult	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	QJsonArray getResult() const { return _resultArray; }$/;"	f	class:YeelightResponse
getScanParameters	libsrc/hyperion/ImageProcessor.cpp	/^bool ImageProcessor::getScanParameters(size_t led, double &hscanBegin, double &hscanEnd, double &vscanBegin, double &vscanEnd) const$/;"	f	class:ImageProcessor
getScript	include/effectengine/Effect.h	/^	QString getScript() const { return _script; }$/;"	f	class:Effect
getSerialNumber	libsrc/leddevice/dev_hid/LedDeviceLightpack.cpp	/^const QString &LedDeviceLightpack::getSerialNumber() const$/;"	f	class:LedDeviceLightpack
getServerName	libsrc/webserver/QtHttpServer.h	/^	const QString & getServerName (void) const { return m_serverName; };$/;"	f	class:QtHttpServer
getServerPort	libsrc/webserver/QtHttpServer.h	/^	quint16 getServerPort  (void) const { return m_sockServer->serverPort();  };$/;"	f	class:QtHttpServer
getServicesDiscovered	include/ssdp/SSDPDiscover.h	/^	const QMap<QString, SSDPService> getServicesDiscovered () { return _services; }$/;"	f	class:SSDPDiscover
getServicesDiscoveredJson	libsrc/ssdp/SSDPDiscover.cpp	/^QJsonArray SSDPDiscover::getServicesDiscoveredJson()$/;"	f	class:SSDPDiscover
getSetting	libsrc/hyperion/Hyperion.cpp	/^QJsonDocument Hyperion::getSetting(const settings::type& type)$/;"	f	class:Hyperion
getSetting	libsrc/hyperion/SettingsManager.cpp	/^const QJsonDocument SettingsManager::getSetting(const settings::type& type)$/;"	f	class:SettingsManager
getSettings	include/hyperion/SettingsManager.h	/^	const QJsonObject & getSettings() { return _qconfig; };$/;"	f	class:SettingsManager
getSettingsRecord	include/db/SettingsTable.h	/^	inline QJsonDocument getSettingsRecord(const QString& type) const$/;"	f	class:SettingsTable
getSettingsRecordString	include/db/SettingsTable.h	/^	inline QString getSettingsRecordString(const QString& type) const$/;"	f	class:SettingsTable
getSignalDetectionEnable	libsrc/grabber/v4l2/V4L2Wrapper.cpp	/^bool V4L2Wrapper::getSignalDetectionEnable()$/;"	f	class:V4L2Wrapper
getSignalDetectionEnabled	include/grabber/V4L2Grabber.h	/^	bool getSignalDetectionEnabled() { return _signalDetectionEnabled; }$/;"	f	class:V4L2Grabber
getSignalDetectionOffset	include/grabber/V4L2Grabber.h	/^	QRectF getSignalDetectionOffset()$/;"	f	class:V4L2Grabber
getStatusCode	libsrc/webserver/QtHttpReply.h	/^	StatusCode        getStatusCode  (void) const { return m_statusCode;          };$/;"	f	class:QtHttpReply
getStatusTextForCode	libsrc/webserver/QtHttpReply.cpp	/^const QByteArray QtHttpReply::getStatusTextForCode (QtHttpReply::StatusCode statusCode)$/;"	f	class:QtHttpReply
getStreamGroupState	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^bool LedDevicePhilipsHue::getStreamGroupState()$/;"	f	class:LedDevicePhilipsHue
getString	libsrc/leddevice/dev_hid/LedDeviceHyperionUsbasp.cpp	/^QString LedDeviceHyperionUsbasp::getString(libusb_device * device, int stringDescriptorIndex)$/;"	f	class:LedDeviceHyperionUsbasp
getString	libsrc/leddevice/dev_hid/LedDeviceLightpack.cpp	/^QString LedDeviceLightpack::getString(libusb_device * device, int stringDescriptorIndex)$/;"	f	class:LedDeviceLightpack
getString	libsrc/leddevice/dev_hid/LedDeviceMultiLightpack.cpp	/^QString LedDeviceMultiLightpack::getString(libusb_device * device, int stringDescriptorIndex)$/;"	f	class:LedDeviceMultiLightpack
getSubscribedCommands	include/api/JsonCB.h	/^	QStringList getSubscribedCommands() { return _subscribedCommands; };$/;"	f	class:JsonCB
getSwitches	include/commandline/SwitchOption.h	/^	const QMap<QString, T> &getSwitches() const                      { return _switches; }$/;"	f	class:commandline::SwitchOption
getTimeout	include/effectengine/Effect.h	/^	int getTimeout() const {return _timeout; }$/;"	f	class:Effect
getTokenList	include/db/AuthTable.h	/^	inline const QVector<QVariantMap> getTokenList()$/;"	f	class:AuthTable
getTokenList	libsrc/api/API.cpp	/^bool API::getTokenList(QVector<AuthManager::AuthDefinition> &def)$/;"	f	class:API
getTokenList	libsrc/hyperion/AuthManager.cpp	/^QVector<AuthManager::AuthDefinition> AuthManager::getTokenList()$/;"	f	class:AuthManager
getTransitionTime	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^int PhilipsHueLight::getTransitionTime() const$/;"	f	class:PhilipsHueLight
getUUID	include/db/MetaTable.h	/^	inline const QString getUUID()$/;"	f	class:MetaTable
getUniLedColor	include/hyperion/ImageToLedsMap.h	/^		std::vector<ColorRgb> getUniLedColor(const Image<Pixel_T> & image) const$/;"	f	class:hyperion::ImageToLedsMap
getUniLedColor	include/hyperion/ImageToLedsMap.h	/^		void getUniLedColor(const Image<Pixel_T> & image, std::vector<ColorRgb> & ledColors) const$/;"	f	class:hyperion::ImageToLedsMap
getUrl	libsrc/leddevice/dev_net/ProviderRestApi.cpp	/^QUrl ProviderRestApi::getUrl() const$/;"	f	class:ProviderRestApi
getUrl	libsrc/webserver/QtHttpRequest.h	/^	QUrl                  getUrl         (void) const { return m_url;                 };$/;"	f	class:QtHttpRequest
getUserLedMappingType	include/hyperion/ImageProcessor.h	/^	const int & getUserLedMappingType() { return _userMappingType; };$/;"	f	class:ImageProcessor
getUserToken	include/db/AuthTable.h	/^	inline const QByteArray getUserToken(const QString& user)$/;"	f	class:AuthTable
getUserToken	libsrc/api/API.cpp	/^bool API::getUserToken(QString &userToken)$/;"	f	class:API
getUserToken	libsrc/hyperion/AuthManager.cpp	/^const QString AuthManager::getUserToken(const QString &usr)$/;"	f	class:AuthManager
getV4L2deviceInputs	include/hyperion/Grabber.h	/^	virtual QMultiMap<QString, int> getV4L2deviceInputs(QString devicePath) { return QMultiMap<QString, int>(); }$/;"	f	class:Grabber
getV4L2deviceInputs	libsrc/grabber/v4l2/V4L2Grabber.cpp	/^QMultiMap<QString, int> V4L2Grabber::getV4L2deviceInputs(QString devicePath)$/;"	f	class:V4L2Grabber
getV4L2deviceInputs	libsrc/hyperion/GrabberWrapper.cpp	/^QMultiMap<QString, int> GrabberWrapper::getV4L2deviceInputs(QString devicePath)$/;"	f	class:GrabberWrapper
getV4L2deviceName	include/hyperion/Grabber.h	/^	virtual QString getV4L2deviceName(QString devicePath) { return QString(); }$/;"	f	class:Grabber
getV4L2deviceName	libsrc/grabber/v4l2/V4L2Grabber.cpp	/^QString V4L2Grabber::getV4L2deviceName(QString devicePath)$/;"	f	class:V4L2Grabber
getV4L2deviceName	libsrc/hyperion/GrabberWrapper.cpp	/^QString GrabberWrapper::getV4L2deviceName(QString devicePath)$/;"	f	class:GrabberWrapper
getV4L2devices	include/hyperion/Grabber.h	/^	virtual QStringList getV4L2devices() { return QStringList(); }$/;"	f	class:Grabber
getV4L2devices	libsrc/grabber/v4l2/V4L2Grabber.cpp	/^QStringList V4L2Grabber::getV4L2devices()$/;"	f	class:V4L2Grabber
getV4L2devices	libsrc/hyperion/GrabberWrapper.cpp	/^QStringList GrabberWrapper::getV4L2devices()$/;"	f	class:GrabberWrapper
getV4Ldevices	libsrc/grabber/v4l2/V4L2Grabber.cpp	/^void V4L2Grabber::getV4Ldevices()$/;"	f	class:V4L2Grabber
getValidator	libsrc/commandline/ValidatorOption.cpp	/^const QValidator *ValidatorOption::getValidator() const$/;"	f	class:ValidatorOption
getWsFrameHeader	libsrc/webserver/WebSocketClient.cpp	/^void WebSocketClient::getWsFrameHeader(WebSocketHeader* header)$/;"	f	class:WebSocketClient
grabFrame	libsrc/grabber/amlogic/AmlogicGrabber.cpp	/^int AmlogicGrabber::grabFrame(Image<ColorRgb> & image)$/;"	f	class:AmlogicGrabber
grabFrame	libsrc/grabber/dispmanx/DispmanxFrameGrabber.cpp	/^int DispmanxFrameGrabber::grabFrame(Image<ColorRgb> & image)$/;"	f	class:DispmanxFrameGrabber
grabFrame	libsrc/grabber/framebuffer/FramebufferFrameGrabber.cpp	/^int FramebufferFrameGrabber::grabFrame(Image<ColorRgb> & image)$/;"	f	class:FramebufferFrameGrabber
grabFrame	libsrc/grabber/osx/OsxFrameGrabber.cpp	/^int OsxFrameGrabber::grabFrame(Image<ColorRgb> & image)$/;"	f	class:OsxFrameGrabber
grabFrame	libsrc/grabber/qt/QtGrabber.cpp	/^int QtGrabber::grabFrame(Image<ColorRgb> & image)$/;"	f	class:QtGrabber
grabFrame	libsrc/grabber/x11/X11Grabber.cpp	/^int X11Grabber::grabFrame(Image<ColorRgb> & image, bool forceUpdate)$/;"	f	class:X11Grabber
grabFrame_amvideocap	libsrc/grabber/amlogic/AmlogicGrabber.cpp	/^int AmlogicGrabber::grabFrame_amvideocap(Image<ColorRgb> & image)$/;"	f	class:AmlogicGrabber
green	include/utils/ColorArgb.h	/^	uint8_t green;$/;"	m	struct:ColorArgb
green	include/utils/ColorBgr.h	/^	uint8_t green;$/;"	m	struct:ColorBgr
green	include/utils/ColorRgb.h	/^	uint8_t green;$/;"	m	struct:ColorRgb
green	include/utils/ColorRgba.h	/^	uint8_t green;$/;"	m	struct:ColorRgba
green	include/utils/ColorRgbw.h	/^	uint8_t green;$/;"	m	struct:ColorRgbw
green	include/utils/Image.h	/^	uint8_t green(const unsigned pixel) const$/;"	f	class:Image
green	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	XYColor red, green, blue;$/;"	m	struct:CiColorTriangle
handle	libsrc/grabber/amlogic/IonBuffer.h	/^	ion_user_handle_t handle = 0;$/;"	m	class:IonBuffer
handle	libsrc/grabber/amlogic/ion.h	/^	ion_user_handle_t handle;$/;"	m	struct:ion_allocation_data
handle	libsrc/grabber/amlogic/ion.h	/^	ion_user_handle_t handle;$/;"	m	struct:ion_fd_data
handle	libsrc/grabber/amlogic/ion.h	/^	ion_user_handle_t handle;$/;"	m	struct:ion_handle_data
handle	libsrc/grabber/amlogic/meson_ion.h	/^	int handle;$/;"	m	struct:meson_phys_data
handleAdjustmentChange	libsrc/api/JsonCB.cpp	/^void JsonCB::handleAdjustmentChange()$/;"	f	class:JsonCB
handleAdjustmentCommand	libsrc/api/JsonAPI.cpp	/^void JsonAPI::handleAdjustmentCommand(const QJsonObject &message, const QString &command, const int tan)$/;"	f	class:JsonAPI
handleAuthorizeCommand	libsrc/api/JsonAPI.cpp	/^void JsonAPI::handleAuthorizeCommand(const QJsonObject &message, const QString &command, const int tan)$/;"	f	class:JsonAPI
handleBinaryMessage	libsrc/webserver/WebSocketClient.cpp	/^void WebSocketClient::handleBinaryMessage(QByteArray &data)$/;"	f	class:WebSocketClient
handleBonjourChange	libsrc/api/JsonCB.cpp	/^void JsonCB::handleBonjourChange(const QMap<QString,BonjourRecord>& bRegisters)$/;"	f	class:JsonCB
handleCallback	libsrc/webserver/WebJsonRpc.cpp	/^void WebJsonRpc::handleCallback(QJsonObject obj)$/;"	f	class:WebJsonRpc
handleClearCommand	libsrc/api/JsonAPI.cpp	/^void JsonAPI::handleClearCommand(const QJsonObject &message, const QString &command, const int tan)$/;"	f	class:JsonAPI
handleClearCommand	libsrc/flatbufserver/FlatBufferClient.cpp	/^void FlatBufferClient::handleClearCommand(const hyperionnet::Clear *clear)$/;"	f	class:FlatBufferClient
handleClearCommand	libsrc/protoserver/ProtoClientConnection.cpp	/^void ProtoClientConnection::handleClearCommand(const proto::ClearRequest &message)$/;"	f	class:ProtoClientConnection
handleClearallCommand	libsrc/api/JsonAPI.cpp	/^void JsonAPI::handleClearallCommand(const QJsonObject &message, const QString &command, const int tan)$/;"	f	class:JsonAPI
handleClearallCommand	libsrc/protoserver/ProtoClientConnection.cpp	/^void ProtoClientConnection::handleClearallCommand()$/;"	f	class:ProtoClientConnection
handleColorCommand	libsrc/api/JsonAPI.cpp	/^void JsonAPI::handleColorCommand(const QJsonObject &message, const QString &command, const int tan)$/;"	f	class:JsonAPI
handleColorCommand	libsrc/flatbufserver/FlatBufferClient.cpp	/^void FlatBufferClient::handleColorCommand(const hyperionnet::Color *colorReq)$/;"	f	class:FlatBufferClient
handleColorCommand	libsrc/protoserver/ProtoClientConnection.cpp	/^void ProtoClientConnection::handleColorCommand(const proto::ColorRequest &message)$/;"	f	class:ProtoClientConnection
handleCompStateChangeRequest	libsrc/blackborder/BlackBorderProcessor.cpp	/^void BlackBorderProcessor::handleCompStateChangeRequest(const hyperion::Components component, bool enable)$/;"	f	class:BlackBorderProcessor
handleCompStateChangeRequest	libsrc/hyperion/CaptureCont.cpp	/^void CaptureCont::handleCompStateChangeRequest(const hyperion::Components component, bool enable)$/;"	f	class:CaptureCont
handleCompStateChangeRequest	libsrc/hyperion/ComponentRegister.cpp	/^void ComponentRegister::handleCompStateChangeRequest(const hyperion::Components comps, const bool activated)$/;"	f	class:ComponentRegister
handleCompStateChangeRequest	libsrc/hyperion/MessageForwarder.cpp	/^void MessageForwarder::handleCompStateChangeRequest(const hyperion::Components component, bool enable)$/;"	f	class:MessageForwarder
handleComponentState	libsrc/api/JsonCB.cpp	/^void JsonCB::handleComponentState(const hyperion::Components comp, const bool state)$/;"	f	class:JsonCB
handleComponentState	libsrc/leddevice/LedDeviceWrapper.cpp	/^void LedDeviceWrapper::handleComponentState(const hyperion::Components component, const bool state)$/;"	f	class:LedDeviceWrapper
handleComponentStateCommand	libsrc/api/JsonAPI.cpp	/^void JsonAPI::handleComponentStateCommand(const QJsonObject &message, const QString &command, const int tan)$/;"	f	class:JsonAPI
handleConfigCommand	libsrc/api/JsonAPI.cpp	/^void JsonAPI::handleConfigCommand(const QJsonObject &message, const QString &command, const int tan)$/;"	f	class:JsonAPI
handleConfigSetCommand	libsrc/api/JsonAPI.cpp	/^void JsonAPI::handleConfigSetCommand(const QJsonObject &message, const QString &command, const int tan)$/;"	f	class:JsonAPI
handleConfigUpgrade	libsrc/hyperion/SettingsManager.cpp	/^bool SettingsManager::handleConfigUpgrade(QJsonObject& config)$/;"	f	class:SettingsManager
handleCreateEffectCommand	libsrc/api/JsonAPI.cpp	/^void JsonAPI::handleCreateEffectCommand(const QJsonObject &message, const QString &command, const int tan)$/;"	f	class:JsonAPI
handleDeleteEffectCommand	libsrc/api/JsonAPI.cpp	/^void JsonAPI::handleDeleteEffectCommand(const QJsonObject &message, const QString &command, const int tan)$/;"	f	class:JsonAPI
handleEffectCommand	libsrc/api/JsonAPI.cpp	/^void JsonAPI::handleEffectCommand(const QJsonObject &message, const QString &command, const int tan)$/;"	f	class:JsonAPI
handleEffectListChange	libsrc/api/JsonCB.cpp	/^void JsonCB::handleEffectListChange()$/;"	f	class:JsonCB
handleFinished	libsrc/hyperion/HyperionIManager.cpp	/^void HyperionIManager::handleFinished()$/;"	f	class:HyperionIManager
handleImageCommand	libsrc/api/JsonAPI.cpp	/^void JsonAPI::handleImageCommand(const QJsonObject &message, const QString &command, const int tan)$/;"	f	class:JsonAPI
handleImageCommand	libsrc/flatbufserver/FlatBufferClient.cpp	/^void FlatBufferClient::handleImageCommand(const hyperionnet::Image *image)$/;"	f	class:FlatBufferClient
handleImageCommand	libsrc/protoserver/ProtoClientConnection.cpp	/^void ProtoClientConnection::handleImageCommand(const proto::ImageRequest &message)$/;"	f	class:ProtoClientConnection
handleImageToLedsMappingChange	libsrc/api/JsonCB.cpp	/^void JsonCB::handleImageToLedsMappingChange(const int& mappingType)$/;"	f	class:JsonCB
handleInitialEffect	include/utils/hyperion.h	/^	void handleInitialEffect(Hyperion* hyperion, const QJsonObject& FGEffectConfig)$/;"	f	namespace:hyperion
handleInstanceChange	libsrc/api/JsonCB.cpp	/^void JsonCB::handleInstanceChange()$/;"	f	class:JsonCB
handleInstanceCommand	libsrc/api/JsonAPI.cpp	/^void JsonAPI::handleInstanceCommand(const QJsonObject &message, const QString &command, const int tan)$/;"	f	class:JsonAPI
handleInstanceStateChange	libsrc/api/JsonAPI.cpp	/^void JsonAPI::handleInstanceStateChange(const InstanceState &state, const quint8 &instance, const QString &name)$/;"	f	class:JsonAPI
handleInstanceSwitch	libsrc/api/JsonAPI.cpp	/^bool JsonAPI::handleInstanceSwitch(const quint8 &inst, const bool &forced)$/;"	f	class:JsonAPI
handleInternalEnableState	libsrc/leddevice/LedDeviceWrapper.cpp	/^void LedDeviceWrapper::handleInternalEnableState(bool newState)$/;"	f	class:LedDeviceWrapper
handleLedColorsCommand	libsrc/api/JsonAPI.cpp	/^void JsonAPI::handleLedColorsCommand(const QJsonObject &message, const QString &command, const int tan)$/;"	f	class:JsonAPI
handleLedDeviceCommand	libsrc/api/JsonAPI.cpp	/^void JsonAPI::handleLedDeviceCommand(const QJsonObject &message, const QString &command, const int tan)$/;"	f	class:JsonAPI
handleLedsConfigChange	libsrc/api/JsonCB.cpp	/^void JsonCB::handleLedsConfigChange(const settings::type& type, const QJsonDocument& data)$/;"	f	class:JsonCB
handleLoggingCommand	libsrc/api/JsonAPI.cpp	/^void JsonAPI::handleLoggingCommand(const QJsonObject &message, const QString &command, const int tan)$/;"	f	class:JsonAPI
handleMSearchRequest	libsrc/ssdp/SSDPHandler.cpp	/^void SSDPHandler::handleMSearchRequest(const QString& target, const QString& mx, const QString address, const quint16 & port)$/;"	f	class:SSDPHandler
handleMessage	libsrc/api/JsonAPI.cpp	/^void JsonAPI::handleMessage(const QString &messageString, const QString &httpAuthHeader)$/;"	f	class:JsonAPI
handleMessage	libsrc/boblightserver/BoblightClientConnection.cpp	/^void BoblightClientConnection::handleMessage(const QString & message)$/;"	f	class:BoblightClientConnection
handleMessage	libsrc/flatbufserver/FlatBufferClient.cpp	/^void FlatBufferClient::handleMessage(const hyperionnet::Request * req)$/;"	f	class:FlatBufferClient
handleMessage	libsrc/protoserver/ProtoClientConnection.cpp	/^void ProtoClientConnection::handleMessage(const proto::HyperionRequest & message)$/;"	f	class:ProtoClientConnection
handleMessage	libsrc/webserver/WebJsonRpc.cpp	/^void WebJsonRpc::handleMessage(QtHttpRequest* request)$/;"	f	class:WebJsonRpc
handleNetworkConfigurationChanged	libsrc/ssdp/SSDPHandler.cpp	/^void SSDPHandler::handleNetworkConfigurationChanged(const QNetworkConfiguration &config)$/;"	f	class:SSDPHandler
handleNewLogMessage	libsrc/utils/Logger.cpp	/^void LoggerManager::handleNewLogMessage(const Logger::T_LOG_MESSAGE &msg)$/;"	f	class:LoggerManager
handleNewVideoMode	include/hyperion/Hyperion.h	/^	void handleNewVideoMode(const VideoMode& mode) { _currVideoMode = mode; }$/;"	f	class:Hyperion
handleNotImplemented	libsrc/api/JsonAPI.cpp	/^void JsonAPI::handleNotImplemented()$/;"	f	class:JsonAPI
handleNotImplemented	libsrc/flatbufserver/FlatBufferClient.cpp	/^void FlatBufferClient::handleNotImplemented()$/;"	f	class:FlatBufferClient
handleNotImplemented	libsrc/protoserver/ProtoClientConnection.cpp	/^void ProtoClientConnection::handleNotImplemented()$/;"	f	class:ProtoClientConnection
handlePendingTokenRequest	libsrc/api/API.cpp	/^bool API::handlePendingTokenRequest(const QString &id, const bool accept)$/;"	f	class:API
handlePendingTokenRequest	libsrc/hyperion/AuthManager.cpp	/^void AuthManager::handlePendingTokenRequest(const QString &id, const bool &accept)$/;"	f	class:AuthManager
handlePriorityChanges	libsrc/hyperion/MessageForwarder.cpp	/^void MessageForwarder::handlePriorityChanges(const quint8 &priority)$/;"	f	class:MessageForwarder
handlePriorityUpdate	libsrc/api/JsonCB.cpp	/^void JsonCB::handlePriorityUpdate()$/;"	f	class:JsonCB
handleProcessingCommand	libsrc/api/JsonAPI.cpp	/^void JsonAPI::handleProcessingCommand(const QJsonObject &message, const QString &command, const int tan)$/;"	f	class:JsonAPI
handleRegisterCommand	libsrc/flatbufserver/FlatBufferClient.cpp	/^void FlatBufferClient::handleRegisterCommand(const hyperionnet::Register *regReq)$/;"	f	class:FlatBufferClient
handleResponse	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^YeelightResponse YeelightLight::handleResponse(int correlationID, QByteArray const &response )$/;"	f	class:YeelightLight
handleReturn	libsrc/leddevice/dev_net/ProviderUdpSSL.cpp	/^void ProviderUdpSSL::handleReturn(int ret)$/;"	f	class:ProviderUdpSSL
handleSchemaGetCommand	libsrc/api/JsonAPI.cpp	/^void JsonAPI::handleSchemaGetCommand(const QJsonObject &message, const QString &command, const int tan)$/;"	f	class:JsonAPI
handleServerInfoCommand	libsrc/api/JsonAPI.cpp	/^void JsonAPI::handleServerInfoCommand(const QJsonObject &message, const QString &command, const int tan)$/;"	f	class:JsonAPI
handleSettingsChange	libsrc/api/JsonCB.cpp	/^void JsonCB::handleSettingsChange(const settings::type& type, const QJsonDocument& data)$/;"	f	class:JsonCB
handleSettingsUpdate	include/hyperion/BGEffectHandler.h	/^	void handleSettingsUpdate(const settings::type& type, const QJsonDocument& config)$/;"	f	class:BGEffectHandler
handleSettingsUpdate	libsrc/blackborder/BlackBorderProcessor.cpp	/^void BlackBorderProcessor::handleSettingsUpdate(const settings::type& type, const QJsonDocument& config)$/;"	f	class:BlackBorderProcessor
handleSettingsUpdate	libsrc/boblightserver/BoblightServer.cpp	/^void BoblightServer::handleSettingsUpdate(const settings::type& type, const QJsonDocument& config)$/;"	f	class:BoblightServer
handleSettingsUpdate	libsrc/effectengine/EffectFileHandler.cpp	/^void EffectFileHandler::handleSettingsUpdate(const settings::type& type, const QJsonDocument& config)$/;"	f	class:EffectFileHandler
handleSettingsUpdate	libsrc/flatbufserver/FlatBufferServer.cpp	/^void FlatBufferServer::handleSettingsUpdate(const settings::type& type, const QJsonDocument& config)$/;"	f	class:FlatBufferServer
handleSettingsUpdate	libsrc/hyperion/AuthManager.cpp	/^void AuthManager::handleSettingsUpdate(const settings::type &type, const QJsonDocument &config)$/;"	f	class:AuthManager
handleSettingsUpdate	libsrc/hyperion/CaptureCont.cpp	/^void CaptureCont::handleSettingsUpdate(const settings::type& type, const QJsonDocument& config)$/;"	f	class:CaptureCont
handleSettingsUpdate	libsrc/hyperion/GrabberWrapper.cpp	/^void GrabberWrapper::handleSettingsUpdate(const settings::type& type, const QJsonDocument& config)$/;"	f	class:GrabberWrapper
handleSettingsUpdate	libsrc/hyperion/Hyperion.cpp	/^void Hyperion::handleSettingsUpdate(const settings::type& type, const QJsonDocument& config)$/;"	f	class:Hyperion
handleSettingsUpdate	libsrc/hyperion/ImageProcessor.cpp	/^void ImageProcessor::handleSettingsUpdate(const settings::type& type, const QJsonDocument& config)$/;"	f	class:ImageProcessor
handleSettingsUpdate	libsrc/hyperion/LinearColorSmoothing.cpp	/^void LinearColorSmoothing::handleSettingsUpdate(const settings::type& type, const QJsonDocument& config)$/;"	f	class:LinearColorSmoothing
handleSettingsUpdate	libsrc/hyperion/MessageForwarder.cpp	/^void MessageForwarder::handleSettingsUpdate(const settings::type &type, const QJsonDocument &config)$/;"	f	class:MessageForwarder
handleSettingsUpdate	libsrc/jsonserver/JsonServer.cpp	/^void JsonServer::handleSettingsUpdate(const settings::type& type, const QJsonDocument& config)$/;"	f	class:JsonServer
handleSettingsUpdate	libsrc/protoserver/ProtoServer.cpp	/^void ProtoServer::handleSettingsUpdate(const settings::type& type, const QJsonDocument& config)$/;"	f	class:ProtoServer
handleSettingsUpdate	libsrc/ssdp/SSDPHandler.cpp	/^void SSDPHandler::handleSettingsUpdate(const settings::type& type, const QJsonDocument& config)$/;"	f	class:SSDPHandler
handleSettingsUpdate	libsrc/utils/NetOrigin.cpp	/^void NetOrigin::handleSettingsUpdate(const settings::type& type, const QJsonDocument& config)$/;"	f	class:NetOrigin
handleSettingsUpdate	libsrc/webserver/WebServer.cpp	/^void WebServer::handleSettingsUpdate(const settings::type& type, const QJsonDocument& config)$/;"	f	class:WebServer
handleSourceRequest	libsrc/hyperion/GrabberWrapper.cpp	/^void GrabberWrapper::handleSourceRequest(const hyperion::Components& component, const int hyperionInd, const bool listen)$/;"	f	class:GrabberWrapper
handleSourceSelectCommand	libsrc/api/JsonAPI.cpp	/^void JsonAPI::handleSourceSelectCommand(const QJsonObject &message, const QString &command, const int tan)$/;"	f	class:JsonAPI
handleStarted	libsrc/hyperion/HyperionIManager.cpp	/^void HyperionIManager::handleStarted()$/;"	f	class:HyperionIManager
handleSysInfoCommand	libsrc/api/JsonAPI.cpp	/^void JsonAPI::handleSysInfoCommand(const QJsonObject &, const QString &command, const int tan)$/;"	f	class:JsonAPI
handleSystemImage	libsrc/hyperion/CaptureCont.cpp	/^void CaptureCont::handleSystemImage(const QString& name, const Image<ColorRgb>& image)$/;"	f	class:CaptureCont
handleTokenChange	libsrc/api/JsonCB.cpp	/^void JsonCB::handleTokenChange(const QVector<AuthManager::AuthDefinition> &def)$/;"	f	class:JsonCB
handleTokenResponse	libsrc/api/JsonAPI.cpp	/^void JsonAPI::handleTokenResponse(const bool &success, const QString &token, const QString &comment, const QString &id)$/;"	f	class:JsonAPI
handleUpdatedEffectList	libsrc/effectengine/EffectEngine.cpp	/^void EffectEngine::handleUpdatedEffectList()$/;"	f	class:EffectEngine
handleV4lImage	libsrc/hyperion/CaptureCont.cpp	/^void CaptureCont::handleV4lImage(const QString& name, const Image<ColorRgb> & image)$/;"	f	class:CaptureCont
handleVideoModeChange	libsrc/api/JsonCB.cpp	/^void JsonCB::handleVideoModeChange(const VideoMode& mode)$/;"	f	class:JsonCB
handleVideoModeCommand	libsrc/api/JsonAPI.cpp	/^void JsonAPI::handleVideoModeCommand(const QJsonObject &message, const QString &command, const int tan)$/;"	f	class:JsonAPI
handleVisibleComponentChanged	libsrc/hyperion/Hyperion.cpp	/^void Hyperion::handleVisibleComponentChanged(const hyperion::Components &comp)$/;"	f	class:Hyperion
handleWebServerStateChange	libsrc/ssdp/SSDPHandler.cpp	/^void SSDPHandler::handleWebServerStateChange(const bool newState)$/;"	f	class:SSDPHandler
handleWebSocketFrame	libsrc/webserver/WebSocketClient.cpp	/^void WebSocketClient::handleWebSocketFrame(void)$/;"	f	class:WebSocketClient
hasHyperionDefaultPw	libsrc/api/API.cpp	/^bool API::hasHyperionDefaultPw()$/;"	f	class:API
hasPriority	libsrc/hyperion/PriorityMuxer.cpp	/^bool PriorityMuxer::hasPriority(const int priority) const$/;"	f	class:PriorityMuxer
hasSwitch	include/commandline/SwitchOption.h	/^	bool hasSwitch(const QString &switch_)                           { return _switches.contains(switch_.toLower()); }$/;"	f	class:commandline::SwitchOption
hashPasswordWithSalt	include/db/AuthTable.h	/^	inline const QByteArray hashPasswordWithSalt(const QString& pw, const QByteArray& salt)$/;"	f	class:AuthTable
hashToken	include/db/AuthTable.h	/^	inline const QByteArray hashToken(const QString& token)$/;"	f	class:AuthTable
heap_id_mask	libsrc/grabber/amlogic/ion.h	/^	unsigned int heap_id_mask;$/;"	m	struct:ion_allocation_data
height	include/api/apiStructs.h	/^    int height;$/;"	m	struct:ImageCmdData
height	include/grabber/DispmanxFrameGrabberMock.h	/^	int height;$/;"	m	struct:DISPMANX_MODEINFO_T
height	include/grabber/DispmanxFrameGrabberMock.h	/^	int height;$/;"	m	struct:VC_RECT_T
height	include/utils/Image.h	/^	inline unsigned height() const$/;"	f	class:Image
height	libsrc/hyperion/ImageToLedsMap.cpp	/^unsigned ImageToLedsMap::height() const$/;"	f	class:ImageToLedsMap
helpText	include/commandline/Parser.h	/^	QString helpText() const$/;"	f	class:commandline::Parser
horizontalBorder	include/hyperion/ImageToLedsMap.h	/^		unsigned horizontalBorder() { return _horizontalBorder; };$/;"	f	class:hyperion::ImageToLedsMap
horizontalSize	include/blackborder/BlackBorderDetector.h	/^		int horizontalSize;$/;"	m	struct:hyperion::BlackBorder
host	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^		QString host;$/;"	m	struct:LedDeviceYeelight::yeelightAddress
hostName	include/bonjour/bonjourrecord.h	/^	QString hostName;$/;"	m	class:BonjourRecord
hostName	include/utils/SysInfo.h	/^		QString hostName;$/;"	m	struct:SysInfo::HyperionSysInfo
hsl2rgb	libsrc/utils/ColorSys.cpp	/^void ColorSys::hsl2rgb(uint16_t hue, float saturation, float luminance, uint8_t & red, uint8_t & green, uint8_t & blue)$/;"	f	class:ColorSys
hsv2rgb	libsrc/utils/ColorSys.cpp	/^void ColorSys::hsv2rgb(uint16_t hue, uint8_t saturation, uint8_t value, uint8_t & red, uint8_t & green, uint8_t & blue)$/;"	f	class:ColorSys
httpResponse	libsrc/leddevice/dev_net/ProviderRestApi.h	/^	explicit httpResponse() {}$/;"	f	class:httpResponse
httpResponse	libsrc/leddevice/dev_net/ProviderRestApi.h	/^class httpResponse$/;"	c
hyperion	include/blackborder/BlackBorderDetector.h	/^namespace hyperion$/;"	n
hyperion	include/blackborder/BlackBorderProcessor.h	/^namespace hyperion$/;"	n
hyperion	include/hyperion/ImageToLedsMap.h	/^namespace hyperion$/;"	n
hyperion	include/utils/Components.h	/^namespace hyperion$/;"	n
hyperion	include/utils/hyperion.h	/^namespace hyperion {$/;"	n
id	include/hyperion/AuthManager.h	/^		QString id;$/;"	m	struct:AuthManager::AuthDefinition
id	libsrc/leddevice/dev_serial/LedDeviceSedu.cpp	/^	uint8_t id;$/;"	m	struct:FrameSpec	file:
idExist	include/db/AuthTable.h	/^	inline bool idExist(const QString& id)$/;"	f	class:AuthTable
identify	include/leddevice/LedDevice.h	/^	virtual void identify(const QJsonObject& params) {}$/;"	f	class:LedDevice
identify	libsrc/leddevice/dev_net/LedDeviceNanoleaf.cpp	/^void LedDeviceNanoleaf::identify(const QJsonObject& params)$/;"	f	class:LedDeviceNanoleaf
identify	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^void LedDevicePhilipsHue::identify(const QJsonObject& params)$/;"	f	class:LedDevicePhilipsHue
identify	libsrc/leddevice/dev_net/LedDeviceWled.cpp	/^void LedDeviceWled::identify(const QJsonObject& params)$/;"	f	class:LedDeviceWled
identify	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^bool YeelightLight::identify()$/;"	f	class:YeelightLight
identify	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^void LedDeviceYeelight::identify(const QJsonObject& params)$/;"	f	class:LedDeviceYeelight
image	include/hyperion/PriorityMuxer.h	/^		Image<ColorRgb> image;$/;"	m	struct:PriorityMuxer::InputInfo
imgName	include/api/apiStructs.h	/^    QString imgName;$/;"	m	struct:ImageCmdData
incomingConnection	libsrc/webserver/QtHttpServer.cpp	/^void QtHttpServerWrapper::incomingConnection (qintptr handle)$/;"	f	class:QtHttpServerWrapper
incommingLogMessage	libsrc/api/JsonAPI.cpp	/^void JsonAPI::incommingLogMessage(const Logger::T_LOG_MESSAGE &msg)$/;"	f	class:JsonAPI
init	libsrc/api/API.cpp	/^void API::init(void)$/;"	f	class:API
init	libsrc/grabber/v4l2/V4L2Grabber.cpp	/^bool V4L2Grabber::init()$/;"	f	class:V4L2Grabber
init	libsrc/leddevice/LedDevice.cpp	/^bool LedDevice::init(const QJsonObject &deviceConfig)$/;"	f	class:LedDevice
init	libsrc/leddevice/LedDeviceTemplate.cpp	/^bool LedDeviceTemplate::init(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceTemplate
init	libsrc/leddevice/dev_hid/LedDeviceHyperionUsbasp.cpp	/^bool LedDeviceHyperionUsbasp::init(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceHyperionUsbasp
init	libsrc/leddevice/dev_hid/LedDeviceLightpack.cpp	/^bool LedDeviceLightpack::init(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceLightpack
init	libsrc/leddevice/dev_hid/LedDeviceMultiLightpack.cpp	/^bool LedDeviceMultiLightpack::init(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceMultiLightpack
init	libsrc/leddevice/dev_hid/LedDevicePaintpack.cpp	/^bool LedDevicePaintpack::init(const QJsonObject &deviceConfig)$/;"	f	class:LedDevicePaintpack
init	libsrc/leddevice/dev_hid/LedDeviceRawHID.cpp	/^bool LedDeviceRawHID::init(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceRawHID
init	libsrc/leddevice/dev_hid/ProviderHID.cpp	/^bool ProviderHID::init(const QJsonObject &deviceConfig)$/;"	f	class:ProviderHID
init	libsrc/leddevice/dev_net/LedDeviceAtmoOrb.cpp	/^bool LedDeviceAtmoOrb::init(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceAtmoOrb
init	libsrc/leddevice/dev_net/LedDeviceFadeCandy.cpp	/^bool LedDeviceFadeCandy::init(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceFadeCandy
init	libsrc/leddevice/dev_net/LedDeviceNanoleaf.cpp	/^bool LedDeviceNanoleaf::init(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceNanoleaf
init	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^bool LedDevicePhilipsHue::init(const QJsonObject &deviceConfig)$/;"	f	class:LedDevicePhilipsHue
init	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^bool LedDevicePhilipsHueBridge::init(const QJsonObject &deviceConfig)$/;"	f	class:LedDevicePhilipsHueBridge
init	libsrc/leddevice/dev_net/LedDeviceTpm2net.cpp	/^bool LedDeviceTpm2net::init(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceTpm2net
init	libsrc/leddevice/dev_net/LedDeviceUdpArtNet.cpp	/^bool LedDeviceUdpArtNet::init(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceUdpArtNet
init	libsrc/leddevice/dev_net/LedDeviceUdpE131.cpp	/^bool LedDeviceUdpE131::init(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceUdpE131
init	libsrc/leddevice/dev_net/LedDeviceUdpH801.cpp	/^bool LedDeviceUdpH801::init(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceUdpH801
init	libsrc/leddevice/dev_net/LedDeviceUdpRaw.cpp	/^bool LedDeviceUdpRaw::init(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceUdpRaw
init	libsrc/leddevice/dev_net/LedDeviceWled.cpp	/^bool LedDeviceWled::init(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceWled
init	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^bool LedDeviceYeelight::init(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceYeelight
init	libsrc/leddevice/dev_net/ProviderUdp.cpp	/^bool ProviderUdp::init(const QJsonObject &deviceConfig)$/;"	f	class:ProviderUdp
init	libsrc/leddevice/dev_net/ProviderUdpSSL.cpp	/^bool ProviderUdpSSL::init(const QJsonObject &deviceConfig)$/;"	f	class:ProviderUdpSSL
init	libsrc/leddevice/dev_other/LedDeviceFile.cpp	/^bool LedDeviceFile::init(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceFile
init	libsrc/leddevice/dev_other/LedDevicePiBlaster.cpp	/^bool LedDevicePiBlaster::init(const QJsonObject &deviceConfig)$/;"	f	class:LedDevicePiBlaster
init	libsrc/leddevice/dev_rpi_pwm/LedDeviceWS281x.cpp	/^bool LedDeviceWS281x::init(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceWS281x
init	libsrc/leddevice/dev_serial/LedDeviceAdalight.cpp	/^bool LedDeviceAdalight::init(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceAdalight
init	libsrc/leddevice/dev_serial/LedDeviceAtmo.cpp	/^bool LedDeviceAtmo::init(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceAtmo
init	libsrc/leddevice/dev_serial/LedDeviceDMX.cpp	/^bool LedDeviceDMX::init(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceDMX
init	libsrc/leddevice/dev_serial/LedDeviceKarate.cpp	/^bool LedDeviceKarate::init(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceKarate
init	libsrc/leddevice/dev_serial/LedDeviceSedu.cpp	/^bool LedDeviceSedu::init(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceSedu
init	libsrc/leddevice/dev_serial/LedDeviceTpm2.cpp	/^bool LedDeviceTpm2::init(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceTpm2
init	libsrc/leddevice/dev_serial/ProviderRs232.cpp	/^bool ProviderRs232::init(const QJsonObject &deviceConfig)$/;"	f	class:ProviderRs232
init	libsrc/leddevice/dev_spi/LedDeviceAPA102.cpp	/^bool LedDeviceAPA102::init(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceAPA102
init	libsrc/leddevice/dev_spi/LedDeviceAPA104.cpp	/^bool LedDeviceAPA104::init(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceAPA104
init	libsrc/leddevice/dev_spi/LedDeviceLpd6803.cpp	/^bool LedDeviceLpd6803::init(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceLpd6803
init	libsrc/leddevice/dev_spi/LedDeviceLpd8806.cpp	/^bool LedDeviceLpd8806::init(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceLpd8806
init	libsrc/leddevice/dev_spi/LedDeviceP9813.cpp	/^bool LedDeviceP9813::init(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceP9813
init	libsrc/leddevice/dev_spi/LedDeviceSk6812SPI.cpp	/^bool LedDeviceSk6812SPI::init(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceSk6812SPI
init	libsrc/leddevice/dev_spi/LedDeviceSk6822SPI.cpp	/^bool LedDeviceSk6822SPI::init(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceSk6822SPI
init	libsrc/leddevice/dev_spi/LedDeviceWs2801.cpp	/^bool LedDeviceWs2801::init(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceWs2801
init	libsrc/leddevice/dev_spi/LedDeviceWs2812SPI.cpp	/^bool LedDeviceWs2812SPI::init(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceWs2812SPI
init	libsrc/leddevice/dev_spi/ProviderSpi.cpp	/^bool ProviderSpi::init(const QJsonObject &deviceConfig)$/;"	f	class:ProviderSpi
init	libsrc/leddevice/dev_tinker/LedDeviceTinkerforge.cpp	/^bool LedDeviceTinkerforge::init(const QJsonObject &deviceConfig)$/;"	f	class:LedDeviceTinkerforge
init	libsrc/utils/RgbTransform.cpp	/^void RgbTransform::init(double gammaR, double gammaG, double gammaB, double backlightThreshold, bool backlightColored, uint8_t brightness, uint8_t brightnessCompensation)$/;"	f	class:RgbTransform
initConnection	libsrc/leddevice/dev_net/ProviderUdpSSL.cpp	/^bool ProviderUdpSSL::initConnection()$/;"	f	class:ProviderUdpSSL
initFile	libsrc/leddevice/dev_other/LedDeviceFile.cpp	/^void LedDeviceFile::initFile(const QString &fileName)$/;"	f	class:LedDeviceFile
initLeds	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^bool LedDevicePhilipsHue::initLeds()$/;"	f	class:LedDevicePhilipsHue
initLedsConfiguration	libsrc/leddevice/dev_net/LedDeviceNanoleaf.cpp	/^bool LedDeviceNanoleaf::initLedsConfiguration()$/;"	f	class:LedDeviceNanoleaf
initLogger	libsrc/utils/Profiler.cpp	/^void Profiler::initLogger()$/;"	f	class:Profiler
initMaps	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^bool LedDevicePhilipsHueBridge::initMaps()$/;"	f	class:LedDevicePhilipsHueBridge
initNetwork	libsrc/leddevice/dev_net/LedDeviceFadeCandy.cpp	/^bool LedDeviceFadeCandy::initNetwork()$/;"	f	class:LedDeviceFadeCandy
initNetwork	libsrc/leddevice/dev_net/ProviderUdpSSL.cpp	/^bool ProviderUdpSSL::initNetwork()$/;"	f	class:ProviderUdpSSL
initRestAPI	libsrc/leddevice/dev_net/LedDeviceNanoleaf.cpp	/^bool LedDeviceNanoleaf::initRestAPI(const QString &hostname, const int port, const QString &token )$/;"	f	class:LedDeviceNanoleaf
initRestAPI	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^bool LedDevicePhilipsHueBridge::initRestAPI(const QString &hostname, const int port, const QString &token )$/;"	f	class:LedDevicePhilipsHueBridge
initRestAPI	libsrc/leddevice/dev_net/LedDeviceWled.cpp	/^bool LedDeviceWled::initRestAPI(const QString &hostname, const int port )$/;"	f	class:LedDeviceWled
initServer	libsrc/flatbufserver/FlatBufferServer.cpp	/^void FlatBufferServer::initServer()$/;"	f	class:FlatBufferServer
initServer	libsrc/protoserver/ProtoServer.cpp	/^void ProtoServer::initServer()$/;"	f	class:ProtoServer
initServer	libsrc/ssdp/SSDPHandler.cpp	/^void SSDPHandler::initServer()$/;"	f	class:SSDPHandler
initServer	libsrc/ssdp/SSDPServer.cpp	/^void SSDPServer::initServer()$/;"	f	class:SSDPServer
initServer	libsrc/webserver/WebServer.cpp	/^void WebServer::initServer()$/;"	f	class:WebServer
init_device	libsrc/grabber/v4l2/V4L2Grabber.cpp	/^void V4L2Grabber::init_device(VideoStandard videoStandard)$/;"	f	class:V4L2Grabber
init_mmap	libsrc/grabber/v4l2/V4L2Grabber.cpp	/^void V4L2Grabber::init_mmap()$/;"	f	class:V4L2Grabber
init_read	libsrc/grabber/v4l2/V4L2Grabber.cpp	/^void V4L2Grabber::init_read(unsigned int buffer_size)$/;"	f	class:V4L2Grabber
init_userp	libsrc/grabber/v4l2/V4L2Grabber.cpp	/^void V4L2Grabber::init_userp(unsigned int buffer_size)$/;"	f	class:V4L2Grabber
initialize	libsrc/api/JsonAPI.cpp	/^void JsonAPI::initialize(void)$/;"	f	class:JsonAPI
initializeMapping	libsrc/utils/RgbTransform.cpp	/^void RgbTransform::initializeMapping()$/;"	f	class:RgbTransform
inputs	include/grabber/V4L2Grabber.h	/^		QMultiMap<QString, int>	inputs		= QMultiMap<QString, int>();$/;"	m	struct:V4L2Grabber::DeviceProperties
install	libsrc/utils/DefaultSignalHandler.cpp	/^void install()$/;"	f	namespace:DefaultSignalHandler
instance	include/bonjour/bonjourbrowserwrapper.h	/^	static BonjourBrowserWrapper* instance;$/;"	m	class:BonjourBrowserWrapper
instance	include/hyperion/GrabberWrapper.h	/^	static GrabberWrapper* instance;$/;"	m	class:GrabberWrapper
instance	include/utils/NetOrigin.h	/^	static NetOrigin* instance;$/;"	m	class:NetOrigin
instance	libsrc/bonjour/bonjourbrowserwrapper.cpp	/^BonjourBrowserWrapper* BonjourBrowserWrapper::instance = nullptr;$/;"	m	class:BonjourBrowserWrapper	file:
instance	libsrc/hyperion/GrabberWrapper.cpp	/^GrabberWrapper* GrabberWrapper::instance = nullptr;$/;"	m	class:GrabberWrapper	file:
instance	libsrc/utils/NetOrigin.cpp	/^NetOrigin* NetOrigin::instance = nullptr;$/;"	m	class:NetOrigin	file:
instanceExist	include/db/InstanceTable.h	/^	inline bool instanceExist(const quint8& inst)$/;"	f	class:InstanceTable
invalid	libsrc/webserver/WebSocketUtils.h	/^	inline bool invalid(value v)$/;"	f	namespace:OPCODE
io_method	include/grabber/V4L2Grabber.h	/^	enum io_method$/;"	g	class:V4L2Grabber
ion_allocation_data	libsrc/grabber/amlogic/ion.h	/^struct ion_allocation_data {$/;"	s
ion_custom_data	libsrc/grabber/amlogic/ion.h	/^struct ion_custom_data {$/;"	s
ion_fd	libsrc/grabber/amlogic/IonBuffer.cpp	/^int IonBuffer::ion_fd = -1;$/;"	m	class:IonBuffer	file:
ion_fd	libsrc/grabber/amlogic/IonBuffer.h	/^	static int ion_fd; \/\/ = -1;$/;"	m	class:IonBuffer
ion_fd_data	libsrc/grabber/amlogic/ion.h	/^struct ion_fd_data {$/;"	s
ion_handle_data	libsrc/grabber/amlogic/ion.h	/^struct ion_handle_data {$/;"	s
ion_heap_type	libsrc/grabber/amlogic/ion.h	/^enum ion_heap_type {$/;"	g
ion_user_handle_t	libsrc/grabber/amlogic/ion.h	/^typedef int ion_user_handle_t;$/;"	t
isAdminAuthorized	include/api/API.h	/^    bool isAdminAuthorized() { return _adminAuthorized; };$/;"	f	class:API
isAuthRequired	include/hyperion/AuthManager.h	/^	const bool &isAuthRequired() { return _authRequired; };$/;"	f	class:AuthManager
isAuthorized	include/api/API.h	/^    bool isAuthorized() { return _authorized; };$/;"	f	class:API
isBlack	include/blackborder/BlackBorderDetector.h	/^		inline bool isBlack(const Pixel_T & color)$/;"	f	class:hyperion::BlackBorderDetector
isComponentEnabled	libsrc/hyperion/ComponentRegister.cpp	/^int ComponentRegister::isComponentEnabled(const hyperion::Components& comp) const$/;"	f	class:ComponentRegister
isComponentEnabled	libsrc/hyperion/Hyperion.cpp	/^int Hyperion::isComponentEnabled(const hyperion::Components &comp)$/;"	f	class:Hyperion
isConnected	libsrc/leddevice/dev_net/LedDeviceFadeCandy.cpp	/^bool LedDeviceFadeCandy::isConnected()$/;"	f	class:LedDeviceFadeCandy
isCurrentPriority	libsrc/hyperion/Hyperion.cpp	/^bool Hyperion::isCurrentPriority(const int priority) const$/;"	f	class:Hyperion
isEnabled	include/db/InstanceTable.h	/^	inline bool isEnabled(const quint8& inst)$/;"	f	class:InstanceTable
isEnabled	include/leddevice/LedDevice.h	/^	bool isEnabled() const { return _isEnabled; }$/;"	f	class:LedDevice
isHyperionEnabled	libsrc/api/API.cpp	/^bool API::isHyperionEnabled()$/;"	f	class:API
isInError	include/leddevice/LedDevice.h	/^	bool isInError() const { return _isDeviceInError; }$/;"	f	class:LedDevice
isInMusicMode	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^bool YeelightLight::isInMusicMode( bool deviceCheck)$/;"	f	class:YeelightLight
isInited	include/webserver/WebServer.h	/^	bool isInited() const { return _inited; }$/;"	f	class:WebServer
isInitialised	include/leddevice/LedDevice.h	/^	bool isInitialised() const { return _isDeviceInitialised; }$/;"	f	class:LedDevice
isInstAllowed	include/hyperion/HyperionIManager.h	/^	bool isInstAllowed(const quint8& inst) { return (inst > 0); }$/;"	f	class:HyperionIManager
isInterruptionRequested	include/effectengine/Effect.h	/^	bool isInterruptionRequested() { return _interupt; };$/;"	f	class:Effect
isListening	libsrc/webserver/QtHttpServer.h	/^	bool    isListening()               { return m_sockServer->isListening(); };$/;"	f	class:QtHttpServer
isLocalAddress	libsrc/utils/NetOrigin.cpp	/^bool NetOrigin::isLocalAddress(const QHostAddress& address, const QHostAddress& local)$/;"	f	class:NetOrigin
isLocalAdminAuthRequired	include/hyperion/AuthManager.h	/^	const bool &isLocalAdminAuthRequired() { return _localAdminAuthRequired; };$/;"	f	class:AuthManager
isLocalAuthRequired	include/hyperion/AuthManager.h	/^	const bool &isLocalAuthRequired() { return _localAuthRequired; };$/;"	f	class:AuthManager
isOn	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	bool isOn() const { return _isOn; }$/;"	f	class:YeelightLight
isOpen	libsrc/leddevice/dev_hid/LedDeviceLightpack.h	/^	bool isOpen(){ return _isOpen; }$/;"	f	class:LedDeviceLightpack
isPointInLampsReach	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^bool CiColor::isPointInLampsReach(CiColor p, const CiColorTriangle &colorSpace)$/;"	f	class:CiColor
isReady	include/leddevice/LedDevice.h	/^	bool isReady() const { return _isDeviceReady; }$/;"	f	class:LedDevice
isReady	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	bool isReady() const { return !_isInError; }$/;"	f	class:YeelightLight
isSet	include/commandline/Parser.h	/^	bool isSet(const Option &option) const$/;"	f	class:commandline::Parser
isSet	include/commandline/Parser.h	/^	bool isSet(const Option *option) const$/;"	f	class:commandline::Parser
isSet	include/commandline/Parser.h	/^	bool isSet(const QString &name) const$/;"	f	class:commandline::Parser
isSettingGlobal	include/db/SettingsTable.h	/^	inline bool isSettingGlobal(const QString& type) const$/;"	f	class:SettingsTable
isSourceAutoSelectEnabled	include/hyperion/PriorityMuxer.h	/^	bool isSourceAutoSelectEnabled() const { return _sourceAutoSelectEnabled; };$/;"	f	class:PriorityMuxer
isStreamOwner	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^bool LedDevicePhilipsHueBridge::isStreamOwner(const QString &streamOwner)$/;"	f	class:LedDevicePhilipsHueBridge
isTokenAuthBlocked	include/hyperion/AuthManager.h	/^	bool isTokenAuthBlocked() { return (_tokenAuthAttempts.length() >= 25); };$/;"	f	class:AuthManager
isTokenAuthorized	libsrc/api/API.cpp	/^bool API::isTokenAuthorized(const QString &token)$/;"	f	class:API
isTokenAuthorized	libsrc/hyperion/AuthManager.cpp	/^bool AuthManager::isTokenAuthorized(const QString &token)$/;"	f	class:AuthManager
isUserAuthBlocked	include/hyperion/AuthManager.h	/^	bool isUserAuthBlocked() { return (_userAuthAttempts.length() >= 10); };$/;"	f	class:AuthManager
isUserAuthorized	include/db/AuthTable.h	/^	inline bool isUserAuthorized(const QString& user, const QString& pw)$/;"	f	class:AuthTable
isUserAuthorized	libsrc/api/API.cpp	/^bool API::isUserAuthorized(const QString &password)$/;"	f	class:API
isUserAuthorized	libsrc/hyperion/AuthManager.cpp	/^bool AuthManager::isUserAuthorized(const QString &user, const QString &pw)$/;"	f	class:AuthManager
isUserTokenAuthorized	include/db/AuthTable.h	/^	inline bool isUserTokenAuthorized(const QString& usr, const QString& token)$/;"	f	class:AuthTable
isUserTokenAuthorized	libsrc/api/API.cpp	/^bool API::isUserTokenAuthorized(const QString &userToken)$/;"	f	class:API
isUserTokenAuthorized	libsrc/hyperion/AuthManager.cpp	/^bool AuthManager::isUserTokenAuthorized(const QString &usr, const QString &token)$/;"	f	class:AuthManager
isVideoPlaying	libsrc/grabber/amlogic/AmlogicGrabber.cpp	/^bool AmlogicGrabber::isVideoPlaying()$/;"	f	class:AmlogicGrabber
is_control	libsrc/webserver/WebSocketUtils.h	/^	inline bool is_control(value v)$/;"	f	namespace:OPCODE
json2python	libsrc/effectengine/EffectModule.cpp	/^PyObject *EffectModule::json2python(const QJsonValue &jsonData)$/;"	f	class:EffectModule
kCGDirectMainDisplay	include/grabber/OsxFrameGrabberMock.h	/^const int kCGDirectMainDisplay = 0;$/;"	v
kernelType	include/utils/SysInfo.h	/^		QString kernelType;$/;"	m	struct:SysInfo::HyperionSysInfo
kernelVersion	include/utils/SysInfo.h	/^		QString kernelVersion;$/;"	m	struct:SysInfo::HyperionSysInfo
key	libsrc/webserver/WebSocketClient.h	/^		char          key[4];$/;"	m	struct:WebSocketClient::WebSocketHeader
lastColorBlueMap	libsrc/leddevice/dev_net/LedDeviceAtmoOrb.h	/^	QMap<int, int> lastColorBlueMap;$/;"	m	class:LedDeviceAtmoOrb
lastColorGreenMap	libsrc/leddevice/dev_net/LedDeviceAtmoOrb.h	/^	QMap<int, int> lastColorGreenMap;$/;"	m	class:LedDeviceAtmoOrb
lastColorRedMap	libsrc/leddevice/dev_net/LedDeviceAtmoOrb.h	/^	QMap<int, int> lastColorRedMap;$/;"	m	class:LedDeviceAtmoOrb
lastUse	include/hyperion/AuthManager.h	/^		QString lastUse;$/;"	m	struct:AuthManager::AuthDefinition
ledColors	include/hyperion/PriorityMuxer.h	/^		std::vector<ColorRgb> ledColors;$/;"	m	struct:PriorityMuxer::InputInfo
ledMappingType	include/hyperion/ImageProcessor.h	/^	const int & ledMappingType() { return _mappingType; };$/;"	f	class:ImageProcessor
leds	libsrc/hyperion/LedString.cpp	/^const std::vector<Led>& LedString::leds() const$/;"	f	class:LedString
leds	libsrc/hyperion/LedString.cpp	/^std::vector<Led>& LedString::leds()$/;"	f	class:LedString
left	include/grabber/DispmanxFrameGrabberMock.h	/^	int left;$/;"	m	struct:VC_RECT_T
len	libsrc/grabber/amlogic/ion.h	/^	size_t len;$/;"	m	struct:ion_allocation_data
length	include/grabber/V4L2Grabber.h	/^			size_t  length;$/;"	m	struct:V4L2Grabber::buffer
length	libsrc/grabber/amlogic/IonBuffer.h	/^	size_t length = 0;$/;"	m	class:IonBuffer
level	include/utils/Logger.h	/^		LogLevel     level;$/;"	m	struct:Logger::__anon16
levelString	include/utils/Logger.h	/^		QString      levelString;$/;"	m	struct:Logger::__anon16
line	include/utils/Logger.h	/^		unsigned int line;$/;"	m	struct:Logger::__anon16
line	libsrc/utils/Profiler.cpp	/^	unsigned int line;$/;"	m	struct:StopWatchItem	file:
load	include/utils/jsonschema/QJsonFactory.h	/^	static int load(const QString& schema, const QString& config, QJsonObject& json)$/;"	f	class:QJsonFactory
loadEffectDefinition	libsrc/effectengine/EffectFileHandler.cpp	/^bool EffectFileHandler::loadEffectDefinition(const QString &path, const QString &effectConfigFile, EffectDefinition & effectDefinition)$/;"	f	class:EffectFileHandler
loadEffectSchema	libsrc/effectengine/EffectFileHandler.cpp	/^bool EffectFileHandler::loadEffectSchema(const QString &path, const QString &effectSchemaFile, EffectSchema & effectSchema)$/;"	f	class:EffectFileHandler
location	include/ssdp/SSDPDiscover.h	/^	QUrl location;$/;"	m	struct:SSDPService
log	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^void LedDevicePhilipsHueBridge::log(const char* msg, const char* type, ...)$/;"	f	class:LedDevicePhilipsHueBridge
log	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^void YeelightLight::log(const int logLevel, const char* msg, const char* type, ...)$/;"	f	class:YeelightLight
loggerCount	libsrc/utils/Logger.cpp	/^static unsigned int loggerCount         = 0;$/;"	v	file:
loggerId	libsrc/utils/Logger.cpp	/^static unsigned int loggerId            = 0;$/;"	v	file:
loggerName	include/utils/Logger.h	/^		QString      loggerName;$/;"	m	struct:Logger::__anon16
logout	libsrc/api/API.cpp	/^void API::logout()$/;"	f	class:API
mLeds	include/hyperion/LedString.h	/^	std::vector<Led> mLeds;$/;"	m	class:LedString
m_clientHandle	libsrc/webserver/QtHttpRequest.h	/^	QtHttpClientWrapper *         m_clientHandle;$/;"	m	class:QtHttpRequest
m_clientInfo	libsrc/webserver/QtHttpRequest.h	/^	ClientInfo                    m_clientInfo;$/;"	m	class:QtHttpRequest
m_command	libsrc/webserver/QtHttpRequest.h	/^	QString                       m_command;$/;"	m	class:QtHttpRequest
m_currentRequest	libsrc/webserver/QtHttpClientWrapper.h	/^	QtHttpRequest *   m_currentRequest;$/;"	m	class:QtHttpClientWrapper
m_data	libsrc/webserver/QtHttpReply.h	/^	QByteArray                    m_data;$/;"	m	class:QtHttpReply
m_data	libsrc/webserver/QtHttpRequest.h	/^	QByteArray                    m_data;$/;"	m	class:QtHttpRequest
m_guid	libsrc/webserver/QtHttpClientWrapper.h	/^	QString           m_guid;$/;"	m	class:QtHttpClientWrapper
m_headersHash	libsrc/webserver/QtHttpReply.h	/^	QHash<QByteArray, QByteArray> m_headersHash;$/;"	m	class:QtHttpReply
m_headersHash	libsrc/webserver/QtHttpRequest.h	/^	QHash<QByteArray, QByteArray> m_headersHash;$/;"	m	class:QtHttpRequest
m_localConnection	libsrc/webserver/QtHttpClientWrapper.h	/^	const bool        m_localConnection;$/;"	m	class:QtHttpClientWrapper
m_netOrigin	libsrc/webserver/QtHttpServer.h	/^	NetOrigin*                                 m_netOrigin;$/;"	m	class:QtHttpServer
m_parsingStatus	libsrc/webserver/QtHttpClientWrapper.h	/^	ParsingStatus     m_parsingStatus;$/;"	m	class:QtHttpClientWrapper
m_postData	libsrc/webserver/QtHttpRequest.h	/^	QtHttpPostData                m_postData;$/;"	m	class:QtHttpRequest
m_serverHandle	libsrc/webserver/QtHttpClientWrapper.h	/^	QtHttpServer  *   m_serverHandle;$/;"	m	class:QtHttpClientWrapper
m_serverHandle	libsrc/webserver/QtHttpReply.h	/^	QtHttpServer *                m_serverHandle;$/;"	m	class:QtHttpReply
m_serverHandle	libsrc/webserver/QtHttpRequest.h	/^	QtHttpServer *                m_serverHandle;$/;"	m	class:QtHttpRequest
m_serverName	libsrc/webserver/QtHttpServer.h	/^	QString                                    m_serverName;$/;"	m	class:QtHttpServer
m_sockClient	libsrc/webserver/QtHttpClientWrapper.h	/^	QTcpSocket    *   m_sockClient;$/;"	m	class:QtHttpClientWrapper
m_sockServer	libsrc/webserver/QtHttpServer.h	/^	QtHttpServerWrapper *                      m_sockServer;$/;"	m	class:QtHttpServer
m_socksClientsHash	libsrc/webserver/QtHttpServer.h	/^	QHash<QTcpSocket *, QtHttpClientWrapper *> m_socksClientsHash;$/;"	m	class:QtHttpServer
m_sslCerts	libsrc/webserver/QtHttpServer.h	/^	QList<QSslCertificate>                     m_sslCerts;$/;"	m	class:QtHttpServer
m_sslKey	libsrc/webserver/QtHttpServer.h	/^	QSslKey                                    m_sslKey;$/;"	m	class:QtHttpServer
m_statusCode	libsrc/webserver/QtHttpReply.h	/^	StatusCode                    m_statusCode;$/;"	m	class:QtHttpReply
m_url	libsrc/webserver/QtHttpRequest.h	/^	QUrl                          m_url;$/;"	m	class:QtHttpRequest
m_useChunked	libsrc/webserver/QtHttpReply.h	/^	bool                          m_useChunked;$/;"	m	class:QtHttpReply
m_useSsl	libsrc/webserver/QtHttpServer.h	/^	bool                                       m_useSsl;$/;"	m	class:QtHttpServer
m_useSsl	libsrc/webserver/QtHttpServer.h	/^	bool m_useSsl;$/;"	m	class:QtHttpServerWrapper
m_webJsonRpc	libsrc/webserver/QtHttpClientWrapper.h	/^	WebJsonRpc *      m_webJsonRpc;$/;"	m	class:QtHttpClientWrapper
m_websocketClient	libsrc/webserver/QtHttpClientWrapper.h	/^	WebSocketClient * m_websocketClient;$/;"	m	class:QtHttpClientWrapper
mainThreadState	libsrc/effectengine/Effect.cpp	/^PyThreadState* mainThreadState;$/;"	v
majorVersion	libsrc/leddevice/dev_hid/LedDeviceLightpack.h	/^		int majorVersion;$/;"	m	struct:LedDeviceLightpack::Version
makeFrameHeader	libsrc/webserver/WebSocketClient.cpp	/^QByteArray WebSocketClient::makeFrameHeader(quint8 opCode, quint64 payloadLength, bool lastFrame)$/;"	f	class:WebSocketClient
manager	include/hyperion/AuthManager.h	/^	static AuthManager *manager;$/;"	m	class:AuthManager
manager	libsrc/hyperion/AuthManager.cpp	/^AuthManager *AuthManager::manager = nullptr;$/;"	m	class:AuthManager	file:
mapProperties	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^void YeelightLight::mapProperties(const QJsonObject &properties)$/;"	f	class:YeelightLight
mappingTypeToInt	libsrc/hyperion/ImageProcessor.cpp	/^int ImageProcessor::mappingTypeToInt(QString mappingType)$/;"	f	class:ImageProcessor
mappingTypeToStr	libsrc/hyperion/ImageProcessor.cpp	/^QString ImageProcessor::mappingTypeToStr(int mappingType)$/;"	f	class:ImageProcessor
masked	libsrc/webserver/WebSocketClient.h	/^		bool          masked;$/;"	m	struct:WebSocketClient::WebSocketHeader
maxX_frac	include/hyperion/LedString.h	/^	double maxX_frac;$/;"	m	struct:Led
maxY_frac	include/hyperion/LedString.h	/^	double maxY_frac;$/;"	m	struct:Led
mbedtls_calloc	libsrc/leddevice/dev_net/ProviderUdpSSL.h	31;"	d
mbedtls_exit	libsrc/leddevice/dev_net/ProviderUdpSSL.h	33;"	d
mbedtls_fprintf	libsrc/leddevice/dev_net/ProviderUdpSSL.h	29;"	d
mbedtls_free	libsrc/leddevice/dev_net/ProviderUdpSSL.h	32;"	d
mbedtls_printf	libsrc/leddevice/dev_net/ProviderUdpSSL.h	28;"	d
mbedtls_snprintf	libsrc/leddevice/dev_net/ProviderUdpSSL.h	30;"	d
mbedtls_time	libsrc/leddevice/dev_net/ProviderUdpSSL.h	26;"	d
mbedtls_time_t	libsrc/leddevice/dev_net/ProviderUdpSSL.h	27;"	d
memptr	include/utils/Image.h	/^	Pixel_T* memptr()$/;"	f	class:Image
memptr	include/utils/Image.h	/^	const Pixel_T* memptr() const$/;"	f	class:Image
meson_phys_data	libsrc/grabber/amlogic/meson_ion.h	/^struct meson_phys_data {$/;"	s
message	include/utils/Logger.h	/^		QString      message;$/;"	m	struct:Logger::__anon16
minX_frac	include/hyperion/LedString.h	/^	double minX_frac;$/;"	m	struct:Led
minY_frac	include/hyperion/LedString.h	/^	double minY_frac;$/;"	m	struct:Led
minorVersion	libsrc/leddevice/dev_hid/LedDeviceLightpack.h	/^		int minorVersion;$/;"	m	struct:LedDeviceLightpack::Version
modify	include/utils/jsonschema/QJsonUtils.h	/^	static void modify(QJsonObject& value, QStringList path, const QJsonValue& newValue = QJsonValue::Null, QString propertyName = "")$/;"	f	class:QJsonUtils
modifyValue	include/utils/jsonschema/QJsonUtils.h	/^	static void modifyValue(QJsonValue source, QJsonObject& target, QStringList path, const QJsonValue& newValue, QString& property)$/;"	f	class:QJsonUtils
moduleDef	include/effectengine/EffectModule.h	/^	static struct PyModuleDef moduleDef;$/;"	m	class:EffectModule	typeref:struct:EffectModule::PyModuleDef
moduleDef	libsrc/effectengine/EffectModule.cpp	/^struct PyModuleDef EffectModule::moduleDef = {$/;"	m	class:EffectModule	typeref:struct:EffectModule::	file:
msleep	include/utils/Sleep.h	/^	static inline void msleep(unsigned long msecs) {$/;"	f	class:Sleep
name	include/effectengine/ActiveEffectDefinition.h	/^	QString name;$/;"	m	struct:ActiveEffectDefinition
name	include/effectengine/EffectDefinition.h	/^	QString name, script, file;$/;"	m	struct:EffectDefinition
name	include/grabber/V4L2Grabber.h	/^		QString					name		= QString();$/;"	m	struct:V4L2Grabber::DeviceProperties
name	libsrc/commandline/Option.cpp	/^QString Option::name()$/;"	f	class:Option
nativeEventFilter	libsrc/grabber/x11/X11Grabber.cpp	/^bool X11Grabber::nativeEventFilter(const QByteArray & eventType, void * message, long int * \/*result*\/)$/;"	f	class:X11Grabber
newConnection	libsrc/boblightserver/BoblightServer.cpp	/^void BoblightServer::newConnection()$/;"	f	class:BoblightServer
newConnection	libsrc/flatbufserver/FlatBufferServer.cpp	/^void FlatBufferServer::newConnection()$/;"	f	class:FlatBufferServer
newConnection	libsrc/jsonserver/JsonServer.cpp	/^void JsonServer::newConnection()$/;"	f	class:JsonServer
newConnection	libsrc/protoserver/ProtoServer.cpp	/^void ProtoServer::newConnection()$/;"	f	class:ProtoServer
newFrame	libsrc/grabber/v4l2/V4L2Wrapper.cpp	/^void V4L2Wrapper::newFrame(const Image<ColorRgb> &image)$/;"	f	class:V4L2Wrapper
newPendingTokenRequest	libsrc/api/JsonAPI.cpp	/^void JsonAPI::newPendingTokenRequest(const QString &id, const QString &comment)$/;"	f	class:JsonAPI
noSignalDetection	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^bool LedDevicePhilipsHue::noSignalDetection()$/;"	f	class:LedDevicePhilipsHue
noSignalTimeout	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^void LedDevicePhilipsHue::noSignalTimeout()$/;"	f	class:LedDevicePhilipsHue
noexcept	libsrc/grabber/amlogic/IonBuffer.h	/^	virtual ~IonBuffer() noexcept(false)$/;"	f	class:IonBuffer
onClientConnected	libsrc/webserver/QtHttpServer.cpp	/^void QtHttpServer::onClientConnected (void)$/;"	f	class:QtHttpServer
onClientDataReceived	libsrc/webserver/QtHttpClientWrapper.cpp	/^void QtHttpClientWrapper::onClientDataReceived (void)$/;"	f	class:QtHttpClientWrapper
onClientDisconnected	libsrc/webserver/QtHttpServer.cpp	/^void QtHttpServer::onClientDisconnected (void)$/;"	f	class:QtHttpServer
onClientSslEncrypted	libsrc/webserver/QtHttpServer.h	/^	void onClientSslEncrypted       (void)                            {                   };$/;"	f	class:QtHttpServer
onClientSslErrors	libsrc/webserver/QtHttpServer.h	/^	void onClientSslErrors          (const QList<QSslError> & errors) { Q_UNUSED (errors) };$/;"	f	class:QtHttpServer
onClientSslModeChanged	libsrc/webserver/QtHttpServer.h	/^	void onClientSslModeChanged     (QSslSocket::SslMode mode)        { Q_UNUSED (mode)   };$/;"	f	class:QtHttpServer
onClientSslPeerVerifyError	libsrc/webserver/QtHttpServer.h	/^	void onClientSslPeerVerifyError (const QSslError & err)           { Q_UNUSED (err)    };$/;"	f	class:QtHttpServer
onReplySendDataRequested	libsrc/webserver/QtHttpClientWrapper.cpp	/^void QtHttpClientWrapper::onReplySendDataRequested (void)$/;"	f	class:QtHttpClientWrapper
onReplySendHeadersRequested	libsrc/webserver/QtHttpClientWrapper.cpp	/^void QtHttpClientWrapper::onReplySendHeadersRequested (void)$/;"	f	class:QtHttpClientWrapper
onRequestNeedsReply	libsrc/webserver/StaticFileServing.cpp	/^void StaticFileServing::onRequestNeedsReply (QtHttpRequest * request, QtHttpReply * reply)$/;"	f	class:StaticFileServing
onServerError	libsrc/webserver/WebServer.cpp	/^void WebServer::onServerError (QString msg)$/;"	f	class:WebServer
onServerStarted	libsrc/webserver/WebServer.cpp	/^void WebServer::onServerStarted (quint16 port)$/;"	f	class:WebServer
onServerStopped	libsrc/webserver/WebServer.cpp	/^void WebServer::onServerStopped ()$/;"	f	class:WebServer
opCode	libsrc/webserver/WebSocketClient.h	/^		quint8        opCode;$/;"	m	struct:WebSocketClient::WebSocketHeader
open	libsrc/leddevice/LedDevice.cpp	/^int LedDevice::open()$/;"	f	class:LedDevice
open	libsrc/leddevice/LedDeviceTemplate.cpp	/^int LedDeviceTemplate::open()$/;"	f	class:LedDeviceTemplate
open	libsrc/leddevice/dev_hid/LedDeviceHyperionUsbasp.cpp	/^int LedDeviceHyperionUsbasp::open()$/;"	f	class:LedDeviceHyperionUsbasp
open	libsrc/leddevice/dev_hid/LedDeviceLightpack.cpp	/^int LedDeviceLightpack::open()$/;"	f	class:LedDeviceLightpack
open	libsrc/leddevice/dev_hid/LedDeviceMultiLightpack.cpp	/^int LedDeviceMultiLightpack::open()$/;"	f	class:LedDeviceMultiLightpack
open	libsrc/leddevice/dev_hid/ProviderHID.cpp	/^int ProviderHID::open()$/;"	f	class:ProviderHID
open	libsrc/leddevice/dev_net/LedDeviceAtmoOrb.cpp	/^int LedDeviceAtmoOrb::open()$/;"	f	class:LedDeviceAtmoOrb
open	libsrc/leddevice/dev_net/LedDeviceFadeCandy.cpp	/^int LedDeviceFadeCandy::open()$/;"	f	class:LedDeviceFadeCandy
open	libsrc/leddevice/dev_net/LedDeviceNanoleaf.cpp	/^int LedDeviceNanoleaf::open()$/;"	f	class:LedDeviceNanoleaf
open	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^int LedDevicePhilipsHue::open()$/;"	f	class:LedDevicePhilipsHue
open	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^int LedDevicePhilipsHueBridge::open()$/;"	f	class:LedDevicePhilipsHueBridge
open	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^bool YeelightLight::open()$/;"	f	class:YeelightLight
open	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^int LedDeviceYeelight::open()$/;"	f	class:LedDeviceYeelight
open	libsrc/leddevice/dev_net/ProviderUdp.cpp	/^int ProviderUdp::open()$/;"	f	class:ProviderUdp
open	libsrc/leddevice/dev_net/ProviderUdpSSL.cpp	/^int ProviderUdpSSL::open()$/;"	f	class:ProviderUdpSSL
open	libsrc/leddevice/dev_other/LedDeviceFile.cpp	/^int LedDeviceFile::open()$/;"	f	class:LedDeviceFile
open	libsrc/leddevice/dev_other/LedDevicePiBlaster.cpp	/^int LedDevicePiBlaster::open()$/;"	f	class:LedDevicePiBlaster
open	libsrc/leddevice/dev_rpi_pwm/LedDeviceWS281x.cpp	/^int LedDeviceWS281x::open()$/;"	f	class:LedDeviceWS281x
open	libsrc/leddevice/dev_serial/ProviderRs232.cpp	/^int ProviderRs232::open()$/;"	f	class:ProviderRs232
open	libsrc/leddevice/dev_spi/ProviderSpi.cpp	/^int ProviderSpi::open()$/;"	f	class:ProviderSpi
open	libsrc/leddevice/dev_tinker/LedDeviceTinkerforge.cpp	/^int LedDeviceTinkerforge::open()$/;"	f	class:LedDeviceTinkerforge
openDev	libsrc/grabber/amlogic/AmlogicGrabber.cpp	/^bool AmlogicGrabber::openDev(int &fd, const char* dev)$/;"	f	class:AmlogicGrabber
openDevice	libsrc/leddevice/dev_hid/LedDeviceHyperionUsbasp.cpp	/^libusb_device_handle * LedDeviceHyperionUsbasp::openDevice(libusb_device *device)$/;"	f	class:LedDeviceHyperionUsbasp
openDevice	libsrc/leddevice/dev_hid/LedDeviceLightpack.cpp	/^libusb_device_handle * LedDeviceLightpack::openDevice(libusb_device *device)$/;"	f	class:LedDeviceLightpack
openStream	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^bool LedDevicePhilipsHue::openStream()$/;"	f	class:LedDevicePhilipsHue
open_device	libsrc/grabber/v4l2/V4L2Grabber.cpp	/^bool V4L2Grabber::open_device()$/;"	f	class:V4L2Grabber
operator !=	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^bool operator != (const CiColor& p1, const CiColor& p2)$/;"	f
operator ()	include/utils/Image.h	/^	Pixel_T& operator()(const unsigned x, const unsigned y)$/;"	f	class:Image
operator ()	include/utils/Image.h	/^	const Pixel_T& operator()(const unsigned x, const unsigned y) const$/;"	f	class:Image
operator ()	libsrc/effectengine/EffectFileHandler.cpp	/^	bool operator()(EffectDefinition const& effectDefinition) const$/;"	f	struct:find_effect
operator ()	libsrc/effectengine/EffectFileHandler.cpp	/^	bool operator()(EffectSchema const& schema) const$/;"	f	struct:find_schema
operator <	include/utils/ColorBgr.h	/^inline bool operator<(const ColorBgr & lhs, const ColorBgr & rhs)$/;"	f
operator <	include/utils/ColorRgb.h	/^inline bool operator<(const ColorRgb & lhs, const ColorRgb & rhs)$/;"	f
operator <	include/utils/ColorRgbw.h	/^inline bool operator<(const ColorRgbw & lhs, const ColorRgbw & rhs)$/;"	f
operator <<	include/utils/ColorArgb.h	/^inline std::ostream& operator<<(std::ostream& os, const ColorArgb& color)$/;"	f
operator <<	include/utils/ColorBgr.h	/^inline std::ostream& operator<<(std::ostream& os, const ColorBgr& color)$/;"	f
operator <<	include/utils/ColorRgb.h	/^inline QTextStream& operator<<(QTextStream &os, const ColorRgb& color)$/;"	f
operator <<	include/utils/ColorRgb.h	/^inline std::ostream& operator<<(std::ostream& os, const ColorRgb& color)$/;"	f
operator <<	include/utils/ColorRgba.h	/^inline std::ostream& operator<<(std::ostream& os, const ColorRgba& color)$/;"	f
operator <<	include/utils/ColorRgbw.h	/^inline std::ostream& operator<<(std::ostream& os, const ColorRgbw& color)$/;"	f
operator <=	include/utils/ColorBgr.h	/^inline bool operator<=(const ColorBgr & lhs, const ColorBgr & rhs)$/;"	f
operator <=	include/utils/ColorRgb.h	/^inline bool operator<=(const ColorRgb & lhs, const ColorRgb & rhs)$/;"	f
operator <=	include/utils/ColorRgbw.h	/^inline bool operator<=(const ColorRgbw & lhs, const ColorRgbw & rhs)$/;"	f
operator =	include/utils/Image.h	/^	Image& operator=(Image rhs)$/;"	f	class:Image
operator ==	include/blackborder/BlackBorderDetector.h	/^		inline bool operator== (const BlackBorder& other) const$/;"	f	struct:hyperion::BlackBorder
operator ==	include/bonjour/bonjourrecord.h	/^	bool operator==(const BonjourRecord &other) const$/;"	f	class:BonjourRecord
operator ==	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^bool operator ==(const CiColor& p1, const CiColor& p2)$/;"	f
operator ==	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^		bool operator == (yeelightAddress const& a) const$/;"	f	struct:LedDeviceYeelight::yeelightAddress
operator >	include/utils/ColorRgb.h	/^inline bool operator>(const ColorRgb & lhs, const ColorRgb & rhs)$/;"	f
operator >=	include/utils/ColorRgb.h	/^inline bool operator>=(const ColorRgb & lhs, const ColorRgb & rhs)$/;"	f
optionNames	include/commandline/Parser.h	/^	QStringList optionNames() const$/;"	f	class:commandline::Parser
options	libsrc/leddevice/dev_net/LedDeviceUdpE131.h	/^		uint8_t  options;$/;"	m	struct:__anon6::__anon7
origin	include/api/apiStructs.h	/^    QString origin;$/;"	m	struct:EffectCmdData
origin	include/api/apiStructs.h	/^    QString origin;$/;"	m	struct:ImageCmdData
origin	include/api/apiStructs.h	/^    const QString origin;$/;"	m	struct:registerData
origin	include/hyperion/PriorityMuxer.h	/^		QString origin;$/;"	m	struct:PriorityMuxer::InputInfo
otherHeaders	include/ssdp/SSDPDiscover.h	/^	QMap <QString,QString> otherHeaders;$/;"	m	struct:SSDPService
outputDelay	libsrc/hyperion/LinearColorSmoothing.h	/^		unsigned outputDelay;$/;"	m	struct:LinearColorSmoothing::SMOOTHING_CFG
outputHandler	include/grabber/V4L2Grabber.h	/^	static void outputHandler(j_common_ptr cInfo)$/;"	f	class:V4L2Grabber
override	include/commandline/ColorOption.h	/^    virtual bool validate(Parser & parser, QString & value) override;$/;"	m	class:commandline::ColorOption
override	include/commandline/ColorsOption.h	/^    virtual bool validate(Parser & parser, QString & value) override;$/;"	m	class:commandline::ColorsOption
override	include/commandline/ImageOption.h	/^    virtual bool validate(Parser & parser, QString & value) override;$/;"	m	class:commandline::ImageOption
override	include/commandline/Parser.h	/^	~Parser() override;$/;"	m	class:commandline::Parser
override	include/commandline/ValidatorOption.h	/^    virtual bool validate(Parser & parser, QString &value) override;$/;"	m	class:commandline::ValidatorOption
override	include/grabber/AmlogicGrabber.h	/^	~AmlogicGrabber() override;$/;"	m	class:AmlogicGrabber
override	include/grabber/DispmanxFrameGrabber.h	/^	~DispmanxFrameGrabber() override;$/;"	m	class:DispmanxFrameGrabber
override	include/grabber/OsxFrameGrabber.h	/^	~OsxFrameGrabber() override;$/;"	m	class:OsxFrameGrabber
override	include/grabber/QtGrabber.h	/^	~QtGrabber() override;$/;"	m	class:QtGrabber
override	include/grabber/V4L2Grabber.h	/^					double horizontalMax) override;$/;"	m	class:V4L2Grabber
override	include/grabber/V4L2Grabber.h	/^					int noSignalCounterThreshold = 50) override;$/;"	m	class:V4L2Grabber
override	include/grabber/V4L2Grabber.h	/^	QMultiMap<QString, int> getV4L2deviceInputs(QString devicePath) override;$/;"	m	class:V4L2Grabber
override	include/grabber/V4L2Grabber.h	/^	QString getV4L2deviceName(QString devicePath) override;$/;"	m	class:V4L2Grabber
override	include/grabber/V4L2Grabber.h	/^	QStringList getFramerates(QString devicePath) override;$/;"	m	class:V4L2Grabber
override	include/grabber/V4L2Grabber.h	/^	QStringList getResolutions(QString devicePath) override;$/;"	m	class:V4L2Grabber
override	include/grabber/V4L2Grabber.h	/^	QStringList getV4L2devices() override;$/;"	m	class:V4L2Grabber
override	include/grabber/V4L2Grabber.h	/^	bool setFramerate(int fps) override;$/;"	m	class:V4L2Grabber
override	include/grabber/V4L2Grabber.h	/^	bool setInput(int input) override;$/;"	m	class:V4L2Grabber
override	include/grabber/V4L2Grabber.h	/^	bool setWidthHeight(int width, int height) override;$/;"	m	class:V4L2Grabber
override	include/grabber/V4L2Grabber.h	/^	void setDeviceVideoStandard(QString device, VideoStandard videoStandard) override;$/;"	m	class:V4L2Grabber
override	include/grabber/V4L2Grabber.h	/^	void setPixelDecimation(int pixelDecimation) override;$/;"	m	class:V4L2Grabber
override	include/grabber/V4L2Grabber.h	/^	void setSignalDetectionEnable(bool enable) override;$/;"	m	class:V4L2Grabber
override	include/grabber/V4L2Grabber.h	/^	~V4L2Grabber() override;$/;"	m	class:V4L2Grabber
override	include/grabber/V4L2Wrapper.h	/^	~V4L2Wrapper() override;$/;"	m	class:V4L2Wrapper
override	include/grabber/X11Grabber.h	/^	bool nativeEventFilter(const QByteArray & eventType, void * message, long int * result) override;$/;"	m	class:X11Grabber
override	include/grabber/X11Grabber.h	/^	~X11Grabber() override;$/;"	m	class:X11Grabber
override	include/grabber/X11Wrapper.h	/^	~X11Wrapper() override;$/;"	m	class:X11Wrapper
override	include/hyperion/Hyperion.h	/^	~Hyperion() override;$/;"	m	class:Hyperion
override	include/leddevice/LedDevice.h	/^	~LedDevice() override;$/;"	m	class:LedDevice
override	include/leddevice/LedDeviceWrapper.h	/^	~LedDeviceWrapper() override;$/;"	m	class:LedDeviceWrapper
override	include/protoserver/ProtoServer.h	/^	~ProtoServer() override;$/;"	m	class:ProtoServer
override	include/webserver/WebServer.h	/^	~WebServer () override;$/;"	m	class:WebServer
override	libsrc/boblightserver/BoblightClientConnection.h	/^	~BoblightClientConnection() override;$/;"	m	class:BoblightClientConnection
override	libsrc/leddevice/LedDeviceTemplate.h	/^	virtual bool init(const QJsonObject &deviceConfig) override;$/;"	m	class:LedDeviceTemplate
override	libsrc/leddevice/LedDeviceTemplate.h	/^	virtual int close() override;$/;"	m	class:LedDeviceTemplate
override	libsrc/leddevice/LedDeviceTemplate.h	/^	virtual int open() override;$/;"	m	class:LedDeviceTemplate
override	libsrc/leddevice/LedDeviceTemplate.h	/^	virtual int write(const std::vector<ColorRgb> & ledValues) override;$/;"	m	class:LedDeviceTemplate
override	libsrc/leddevice/dev_hid/LedDeviceHyperionUsbasp.h	/^	bool init(const QJsonObject &deviceConfig) override;$/;"	m	class:LedDeviceHyperionUsbasp
override	libsrc/leddevice/dev_hid/LedDeviceHyperionUsbasp.h	/^	int open() override;$/;"	m	class:LedDeviceHyperionUsbasp
override	libsrc/leddevice/dev_hid/LedDeviceHyperionUsbasp.h	/^	virtual int close() override;$/;"	m	class:LedDeviceHyperionUsbasp
override	libsrc/leddevice/dev_hid/LedDeviceHyperionUsbasp.h	/^	virtual int write(const std::vector<ColorRgb>& ledValues) override;$/;"	m	class:LedDeviceHyperionUsbasp
override	libsrc/leddevice/dev_hid/LedDeviceHyperionUsbasp.h	/^	virtual ~LedDeviceHyperionUsbasp() override;$/;"	m	class:LedDeviceHyperionUsbasp
override	libsrc/leddevice/dev_hid/LedDeviceLightpack.h	/^	virtual bool init(const QJsonObject &deviceConfig) override;$/;"	m	class:LedDeviceLightpack
override	libsrc/leddevice/dev_hid/LedDeviceLightpack.h	/^	virtual bool powerOff() override;$/;"	m	class:LedDeviceLightpack
override	libsrc/leddevice/dev_hid/LedDeviceLightpack.h	/^	virtual int close() override;$/;"	m	class:LedDeviceLightpack
override	libsrc/leddevice/dev_hid/LedDeviceLightpack.h	/^	virtual int open() override;$/;"	m	class:LedDeviceLightpack
override	libsrc/leddevice/dev_hid/LedDeviceLightpack.h	/^	virtual int write(const std::vector<ColorRgb> & ledValues) override;$/;"	m	class:LedDeviceLightpack
override	libsrc/leddevice/dev_hid/LedDeviceLightpack.h	/^	virtual ~LedDeviceLightpack() override;$/;"	m	class:LedDeviceLightpack
override	libsrc/leddevice/dev_hid/LedDeviceMultiLightpack.h	/^	int write(const std::vector<ColorRgb> & ledValues) override;$/;"	m	class:LedDeviceMultiLightpack
override	libsrc/leddevice/dev_hid/LedDeviceMultiLightpack.h	/^	virtual bool init(const QJsonObject &deviceConfig) override;$/;"	m	class:LedDeviceMultiLightpack
override	libsrc/leddevice/dev_hid/LedDeviceMultiLightpack.h	/^	virtual bool powerOff() override;$/;"	m	class:LedDeviceMultiLightpack
override	libsrc/leddevice/dev_hid/LedDeviceMultiLightpack.h	/^	virtual int close() override;$/;"	m	class:LedDeviceMultiLightpack
override	libsrc/leddevice/dev_hid/LedDeviceMultiLightpack.h	/^	virtual int open() override;$/;"	m	class:LedDeviceMultiLightpack
override	libsrc/leddevice/dev_hid/LedDeviceMultiLightpack.h	/^	virtual ~LedDeviceMultiLightpack() override;$/;"	m	class:LedDeviceMultiLightpack
override	libsrc/leddevice/dev_hid/LedDevicePaintpack.h	/^	virtual bool init(const QJsonObject &deviceConfig) override;$/;"	m	class:LedDevicePaintpack
override	libsrc/leddevice/dev_hid/LedDevicePaintpack.h	/^	virtual int write(const std::vector<ColorRgb> & ledValues) override;$/;"	m	class:LedDevicePaintpack
override	libsrc/leddevice/dev_hid/LedDeviceRawHID.h	/^	virtual bool init(const QJsonObject &deviceConfig) override;$/;"	m	class:LedDeviceRawHID
override	libsrc/leddevice/dev_hid/LedDeviceRawHID.h	/^	virtual int write(const std::vector<ColorRgb> & ledValues) override;$/;"	m	class:LedDeviceRawHID
override	libsrc/leddevice/dev_hid/ProviderHID.h	/^	virtual QJsonObject discover() override;$/;"	m	class:ProviderHID
override	libsrc/leddevice/dev_hid/ProviderHID.h	/^	virtual bool init(const QJsonObject &deviceConfig) override;$/;"	m	class:ProviderHID
override	libsrc/leddevice/dev_hid/ProviderHID.h	/^	virtual int close() override;$/;"	m	class:ProviderHID
override	libsrc/leddevice/dev_hid/ProviderHID.h	/^	virtual int open() override;$/;"	m	class:ProviderHID
override	libsrc/leddevice/dev_hid/ProviderHID.h	/^	virtual ~ProviderHID() override;$/;"	m	class:ProviderHID
override	libsrc/leddevice/dev_net/LedDeviceAtmoOrb.h	/^	virtual bool init(const QJsonObject &deviceConfig) override;$/;"	m	class:LedDeviceAtmoOrb
override	libsrc/leddevice/dev_net/LedDeviceAtmoOrb.h	/^	virtual int close() override;$/;"	m	class:LedDeviceAtmoOrb
override	libsrc/leddevice/dev_net/LedDeviceAtmoOrb.h	/^	virtual int open() override;$/;"	m	class:LedDeviceAtmoOrb
override	libsrc/leddevice/dev_net/LedDeviceAtmoOrb.h	/^	virtual int write(const std::vector<ColorRgb> & ledValues) override;$/;"	m	class:LedDeviceAtmoOrb
override	libsrc/leddevice/dev_net/LedDeviceAtmoOrb.h	/^	virtual ~LedDeviceAtmoOrb() override;$/;"	m	class:LedDeviceAtmoOrb
override	libsrc/leddevice/dev_net/LedDeviceFadeCandy.h	/^	virtual bool init(const QJsonObject &deviceConfig) override;$/;"	m	class:LedDeviceFadeCandy
override	libsrc/leddevice/dev_net/LedDeviceFadeCandy.h	/^	virtual int close() override;$/;"	m	class:LedDeviceFadeCandy
override	libsrc/leddevice/dev_net/LedDeviceFadeCandy.h	/^	virtual int open() override;$/;"	m	class:LedDeviceFadeCandy
override	libsrc/leddevice/dev_net/LedDeviceFadeCandy.h	/^	virtual int write(const std::vector<ColorRgb> & ledValues) override;$/;"	m	class:LedDeviceFadeCandy
override	libsrc/leddevice/dev_net/LedDeviceFadeCandy.h	/^	~LedDeviceFadeCandy() override;$/;"	m	class:LedDeviceFadeCandy
override	libsrc/leddevice/dev_net/LedDeviceNanoleaf.h	/^	bool init(const QJsonObject &deviceConfig) override;$/;"	m	class:LedDeviceNanoleaf
override	libsrc/leddevice/dev_net/LedDeviceNanoleaf.h	/^	virtual QJsonObject discover() override;$/;"	m	class:LedDeviceNanoleaf
override	libsrc/leddevice/dev_net/LedDeviceNanoleaf.h	/^	virtual QJsonObject getProperties(const QJsonObject& params) override;$/;"	m	class:LedDeviceNanoleaf
override	libsrc/leddevice/dev_net/LedDeviceNanoleaf.h	/^	virtual bool powerOff() override;$/;"	m	class:LedDeviceNanoleaf
override	libsrc/leddevice/dev_net/LedDeviceNanoleaf.h	/^	virtual bool powerOn() override;$/;"	m	class:LedDeviceNanoleaf
override	libsrc/leddevice/dev_net/LedDeviceNanoleaf.h	/^	virtual int open() override;$/;"	m	class:LedDeviceNanoleaf
override	libsrc/leddevice/dev_net/LedDeviceNanoleaf.h	/^	virtual int write(const std::vector<ColorRgb> & ledValues) override;$/;"	m	class:LedDeviceNanoleaf
override	libsrc/leddevice/dev_net/LedDeviceNanoleaf.h	/^	virtual void identify(const QJsonObject& params) override;$/;"	m	class:LedDeviceNanoleaf
override	libsrc/leddevice/dev_net/LedDeviceNanoleaf.h	/^	virtual ~LedDeviceNanoleaf() override;$/;"	m	class:LedDeviceNanoleaf
override	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	const int * getCiphersuites() override;$/;"	m	class:LedDevicePhilipsHueBridge
override	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	virtual QJsonObject discover() override;$/;"	m	class:LedDevicePhilipsHue
override	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	virtual QJsonObject getProperties(const QJsonObject& params) override;$/;"	m	class:LedDevicePhilipsHue
override	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	virtual bool init(const QJsonObject &deviceConfig) override;$/;"	m	class:LedDevicePhilipsHue
override	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	virtual bool init(const QJsonObject &deviceConfig) override;$/;"	m	class:LedDevicePhilipsHueBridge
override	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	virtual bool powerOff() override;$/;"	m	class:LedDevicePhilipsHue
override	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	virtual bool powerOn() override;$/;"	m	class:LedDevicePhilipsHue
override	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	virtual bool restoreState() override;$/;"	m	class:LedDevicePhilipsHue
override	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	virtual bool storeState() override;$/;"	m	class:LedDevicePhilipsHue
override	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	virtual bool switchOff() override;$/;"	m	class:LedDevicePhilipsHue
override	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	virtual int close() override;$/;"	m	class:LedDevicePhilipsHue
override	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	virtual int close() override;$/;"	m	class:LedDevicePhilipsHueBridge
override	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	virtual int open() override;$/;"	m	class:LedDevicePhilipsHue
override	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	virtual int open(void) override;$/;"	m	class:LedDevicePhilipsHueBridge
override	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	virtual int write(const std::vector<ColorRgb>& ledValues) override;$/;"	m	class:LedDevicePhilipsHue
override	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	virtual void identify(const QJsonObject& params) override;$/;"	m	class:LedDevicePhilipsHue
override	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	virtual void stop() override;$/;"	m	class:LedDevicePhilipsHue
override	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	~LedDevicePhilipsHueBridge() override;$/;"	m	class:LedDevicePhilipsHueBridge
override	libsrc/leddevice/dev_net/LedDeviceTpm2net.h	/^	virtual bool init(const QJsonObject &deviceConfig) override;$/;"	m	class:LedDeviceTpm2net
override	libsrc/leddevice/dev_net/LedDeviceTpm2net.h	/^	virtual int write(const std::vector<ColorRgb> & ledValues) override;$/;"	m	class:LedDeviceTpm2net
override	libsrc/leddevice/dev_net/LedDeviceUdpArtNet.h	/^	virtual bool init(const QJsonObject &deviceConfig) override;$/;"	m	class:LedDeviceUdpArtNet
override	libsrc/leddevice/dev_net/LedDeviceUdpArtNet.h	/^	virtual int write(const std::vector<ColorRgb> & ledValues) override;$/;"	m	class:LedDeviceUdpArtNet
override	libsrc/leddevice/dev_net/LedDeviceUdpE131.h	/^	virtual bool init(const QJsonObject &deviceConfig) override;$/;"	m	class:LedDeviceUdpE131
override	libsrc/leddevice/dev_net/LedDeviceUdpE131.h	/^	virtual int write(const std::vector<ColorRgb> & ledValues) override;$/;"	m	class:LedDeviceUdpE131
override	libsrc/leddevice/dev_net/LedDeviceUdpH801.h	/^	virtual bool init(const QJsonObject &deviceConfig) override;$/;"	m	class:LedDeviceUdpH801
override	libsrc/leddevice/dev_net/LedDeviceUdpH801.h	/^	virtual int write(const std::vector<ColorRgb> & ledValues) override;$/;"	m	class:LedDeviceUdpH801
override	libsrc/leddevice/dev_net/LedDeviceUdpRaw.h	/^	virtual bool init(const QJsonObject &deviceConfig) override;$/;"	m	class:LedDeviceUdpRaw
override	libsrc/leddevice/dev_net/LedDeviceUdpRaw.h	/^	virtual int write(const std::vector<ColorRgb> & ledValues) override;$/;"	m	class:LedDeviceUdpRaw
override	libsrc/leddevice/dev_net/LedDeviceWled.h	/^	virtual QJsonObject discover() override;$/;"	m	class:LedDeviceWled
override	libsrc/leddevice/dev_net/LedDeviceWled.h	/^	virtual QJsonObject getProperties(const QJsonObject& params) override;$/;"	m	class:LedDeviceWled
override	libsrc/leddevice/dev_net/LedDeviceWled.h	/^	virtual bool init(const QJsonObject &deviceConfig) override;$/;"	m	class:LedDeviceWled
override	libsrc/leddevice/dev_net/LedDeviceWled.h	/^	virtual bool powerOff() override;$/;"	m	class:LedDeviceWled
override	libsrc/leddevice/dev_net/LedDeviceWled.h	/^	virtual bool powerOn() override;$/;"	m	class:LedDeviceWled
override	libsrc/leddevice/dev_net/LedDeviceWled.h	/^	virtual int write(const std::vector<ColorRgb> & ledValues) override;$/;"	m	class:LedDeviceWled
override	libsrc/leddevice/dev_net/LedDeviceWled.h	/^	virtual void identify(const QJsonObject& params) override;$/;"	m	class:LedDeviceWled
override	libsrc/leddevice/dev_net/LedDeviceWled.h	/^	virtual ~LedDeviceWled() override;$/;"	m	class:LedDeviceWled
override	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	virtual QJsonObject discover() override;$/;"	m	class:LedDeviceYeelight
override	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	virtual QJsonObject getProperties(const QJsonObject& params) override;$/;"	m	class:LedDeviceYeelight
override	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	virtual bool init(const QJsonObject &deviceConfig) override;$/;"	m	class:LedDeviceYeelight
override	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	virtual bool powerOff() override;$/;"	m	class:LedDeviceYeelight
override	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	virtual bool powerOn() override;$/;"	m	class:LedDeviceYeelight
override	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	virtual bool restoreState() override;$/;"	m	class:LedDeviceYeelight
override	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	virtual bool storeState() override;$/;"	m	class:LedDeviceYeelight
override	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	virtual int close() override;$/;"	m	class:LedDeviceYeelight
override	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	virtual int open() override;$/;"	m	class:LedDeviceYeelight
override	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	virtual int write(const std::vector<ColorRgb> & ledValues) override;$/;"	m	class:LedDeviceYeelight
override	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	virtual void identify(const QJsonObject& params) override;$/;"	m	class:LedDeviceYeelight
override	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	virtual ~LedDeviceYeelight() override;$/;"	m	class:LedDeviceYeelight
override	libsrc/leddevice/dev_net/ProviderUdp.h	/^	virtual bool init(const QJsonObject &deviceConfig) override;$/;"	m	class:ProviderUdp
override	libsrc/leddevice/dev_net/ProviderUdp.h	/^	virtual int close() override;$/;"	m	class:ProviderUdp
override	libsrc/leddevice/dev_net/ProviderUdp.h	/^	virtual int open() override;$/;"	m	class:ProviderUdp
override	libsrc/leddevice/dev_net/ProviderUdp.h	/^	virtual ~ProviderUdp() override;$/;"	m	class:ProviderUdp
override	libsrc/leddevice/dev_net/ProviderUdpSSL.h	/^	virtual bool init(const QJsonObject &deviceConfig) override;$/;"	m	class:ProviderUdpSSL
override	libsrc/leddevice/dev_net/ProviderUdpSSL.h	/^	virtual int close() override;$/;"	m	class:ProviderUdpSSL
override	libsrc/leddevice/dev_net/ProviderUdpSSL.h	/^	virtual int open() override;$/;"	m	class:ProviderUdpSSL
override	libsrc/leddevice/dev_net/ProviderUdpSSL.h	/^	virtual ~ProviderUdpSSL() override;$/;"	m	class:ProviderUdpSSL
override	libsrc/leddevice/dev_other/LedDeviceFile.h	/^	virtual bool init(const QJsonObject &deviceConfig) override;$/;"	m	class:LedDeviceFile
override	libsrc/leddevice/dev_other/LedDeviceFile.h	/^	virtual int close() override;$/;"	m	class:LedDeviceFile
override	libsrc/leddevice/dev_other/LedDeviceFile.h	/^	virtual int open() override;$/;"	m	class:LedDeviceFile
override	libsrc/leddevice/dev_other/LedDeviceFile.h	/^	virtual int write(const std::vector<ColorRgb> & ledValues) override;$/;"	m	class:LedDeviceFile
override	libsrc/leddevice/dev_other/LedDeviceFile.h	/^	virtual ~LedDeviceFile() override;$/;"	m	class:LedDeviceFile
override	libsrc/leddevice/dev_other/LedDevicePiBlaster.h	/^	bool init(const QJsonObject &deviceConfig) override;$/;"	m	class:LedDevicePiBlaster
override	libsrc/leddevice/dev_other/LedDevicePiBlaster.h	/^	int write(const std::vector<ColorRgb> &ledValues) override;$/;"	m	class:LedDevicePiBlaster
override	libsrc/leddevice/dev_other/LedDevicePiBlaster.h	/^	virtual int close() override;$/;"	m	class:LedDevicePiBlaster
override	libsrc/leddevice/dev_other/LedDevicePiBlaster.h	/^	virtual int open() override;$/;"	m	class:LedDevicePiBlaster
override	libsrc/leddevice/dev_other/LedDevicePiBlaster.h	/^	virtual ~LedDevicePiBlaster() override;$/;"	m	class:LedDevicePiBlaster
override	libsrc/leddevice/dev_rpi_pwm/LedDeviceWS281x.h	/^	virtual bool init(const QJsonObject &deviceConfig) override;$/;"	m	class:LedDeviceWS281x
override	libsrc/leddevice/dev_rpi_pwm/LedDeviceWS281x.h	/^	virtual int close() override;$/;"	m	class:LedDeviceWS281x
override	libsrc/leddevice/dev_rpi_pwm/LedDeviceWS281x.h	/^	virtual int open() override;$/;"	m	class:LedDeviceWS281x
override	libsrc/leddevice/dev_rpi_pwm/LedDeviceWS281x.h	/^	virtual int write(const std::vector<ColorRgb> & ledValues) override;$/;"	m	class:LedDeviceWS281x
override	libsrc/leddevice/dev_rpi_pwm/LedDeviceWS281x.h	/^	virtual ~LedDeviceWS281x() override;$/;"	m	class:LedDeviceWS281x
override	libsrc/leddevice/dev_serial/LedDeviceAdalight.h	/^	virtual bool init(const QJsonObject &deviceConfig) override;$/;"	m	class:LedDeviceAdalight
override	libsrc/leddevice/dev_serial/LedDeviceAdalight.h	/^	virtual int write(const std::vector<ColorRgb> & ledValues) override;$/;"	m	class:LedDeviceAdalight
override	libsrc/leddevice/dev_serial/LedDeviceAtmo.h	/^	virtual bool init(const QJsonObject &deviceConfig) override;$/;"	m	class:LedDeviceAtmo
override	libsrc/leddevice/dev_serial/LedDeviceAtmo.h	/^	virtual int write(const std::vector<ColorRgb> &ledValues) override;$/;"	m	class:LedDeviceAtmo
override	libsrc/leddevice/dev_serial/LedDeviceDMX.h	/^	virtual bool init(const QJsonObject &deviceConfig) override;$/;"	m	class:LedDeviceDMX
override	libsrc/leddevice/dev_serial/LedDeviceDMX.h	/^	virtual int write(const std::vector<ColorRgb> &ledValues) override;$/;"	m	class:LedDeviceDMX
override	libsrc/leddevice/dev_serial/LedDeviceKarate.h	/^	virtual bool init(const QJsonObject &deviceConfig) override;$/;"	m	class:LedDeviceKarate
override	libsrc/leddevice/dev_serial/LedDeviceKarate.h	/^	virtual int write(const std::vector<ColorRgb> &ledValues) override;$/;"	m	class:LedDeviceKarate
override	libsrc/leddevice/dev_serial/LedDeviceSedu.h	/^	virtual bool init(const QJsonObject &deviceConfig) override;$/;"	m	class:LedDeviceSedu
override	libsrc/leddevice/dev_serial/LedDeviceSedu.h	/^	virtual int write(const std::vector<ColorRgb> &ledValues) override;$/;"	m	class:LedDeviceSedu
override	libsrc/leddevice/dev_serial/LedDeviceTpm2.h	/^	virtual bool init(const QJsonObject &deviceConfig) override;$/;"	m	class:LedDeviceTpm2
override	libsrc/leddevice/dev_serial/LedDeviceTpm2.h	/^	virtual int write(const std::vector<ColorRgb> &ledValues) override;$/;"	m	class:LedDeviceTpm2
override	libsrc/leddevice/dev_serial/ProviderRs232.h	/^	virtual QJsonObject discover() override;$/;"	m	class:ProviderRs232
override	libsrc/leddevice/dev_serial/ProviderRs232.h	/^	virtual QString discoverFirst() override;$/;"	m	class:ProviderRs232
override	libsrc/leddevice/dev_serial/ProviderRs232.h	/^	virtual bool init(const QJsonObject &deviceConfig) override;$/;"	m	class:ProviderRs232
override	libsrc/leddevice/dev_serial/ProviderRs232.h	/^	virtual bool powerOff() override;$/;"	m	class:ProviderRs232
override	libsrc/leddevice/dev_serial/ProviderRs232.h	/^	virtual int close() override;$/;"	m	class:ProviderRs232
override	libsrc/leddevice/dev_serial/ProviderRs232.h	/^	virtual int open() override;$/;"	m	class:ProviderRs232
override	libsrc/leddevice/dev_serial/ProviderRs232.h	/^	virtual void setInError( const QString& errorMsg) override;$/;"	m	class:ProviderRs232
override	libsrc/leddevice/dev_serial/ProviderRs232.h	/^	virtual ~ProviderRs232() override;$/;"	m	class:ProviderRs232
override	libsrc/leddevice/dev_spi/LedDeviceAPA102.h	/^	virtual bool init(const QJsonObject &deviceConfig) override;$/;"	m	class:LedDeviceAPA102
override	libsrc/leddevice/dev_spi/LedDeviceAPA102.h	/^	virtual int write(const std::vector<ColorRgb> & ledValues) override;$/;"	m	class:LedDeviceAPA102
override	libsrc/leddevice/dev_spi/LedDeviceAPA104.h	/^	virtual bool init(const QJsonObject &deviceConfig) override;$/;"	m	class:LedDeviceAPA104
override	libsrc/leddevice/dev_spi/LedDeviceAPA104.h	/^	virtual int write(const std::vector<ColorRgb> & ledValues) override;$/;"	m	class:LedDeviceAPA104
override	libsrc/leddevice/dev_spi/LedDeviceLpd6803.h	/^	virtual bool init(const QJsonObject &deviceConfig) override;$/;"	m	class:LedDeviceLpd6803
override	libsrc/leddevice/dev_spi/LedDeviceLpd6803.h	/^	virtual int write(const std::vector<ColorRgb> & ledValues) override;$/;"	m	class:LedDeviceLpd6803
override	libsrc/leddevice/dev_spi/LedDeviceLpd8806.h	/^	virtual bool init(const QJsonObject &deviceConfig) override;$/;"	m	class:LedDeviceLpd8806
override	libsrc/leddevice/dev_spi/LedDeviceLpd8806.h	/^	virtual int write(const std::vector<ColorRgb> & ledValues) override;$/;"	m	class:LedDeviceLpd8806
override	libsrc/leddevice/dev_spi/LedDeviceP9813.h	/^	virtual bool init(const QJsonObject &deviceConfig) override;$/;"	m	class:LedDeviceP9813
override	libsrc/leddevice/dev_spi/LedDeviceP9813.h	/^	virtual int write(const std::vector<ColorRgb> & ledValues) override;$/;"	m	class:LedDeviceP9813
override	libsrc/leddevice/dev_spi/LedDeviceSk6812SPI.h	/^	virtual bool init(const QJsonObject &deviceConfig) override;$/;"	m	class:LedDeviceSk6812SPI
override	libsrc/leddevice/dev_spi/LedDeviceSk6812SPI.h	/^	virtual int write(const std::vector<ColorRgb> & ledValues) override;$/;"	m	class:LedDeviceSk6812SPI
override	libsrc/leddevice/dev_spi/LedDeviceSk6822SPI.h	/^	virtual bool init(const QJsonObject &deviceConfig) override;$/;"	m	class:LedDeviceSk6822SPI
override	libsrc/leddevice/dev_spi/LedDeviceSk6822SPI.h	/^	virtual int write(const std::vector<ColorRgb> & ledValues) override;$/;"	m	class:LedDeviceSk6822SPI
override	libsrc/leddevice/dev_spi/LedDeviceWs2801.h	/^	virtual bool init(const QJsonObject &deviceConfig) override;$/;"	m	class:LedDeviceWs2801
override	libsrc/leddevice/dev_spi/LedDeviceWs2801.h	/^	virtual int write(const std::vector<ColorRgb> & ledValues) override;$/;"	m	class:LedDeviceWs2801
override	libsrc/leddevice/dev_spi/LedDeviceWs2812SPI.h	/^	virtual bool init(const QJsonObject &deviceConfig) override;$/;"	m	class:LedDeviceWs2812SPI
override	libsrc/leddevice/dev_spi/LedDeviceWs2812SPI.h	/^	virtual int write(const std::vector<ColorRgb> & ledValues) override;$/;"	m	class:LedDeviceWs2812SPI
override	libsrc/leddevice/dev_spi/ProviderSpi.h	/^	virtual int close() override;$/;"	m	class:ProviderSpi
override	libsrc/leddevice/dev_spi/ProviderSpi.h	/^    int open() override;$/;"	m	class:ProviderSpi
override	libsrc/leddevice/dev_spi/ProviderSpi.h	/^    virtual bool init(const QJsonObject &deviceConfig) override;$/;"	m	class:ProviderSpi
override	libsrc/leddevice/dev_spi/ProviderSpi.h	/^    virtual ~ProviderSpi() override;$/;"	m	class:ProviderSpi
override	libsrc/leddevice/dev_tinker/LedDeviceTinkerforge.h	/^	virtual bool init(const QJsonObject &deviceConfig) override;$/;"	m	class:LedDeviceTinkerforge
override	libsrc/leddevice/dev_tinker/LedDeviceTinkerforge.h	/^	virtual int open() override;$/;"	m	class:LedDeviceTinkerforge
override	libsrc/leddevice/dev_tinker/LedDeviceTinkerforge.h	/^	virtual int write(const std::vector<ColorRgb> & ledValues) override;$/;"	m	class:LedDeviceTinkerforge
override	libsrc/leddevice/dev_tinker/LedDeviceTinkerforge.h	/^	virtual ~LedDeviceTinkerforge() override;$/;"	m	class:LedDeviceTinkerforge
owner	include/api/apiStructs.h	/^    const QString owner;$/;"	m	struct:registerData
owner	include/hyperion/PriorityMuxer.h	/^		QString owner;$/;"	m	struct:PriorityMuxer::InputInfo
parse	libsrc/commandline/Parser.cpp	/^bool Parser::parse(const QStringList &arguments)$/;"	f	class:Parser
parse	libsrc/utils/JsonUtils.cpp	/^	bool parse(const QString& path, const QString& data, QJsonArray& arr, Logger* log)$/;"	f	namespace:JsonUtils
parse	libsrc/utils/JsonUtils.cpp	/^	bool parse(const QString& path, const QString& data, QJsonDocument& doc, Logger* log)$/;"	f	namespace:JsonUtils
parse	libsrc/utils/JsonUtils.cpp	/^	bool parse(const QString& path, const QString& data, QJsonObject& obj, Logger* log)$/;"	f	namespace:JsonUtils
parse3DMode	include/utils/VideoMode.h	/^inline VideoMode parse3DMode(QString videoMode)$/;"	f
parsePixelFormat	include/utils/PixelFormat.h	/^inline PixelFormat parsePixelFormat(QString pixelFormat)$/;"	f
parseReply	libsrc/flatbufserver/FlatBufferConnection.cpp	/^bool FlatBufferConnection::parseReply(const hyperionnet::Reply *reply)$/;"	f	class:FlatBufferConnection
parseVideoStandard	include/grabber/VideoStandard.h	/^inline VideoStandard parseVideoStandard(QString videoStandard)$/;"	f
pause	libsrc/hyperion/LinearColorSmoothing.h	/^		bool     pause;$/;"	m	struct:LinearColorSmoothing::SMOOTHING_CFG
pause	libsrc/hyperion/LinearColorSmoothing.h	/^	bool pause() const { return _pause; }$/;"	f	class:LinearColorSmoothing
payloadLength	libsrc/webserver/WebSocketClient.h	/^		quint64       payloadLength;$/;"	m	struct:WebSocketClient::WebSocketHeader
payload_size_code_16bit	libsrc/webserver/WebSocketClient.h	/^	static uint8_t const payload_size_code_16bit = 0x7E; \/\/ 126$/;"	m	class:WebSocketClient
payload_size_code_64bit	libsrc/webserver/WebSocketClient.h	/^	static uint8_t const payload_size_code_64bit = 0x7F; \/\/ 127$/;"	m	class:WebSocketClient
phys_addr	libsrc/grabber/amlogic/meson_ion.h	/^	unsigned int phys_addr;$/;"	m	struct:meson_phys_data
physicalAddress	libsrc/grabber/amlogic/IonBuffer.h	/^	unsigned long physicalAddress = 0;$/;"	m	class:IonBuffer
pixel_type	include/utils/Image.h	/^	typedef Pixel_T pixel_type;$/;"	t	class:Image
port	include/bonjour/bonjourrecord.h	/^	int     port;$/;"	m	class:BonjourRecord
port	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^		int port;$/;"	m	struct:LedDeviceYeelight::yeelightAddress
portAvailable	include/utils/NetUtils.h	/^	static bool portAvailable(quint16& port, Logger* log)$/;"	f	namespace:NetUtils
positionalArguments	include/commandline/Parser.h	/^	QStringList positionalArguments() const$/;"	f	class:commandline::Parser
post	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^QJsonDocument LedDevicePhilipsHueBridge::post(const QString& route, const QString& content)$/;"	f	class:LedDevicePhilipsHueBridge
postamble_size	libsrc/leddevice/dev_net/LedDeviceUdpE131.h	/^		uint16_t postamble_size;$/;"	m	struct:__anon6::__anon7
powerOff	libsrc/leddevice/LedDevice.cpp	/^bool LedDevice::powerOff()$/;"	f	class:LedDevice
powerOff	libsrc/leddevice/dev_hid/LedDeviceLightpack.cpp	/^bool LedDeviceLightpack::powerOff()$/;"	f	class:LedDeviceLightpack
powerOff	libsrc/leddevice/dev_hid/LedDeviceMultiLightpack.cpp	/^bool LedDeviceMultiLightpack::powerOff()$/;"	f	class:LedDeviceMultiLightpack
powerOff	libsrc/leddevice/dev_net/LedDeviceNanoleaf.cpp	/^bool LedDeviceNanoleaf::powerOff()$/;"	f	class:LedDeviceNanoleaf
powerOff	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^bool LedDevicePhilipsHue::powerOff()$/;"	f	class:LedDevicePhilipsHue
powerOff	libsrc/leddevice/dev_net/LedDeviceWled.cpp	/^bool LedDeviceWled::powerOff()$/;"	f	class:LedDeviceWled
powerOff	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^bool LedDeviceYeelight::powerOff()$/;"	f	class:LedDeviceYeelight
powerOff	libsrc/leddevice/dev_serial/ProviderRs232.cpp	/^bool ProviderRs232::powerOff()$/;"	f	class:ProviderRs232
powerOn	libsrc/leddevice/LedDevice.cpp	/^bool LedDevice::powerOn()$/;"	f	class:LedDevice
powerOn	libsrc/leddevice/dev_net/LedDeviceNanoleaf.cpp	/^bool LedDeviceNanoleaf::powerOn()$/;"	f	class:LedDeviceNanoleaf
powerOn	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^bool LedDevicePhilipsHue::powerOn()$/;"	f	class:LedDevicePhilipsHue
powerOn	libsrc/leddevice/dev_net/LedDeviceWled.cpp	/^bool LedDeviceWled::powerOn()$/;"	f	class:LedDeviceWled
powerOn	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^bool LedDeviceYeelight::powerOn()$/;"	f	class:LedDeviceYeelight
preamble_size	libsrc/leddevice/dev_net/LedDeviceUdpE131.h	/^		uint16_t preamble_size;$/;"	m	struct:__anon6::__anon7
prepare	libsrc/leddevice/dev_net/LedDeviceUdpArtNet.cpp	/^void LedDeviceUdpArtNet::prepare(const unsigned this_universe, const unsigned this_sequence, unsigned this_dmxChannelCount)$/;"	f	class:LedDeviceUdpArtNet
prepare	libsrc/leddevice/dev_net/LedDeviceUdpE131.cpp	/^void LedDeviceUdpE131::prepare(const unsigned this_universe, const unsigned this_dmxChannelCount)$/;"	f	class:LedDeviceUdpE131
prepareStreamData	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^QByteArray LedDevicePhilipsHue::prepareStreamData()$/;"	f	class:LedDevicePhilipsHue
prettyName	include/utils/SysInfo.h	/^		QString prettyName;$/;"	m	struct:SysInfo::HyperionSysInfo
printErrorToReply	libsrc/webserver/StaticFileServing.cpp	/^void StaticFileServing::printErrorToReply (QtHttpReply * reply, QtHttpReply::StatusCode code, QString errorMessage)$/;"	f	class:StaticFileServing
printLedValues	libsrc/leddevice/LedDevice.cpp	/^void LedDevice::printLedValues(const std::vector<ColorRgb>& ledValues)$/;"	f	class:LedDevice
print_trace	libsrc/utils/DefaultSignalHandler.cpp	/^void print_trace()$/;"	f	namespace:DefaultSignalHandler
priority	include/api/apiStructs.h	/^    int priority;$/;"	m	struct:EffectCmdData
priority	include/api/apiStructs.h	/^    int priority;$/;"	m	struct:ImageCmdData
priority	include/effectengine/ActiveEffectDefinition.h	/^	int priority;$/;"	m	struct:ActiveEffectDefinition
priority	include/hyperion/PriorityMuxer.h	/^		int priority;$/;"	m	struct:PriorityMuxer::InputInfo
priority	libsrc/leddevice/dev_net/LedDeviceUdpE131.h	/^		uint8_t  priority;$/;"	m	struct:__anon6::__anon7
process	include/blackborder/BlackBorderDetector.h	/^		BlackBorder process(const Image<Pixel_T> & image)$/;"	f	class:hyperion::BlackBorderDetector
process	include/blackborder/BlackBorderProcessor.h	/^		bool process(const Image<Pixel_T> & image)$/;"	f	class:hyperion::BlackBorderProcessor
process	include/hyperion/ImageProcessor.h	/^	std::vector<ColorRgb> process(const Image<Pixel_T>& image)$/;"	f	class:ImageProcessor
process	include/hyperion/ImageProcessor.h	/^	void process(const Image<Pixel_T>& image, std::vector<ColorRgb>& ledColors)$/;"	f	class:ImageProcessor
process	libsrc/commandline/Parser.cpp	/^void Parser::process(const QCoreApplication &app)$/;"	f	class:Parser
process	libsrc/commandline/Parser.cpp	/^void Parser::process(const QStringList &arguments)$/;"	f	class:Parser
processImage	libsrc/utils/ImageResampler.cpp	/^void ImageResampler::processImage(const uint8_t * data, int width, int height, int lineLength, PixelFormat pixelFormat, Image<ColorRgb> &outputImage) const$/;"	f	class:ImageResampler
process_classic	include/blackborder/BlackBorderDetector.h	/^		BlackBorder process_classic(const Image<Pixel_T> & image)$/;"	f	class:hyperion::BlackBorderDetector
process_image	libsrc/grabber/v4l2/V4L2Grabber.cpp	/^bool V4L2Grabber::process_image(const void *p, int size)$/;"	f	class:V4L2Grabber
process_image	libsrc/grabber/v4l2/V4L2Grabber.cpp	/^void V4L2Grabber::process_image(const uint8_t * data, int size)$/;"	f	class:V4L2Grabber
process_osd	include/blackborder/BlackBorderDetector.h	/^		BlackBorder process_osd(const Image<Pixel_T> & image)$/;"	f	class:hyperion::BlackBorderDetector
productType	include/utils/SysInfo.h	/^		QString productType;$/;"	m	struct:SysInfo::HyperionSysInfo
productVersion	include/utils/SysInfo.h	/^		QString productVersion;$/;"	m	struct:SysInfo::HyperionSysInfo
property_value_count	libsrc/leddevice/dev_net/LedDeviceUdpE131.h	/^		uint16_t property_value_count;$/;"	m	struct:__anon6::__anon7
property_values	libsrc/leddevice/dev_net/LedDeviceUdpE131.h	/^		uint8_t  property_values[513];$/;"	m	struct:__anon6::__anon7
proto	libsrc/protoserver/ProtoClientConnection.h	/^namespace proto {$/;"	n
pub	include/grabber/V4L2Grabber.h	/^		jpeg_error_mgr pub;$/;"	m	struct:V4L2Grabber::errorManager
put	libsrc/leddevice/dev_net/ProviderRestApi.cpp	/^httpResponse ProviderRestApi::put(const QString &body)$/;"	f	class:ProviderRestApi
put	libsrc/leddevice/dev_net/ProviderRestApi.cpp	/^httpResponse ProviderRestApi::put(const QUrl &url, const QString &body)$/;"	f	class:ProviderRestApi
pyFile	include/effectengine/EffectSchema.h	/^	QString pyFile, schemaFile;$/;"	m	struct:EffectSchema
pyFile	libsrc/effectengine/EffectFileHandler.cpp	/^	QString pyFile;$/;"	m	struct:find_schema	file:
pySchema	include/effectengine/EffectSchema.h	/^	QJsonObject pySchema;$/;"	m	struct:EffectSchema
pythonScript	include/api/apiStructs.h	/^    QString pythonScript;$/;"	m	struct:EffectCmdData
queueColors	libsrc/hyperion/LinearColorSmoothing.cpp	/^void LinearColorSmoothing::queueColors(const std::vector<ColorRgb> & ledColors)$/;"	f	class:LinearColorSmoothing
queuePush	include/hyperion/PriorityMuxer.h	/^	void queuePush(void){ emit timeRunner(); };$/;"	f	class:PriorityMuxer
raw	libsrc/leddevice/dev_net/LedDeviceUdpArtNet.h	/^	uint8_t raw[ 18 + DMX_MAX ];$/;"	m	union:__anon11
raw	libsrc/leddevice/dev_net/LedDeviceUdpE131.h	/^	uint8_t raw[638];$/;"	m	union:__anon6
readConfig	include/utils/jsonschema/QJsonFactory.h	/^	static QJsonObject readConfig(const QString& path)$/;"	f	class:QJsonFactory
readData	libsrc/boblightserver/BoblightClientConnection.cpp	/^void BoblightClientConnection::readData()$/;"	f	class:BoblightClientConnection
readData	libsrc/flatbufserver/FlatBufferConnection.cpp	/^void FlatBufferConnection::readData()$/;"	f	class:FlatBufferConnection
readError	libsrc/grabber/v4l2/V4L2Wrapper.cpp	/^void V4L2Wrapper::readError(const char* err)$/;"	f	class:V4L2Wrapper
readFile	libsrc/utils/FileUtils.cpp	/^	bool readFile(const QString& path, QString& data, Logger* log, bool ignError)$/;"	f	namespace:FileUtils
readFile	libsrc/utils/JsonUtils.cpp	/^	bool readFile(const QString& path, QJsonObject& obj, Logger* log, bool ignError)$/;"	f	namespace:JsonUtils
readPendingDatagrams	libsrc/ssdp/SSDPDiscover.cpp	/^void SSDPDiscover::readPendingDatagrams()$/;"	f	class:SSDPDiscover
readPendingDatagrams	libsrc/ssdp/SSDPServer.cpp	/^void SSDPServer::readPendingDatagrams()$/;"	f	class:SSDPServer
readRequest	libsrc/jsonserver/JsonClientConnection.cpp	/^void JsonClientConnection::readRequest()$/;"	f	class:JsonClientConnection
readSchema	include/utils/jsonschema/QJsonFactory.h	/^	static QJsonObject readSchema(const QString& path)$/;"	f	class:QJsonFactory
readSchema	libsrc/utils/JsonUtils.cpp	/^	bool readSchema(const QString& path, QJsonObject& obj, Logger* log)$/;"	f	namespace:JsonUtils
read_frame	libsrc/grabber/v4l2/V4L2Grabber.cpp	/^int V4L2Grabber::read_frame()$/;"	f	class:V4L2Grabber
readyRead	libsrc/flatbufserver/FlatBufferClient.cpp	/^void FlatBufferClient::readyRead()$/;"	f	class:FlatBufferClient
readyRead	libsrc/protoserver/ProtoClientConnection.cpp	/^void ProtoClientConnection::readyRead()$/;"	f	class:ProtoClientConnection
recordExist	include/db/SettingsTable.h	/^	inline bool recordExist(const QString& type) const$/;"	f	class:SettingsTable
recordExists	libsrc/db/DBManager.cpp	/^bool DBManager::recordExists(const VectorPair& conditions) const$/;"	f	class:DBManager
red	include/utils/ColorArgb.h	/^	uint8_t red;$/;"	m	struct:ColorArgb
red	include/utils/ColorBgr.h	/^	uint8_t red;$/;"	m	struct:ColorBgr
red	include/utils/ColorRgb.h	/^	uint8_t red;$/;"	m	struct:ColorRgb
red	include/utils/ColorRgba.h	/^	uint8_t red;$/;"	m	struct:ColorRgba
red	include/utils/ColorRgbw.h	/^	uint8_t red;$/;"	m	struct:ColorRgbw
red	include/utils/Image.h	/^	uint8_t red(const unsigned pixel) const$/;"	f	class:Image
red	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	XYColor red, green, blue;$/;"	m	struct:CiColorTriangle
registationRequired	libsrc/flatbufserver/FlatBufferClient.cpp	/^void FlatBufferClient::registationRequired(const int priority)$/;"	f	class:FlatBufferClient
registationRequired	libsrc/protoserver/ProtoClientConnection.h	/^	void registationRequired(const int priority) { if (_priority == priority) _priority = -1; };$/;"	f	class:ProtoClientConnection
registerData	include/api/apiStructs.h	/^struct registerData$/;"	s
registerHyperionExtensionModule	libsrc/effectengine/EffectModule.cpp	/^void EffectModule::registerHyperionExtensionModule()$/;"	f	class:EffectModule
registerInput	libsrc/api/API.cpp	/^void API::registerInput(const int &priority, const hyperion::Components &component, const QString &origin, const QString &owner, const hyperion::Components &callerComp)$/;"	f	class:API
registerInput	libsrc/hyperion/Hyperion.cpp	/^void Hyperion::registerInput(const int priority, const hyperion::Components& component, const QString& origin, const QString& owner, unsigned smooth_cfg)$/;"	f	class:Hyperion
registerInput	libsrc/hyperion/PriorityMuxer.cpp	/^void PriorityMuxer::registerInput(const int priority, const hyperion::Components& component, const QString& origin, const QString& owner, unsigned smooth_cfg)$/;"	f	class:PriorityMuxer
registerService	libsrc/bonjour/bonjourserviceregister.cpp	/^void BonjourServiceRegister::registerService(const BonjourRecord &record, quint16 servicePort, std::vector<std::pair<std::string, std::string>> txt)$/;"	f	class:BonjourServiceRegister
registerService	libsrc/bonjour/bonjourserviceregister.cpp	/^void BonjourServiceRegister::registerService(const QString& service, const int& port)$/;"	f	class:BonjourServiceRegister
registeredRecord	include/bonjour/bonjourserviceregister.h	/^    inline BonjourRecord registeredRecord() const {return finalRecord; }$/;"	f	class:BonjourServiceRegister
registeredType	include/bonjour/bonjourrecord.h	/^	QString registeredType;$/;"	m	class:BonjourRecord
removeDir	libsrc/utils/FileUtils.cpp	/^	bool removeDir(const QString& path, Logger* log)$/;"	f	namespace:FileUtils
removeFile	libsrc/utils/FileUtils.cpp	/^	bool removeFile(const QString& path, Logger* log, bool ignError)$/;"	f	namespace:FileUtils
removeSwitch	include/commandline/SwitchOption.h	/^	void removeSwitch(const QString &switch_)                        { _switches.remove(switch_.toLower()); }$/;"	f	class:commandline::SwitchOption
renameToken	include/db/AuthTable.h	/^	inline bool renameToken(const QString &id, const QString &comment)$/;"	f	class:AuthTable
renameToken	libsrc/api/API.cpp	/^QString API::renameToken(const QString &id, const QString &comment)$/;"	f	class:API
renameToken	libsrc/hyperion/AuthManager.cpp	/^bool AuthManager::renameToken(const QString &id, const QString &comment)$/;"	f	class:AuthManager
replyDomain	include/bonjour/bonjourrecord.h	/^	QString replyDomain;$/;"	m	class:BonjourRecord
requestActiveRegister	libsrc/api/API.cpp	/^void API::requestActiveRegister(QObject *callerInstance)$/;"	f	class:API
requestInterruption	include/effectengine/Effect.h	/^	void requestInterruption() { _interupt = true; };$/;"	f	class:Effect
reserved	libsrc/leddevice/dev_net/LedDeviceUdpE131.h	/^		uint16_t reserved;$/;"	m	struct:__anon6::__anon7
reserved	libsrc/webserver/WebSocketUtils.h	/^	inline bool reserved(value v)$/;"	f	namespace:OPCODE
resetHyperionUser	include/db/AuthTable.h	/^	inline bool resetHyperionUser()$/;"	f	class:AuthTable
resetHyperionUser	libsrc/hyperion/AuthManager.cpp	/^bool AuthManager::resetHyperionUser()$/;"	f	class:AuthManager
resetInitialized	libsrc/utils/RgbChannelAdjustment.cpp	/^void RgbChannelAdjustment::resetInitialized()$/;"	f	class:RgbChannelAdjustment
resetRawData	libsrc/webserver/QtHttpReply.h	/^	void resetRawData  (void) { m_data.clear (); };$/;"	f	class:QtHttpReply
resetSubscriptions	libsrc/api/JsonCB.cpp	/^void JsonCB::resetSubscriptions(void){$/;"	f	class:JsonCB
resize	include/utils/Image.h	/^	void resize(const unsigned width, const unsigned height)$/;"	f	class:Image
resolutions	include/grabber/V4L2Grabber.h	/^		QStringList				resolutions	= QStringList();$/;"	m	struct:V4L2Grabber::DeviceProperties
resolveBonjourRecord	libsrc/bonjour/bonjourserviceresolver.cpp	/^bool BonjourServiceResolver::resolveBonjourRecord(const BonjourRecord &record)$/;"	f	class:BonjourServiceResolver
resolveFileError	libsrc/utils/FileUtils.cpp	/^	void resolveFileError(const QFile& file, Logger* log)$/;"	f	namespace:FileUtils
resolveReferences	include/utils/jsonschema/QJsonFactory.h	/^	static QJsonObject resolveReferences(const QJsonObject& schema)$/;"	f	class:QJsonFactory
resolveRefs	libsrc/utils/JsonUtils.cpp	/^	bool resolveRefs(const QJsonObject& schema, QJsonObject& obj, Logger* log)$/;"	f	namespace:JsonUtils
restartHyperion	libsrc/utils/Process.cpp	/^void restartHyperion(bool asNewProcess)$/;"	f	namespace:Process
restartHyperion	libsrc/utils/Process.cpp	/^void restartHyperion(bool asNewProcess){}$/;"	f	namespace:Process
restoreState	libsrc/leddevice/LedDevice.cpp	/^bool LedDevice::restoreState()$/;"	f	class:LedDevice
restoreState	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^bool LedDevicePhilipsHue::restoreState()$/;"	f	class:LedDevicePhilipsHue
restoreState	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^bool LedDeviceYeelight::restoreState()$/;"	f	class:LedDeviceYeelight
restoreState	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^bool YeelightLight::restoreState()$/;"	f	class:YeelightLight
rewriteLEDs	libsrc/leddevice/LedDevice.cpp	/^int LedDevice::rewriteLEDs()$/;"	f	class:LedDevice
rgb2hsl	libsrc/utils/ColorSys.cpp	/^void ColorSys::rgb2hsl(uint8_t red, uint8_t green, uint8_t blue, uint16_t & hue, float & saturation, float & luminance)$/;"	f	class:ColorSys
rgb2hsv	libsrc/utils/ColorSys.cpp	/^void ColorSys::rgb2hsv(uint8_t red, uint8_t green, uint8_t blue, uint16_t & hue, uint8_t & saturation, uint8_t & value)$/;"	f	class:ColorSys
rgbToCiColor	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^CiColor CiColor::rgbToCiColor(double red, double green, double blue, const CiColorTriangle &colorSpace)$/;"	f	class:CiColor
root_flength	libsrc/leddevice/dev_net/LedDeviceUdpE131.h	/^		uint16_t root_flength;$/;"	m	struct:__anon6::__anon7
root_vector	libsrc/leddevice/dev_net/LedDeviceUdpE131.h	/^		uint32_t root_vector;$/;"	m	struct:__anon6::__anon7
run	libsrc/effectengine/Effect.cpp	/^void Effect::run()$/;"	f	class:Effect
runEffect	libsrc/effectengine/EffectEngine.cpp	/^int EffectEngine::runEffect(const QString &effectName, const QJsonObject &args, int priority, int timeout, const QString &pythonScript, const QString &origin, unsigned smoothCfg, const QString &imageData)$/;"	f	class:EffectEngine
runEffect	libsrc/effectengine/EffectEngine.cpp	/^int EffectEngine::runEffect(const QString &effectName, int priority, int timeout, const QString &origin)$/;"	f	class:EffectEngine
runEffectScript	libsrc/effectengine/EffectEngine.cpp	/^int EffectEngine::runEffectScript(const QString &script, const QString &name, const QJsonObject &args, int priority, int timeout, const QString &origin, unsigned smoothCfg, const QString &imageData)$/;"	f	class:EffectEngine
saveEffect	libsrc/api/API.cpp	/^QString API::saveEffect(const QJsonObject &data)$/;"	f	class:API
saveEffect	libsrc/effectengine/EffectEngine.cpp	/^QString EffectEngine::saveEffect(const QJsonObject& obj)$/;"	f	class:EffectEngine
saveEffect	libsrc/effectengine/EffectFileHandler.cpp	/^QString EffectFileHandler::saveEffect(const QJsonObject& message)$/;"	f	class:EffectFileHandler
saveEffect	libsrc/hyperion/Hyperion.cpp	/^QString Hyperion::saveEffect(const QJsonObject& obj)$/;"	f	class:Hyperion
saveName	include/db/InstanceTable.h	/^	inline bool saveName(const quint8& inst, const QString& name)$/;"	f	class:InstanceTable
saveName	libsrc/hyperion/HyperionIManager.cpp	/^bool HyperionIManager::saveName(const quint8& inst, const QString& name)$/;"	f	class:HyperionIManager
saveOriginalState	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^void PhilipsHueLight::saveOriginalState(const QJsonObject& values)$/;"	f	class:PhilipsHueLight
saveSettings	libsrc/api/API.cpp	/^void API::saveSettings(const QJsonObject &data)$/;"	f	class:API
saveSettings	libsrc/hyperion/Hyperion.cpp	/^bool Hyperion::saveSettings(QJsonObject config, const bool& correct)$/;"	f	class:Hyperion
saveSettings	libsrc/hyperion/SettingsManager.cpp	/^bool SettingsManager::saveSettings(QJsonObject config, const bool& correct)$/;"	f	class:SettingsManager
scale	include/api/apiStructs.h	/^    int scale;$/;"	m	struct:ImageCmdData
schemaFile	include/effectengine/EffectSchema.h	/^	QString pyFile, schemaFile;$/;"	m	struct:EffectSchema
schemaJson	include/hyperion/SettingsManager.h	/^	static QJsonObject schemaJson;$/;"	m	class:SettingsManager
schemaJson	libsrc/hyperion/SettingsManager.cpp	/^QJsonObject SettingsManager::schemaJson;$/;"	m	class:SettingsManager	file:
script	include/effectengine/ActiveEffectDefinition.h	/^	QString script;$/;"	m	struct:ActiveEffectDefinition
script	include/effectengine/EffectDefinition.h	/^	QString name, script, file;$/;"	m	struct:EffectDefinition
searchForService	libsrc/ssdp/SSDPDiscover.cpp	/^void SSDPDiscover::searchForService(const QString& st)$/;"	f	class:SSDPDiscover
searchTarget	include/ssdp/SSDPDiscover.h	/^	QString searchTarget;$/;"	m	struct:SSDPService
searchType	include/ssdp/SSDPDiscover.h	/^enum class searchType{$/;"	c
seedingRNG	libsrc/leddevice/dev_net/ProviderUdpSSL.cpp	/^bool ProviderUdpSSL::seedingRNG()$/;"	f	class:ProviderUdpSSL
selectConfig	libsrc/hyperion/LinearColorSmoothing.cpp	/^bool LinearColorSmoothing::selectConfig(unsigned cfg, const bool& force)$/;"	f	class:LinearColorSmoothing
sendAlive	libsrc/ssdp/SSDPServer.cpp	/^void SSDPServer::sendAlive(const QString& st)$/;"	f	class:SSDPServer
sendAnnounceList	libsrc/ssdp/SSDPHandler.cpp	/^void SSDPHandler::sendAnnounceList(const bool alive)$/;"	f	class:SSDPHandler
sendByeBye	libsrc/ssdp/SSDPServer.cpp	/^void SSDPServer::sendByeBye(const QString& st)$/;"	f	class:SSDPServer
sendClose	libsrc/webserver/WebSocketClient.cpp	/^void WebSocketClient::sendClose(int status, QString reason)$/;"	f	class:WebSocketClient
sendCommand	libsrc/leddevice/dev_net/LedDeviceAtmoOrb.cpp	/^void LedDeviceAtmoOrb::sendCommand(const QByteArray &bytes)$/;"	f	class:LedDeviceAtmoOrb
sendErrorReply	libsrc/api/JsonAPI.cpp	/^void JsonAPI::sendErrorReply(const QString &error, const QString &command, const int tan)$/;"	f	class:JsonAPI
sendErrorReply	libsrc/flatbufserver/FlatBufferClient.cpp	/^void FlatBufferClient::sendErrorReply(const std::string &error)$/;"	f	class:FlatBufferClient
sendErrorReply	libsrc/protoserver/ProtoClientConnection.cpp	/^void ProtoClientConnection::sendErrorReply(const std::string &error)$/;"	f	class:ProtoClientConnection
sendFadeCandyConfiguration	libsrc/leddevice/dev_net/LedDeviceFadeCandy.cpp	/^void LedDeviceFadeCandy::sendFadeCandyConfiguration()$/;"	f	class:LedDeviceFadeCandy
sendJsonMessage	libsrc/hyperion/MessageForwarder.cpp	/^void MessageForwarder::sendJsonMessage(const QJsonObject &message, QTcpSocket *socket)$/;"	f	class:MessageForwarder
sendLightMessage	libsrc/boblightserver/BoblightClientConnection.cpp	/^void BoblightClientConnection::sendLightMessage()$/;"	f	class:BoblightClientConnection
sendMSearchResponse	libsrc/ssdp/SSDPServer.cpp	/^void SSDPServer::sendMSearchResponse(const QString& st, const QString& senderIp, const quint16& senderPort)$/;"	f	class:SSDPServer
sendMessage	libsrc/boblightserver/BoblightClientConnection.h	/^	void sendMessage(const QByteArray &message) { _socket->write(message); };$/;"	f	class:BoblightClientConnection
sendMessage	libsrc/flatbufserver/FlatBufferClient.cpp	/^void FlatBufferClient::sendMessage()$/;"	f	class:FlatBufferClient
sendMessage	libsrc/flatbufserver/FlatBufferConnection.cpp	/^void FlatBufferConnection::sendMessage(const uint8_t* buffer, uint32_t size)$/;"	f	class:FlatBufferConnection
sendMessage	libsrc/jsonserver/JsonClientConnection.cpp	/^qint64 JsonClientConnection::sendMessage(QJsonObject message)$/;"	f	class:JsonClientConnection
sendMessage	libsrc/protoserver/ProtoClientConnection.cpp	/^void ProtoClientConnection::sendMessage(const google::protobuf::Message &message)$/;"	f	class:ProtoClientConnection
sendMessage	libsrc/webserver/WebSocketClient.cpp	/^qint64 WebSocketClient::sendMessage(QJsonObject obj)$/;"	f	class:WebSocketClient
sendMessage_Raw	libsrc/webserver/WebSocketClient.cpp	/^qint64 WebSocketClient::sendMessage_Raw(QByteArray &data)$/;"	f	class:WebSocketClient
sendMessage_Raw	libsrc/webserver/WebSocketClient.cpp	/^qint64 WebSocketClient::sendMessage_Raw(const char* data, quint64 size)$/;"	f	class:WebSocketClient
sendReplyToClient	libsrc/webserver/QtHttpClientWrapper.cpp	/^QtHttpClientWrapper::ParsingStatus QtHttpClientWrapper::sendReplyToClient (QtHttpReply * reply)$/;"	f	class:QtHttpClientWrapper
sendSearch	libsrc/ssdp/SSDPDiscover.cpp	/^void SSDPDiscover::sendSearch(const QString& st)$/;"	f	class:SSDPDiscover
sendSuccessDataReply	libsrc/api/JsonAPI.cpp	/^void JsonAPI::sendSuccessDataReply(const QJsonDocument &doc, const QString &command, const int &tan)$/;"	f	class:JsonAPI
sendSuccessReply	libsrc/api/JsonAPI.cpp	/^void JsonAPI::sendSuccessReply(const QString &command, const int tan)$/;"	f	class:JsonAPI
sendSuccessReply	libsrc/flatbufserver/FlatBufferClient.cpp	/^void FlatBufferClient::sendSuccessReply()$/;"	f	class:FlatBufferClient
sendSuccessReply	libsrc/protoserver/ProtoClientConnection.cpp	/^void ProtoClientConnection::sendSuccessReply()$/;"	f	class:ProtoClientConnection
sendSysEx	libsrc/leddevice/dev_net/LedDeviceFadeCandy.cpp	/^int LedDeviceFadeCandy::sendSysEx(uint8_t systemId, uint8_t commandId, QByteArray msg)$/;"	f	class:LedDeviceFadeCandy
sendToClientWithReply	libsrc/webserver/QtHttpClientWrapper.cpp	/^void QtHttpClientWrapper::sendToClientWithReply(QtHttpReply * reply)$/;"	f	class:QtHttpClientWrapper
sendUpdate	libsrc/ssdp/SSDPServer.cpp	/^void SSDPServer::sendUpdate(const QString& st)$/;"	f	class:SSDPServer
sequence_number	libsrc/leddevice/dev_net/LedDeviceUdpE131.h	/^		uint8_t  sequence_number;$/;"	m	struct:__anon6::__anon7
server	include/ssdp/SSDPDiscover.h	/^	QString server;$/;"	m	struct:SSDPService
serverAddress	libsrc/webserver/QtHttpRequest.h	/^		QHostAddress serverAddress;$/;"	m	struct:QtHttpRequest::ClientInfo
serviceName	include/bonjour/bonjourrecord.h	/^	QString serviceName;$/;"	m	class:BonjourRecord
serviceType	include/bonjour/bonjourservicebrowser.h	/^	inline QString serviceType() const { return browsingType; }$/;"	f	class:BonjourServiceBrowser
setActiveDeviceType	libsrc/leddevice/LedDevice.cpp	/^void LedDevice::setActiveDeviceType(const QString& deviceType)$/;"	f	class:LedDevice
setAddress	include/ssdp/SSDPDiscover.h	/^	void setAddress ( const QString &address) { _ssdpAddr = QHostAddress(address); }$/;"	f	class:SSDPDiscover
setAdjustment	libsrc/utils/RgbChannelAdjustment.cpp	/^void RgbChannelAdjustment::setAdjustment(uint8_t adjustR, uint8_t adjustG, uint8_t adjustB)$/;"	f	class:RgbChannelAdjustment
setAdjustmentForLed	libsrc/hyperion/MultiColorAdjustment.cpp	/^void MultiColorAdjustment::setAdjustmentForLed(const QString& id, const unsigned startLed, unsigned endLed)$/;"	f	class:MultiColorAdjustment
setApplicationDescription	include/commandline/Parser.h	/^	void setApplicationDescription(const QString &description)$/;"	f	class:commandline::Parser
setAuthBlock	libsrc/hyperion/AuthManager.cpp	/^void AuthManager::setAuthBlock(const bool &user)$/;"	f	class:AuthManager
setBackLightEnabled	libsrc/utils/RgbTransform.cpp	/^void RgbTransform::setBackLightEnabled(bool enable)$/;"	f	class:RgbTransform
setBacklightColored	libsrc/utils/RgbTransform.cpp	/^void RgbTransform::setBacklightColored(bool backlightColored)$/;"	f	class:RgbTransform
setBacklightEnabled	libsrc/hyperion/MultiColorAdjustment.cpp	/^void MultiColorAdjustment::setBacklightEnabled(bool enable)$/;"	f	class:MultiColorAdjustment
setBacklightThreshold	libsrc/utils/RgbTransform.cpp	/^void RgbTransform::setBacklightThreshold(int backlightThreshold)$/;"	f	class:RgbTransform
setBasePath	libsrc/leddevice/dev_net/ProviderRestApi.cpp	/^void ProviderRestApi::setBasePath(const QString &basePath)$/;"	f	class:ProviderRestApi
setBaseUrl	libsrc/webserver/CgiHandler.cpp	/^void CgiHandler::setBaseUrl(const QString& url)$/;"	f	class:CgiHandler
setBaseUrl	libsrc/webserver/StaticFileServing.cpp	/^void StaticFileServing::setBaseUrl(const QString& url)$/;"	f	class:StaticFileServing
setBlackbarDetectDisable	libsrc/hyperion/ImageProcessor.cpp	/^void ImageProcessor::setBlackbarDetectDisable(bool enable)$/;"	f	class:ImageProcessor
setBody	libsrc/leddevice/dev_net/ProviderRestApi.h	/^	void setBody(const QJsonDocument &body) { _responseBody = body; }$/;"	f	class:httpResponse
setBridgeConfig	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^void LedDevicePhilipsHueBridge::setBridgeConfig(const QJsonDocument &doc)$/;"	f	class:LedDevicePhilipsHueBridge
setBrightness	libsrc/utils/RgbTransform.cpp	/^void RgbTransform::setBrightness(uint8_t brightness)$/;"	f	class:RgbTransform
setBrightnessCompensation	libsrc/utils/RgbTransform.cpp	/^void RgbTransform::setBrightnessCompensation(uint8_t brightnessCompensation)$/;"	f	class:RgbTransform
setBrightnessConfig	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^void YeelightLight::setBrightnessConfig (int min, int max, bool switchoff,  int extraTime, double factor )$/;"	f	class:YeelightLight
setCertificates	libsrc/webserver/QtHttpServer.h	/^	void setCertificates (const QList<QSslCertificate> & certs) { m_sslCerts = certs; };$/;"	f	class:QtHttpServer
setClientInfo	libsrc/webserver/QtHttpRequest.cpp	/^void QtHttpRequest::setClientInfo (const QHostAddress & server, const QHostAddress & client)$/;"	f	class:QtHttpRequest
setColor	libsrc/api/API.cpp	/^void API::setColor(const int &priority, const std::vector<uint8_t> &ledColors, const int &timeout_ms, const QString &origin, const hyperion::Components &callerComp)$/;"	f	class:API
setColor	libsrc/flatbufserver/FlatBufferConnection.cpp	/^void FlatBufferConnection::setColor(const ColorRgb & color, int priority, int duration)$/;"	f	class:FlatBufferConnection
setColor	libsrc/hyperion/Hyperion.cpp	/^void Hyperion::setColor(const int priority, const std::vector<ColorRgb> &ledColors, const int timeout_ms, const QString &origin, bool clearEffects)$/;"	f	class:Hyperion
setColor	libsrc/leddevice/dev_net/LedDeviceAtmoOrb.cpp	/^void LedDeviceAtmoOrb::setColor(int orbId, const ColorRgb &color, int commandType)$/;"	f	class:LedDeviceAtmoOrb
setColor	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^void LedDevicePhilipsHue::setColor(PhilipsHueLight& light, CiColor& color)$/;"	f	class:LedDevicePhilipsHue
setColor	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^void PhilipsHueLight::setColor(const CiColor& color)$/;"	f	class:PhilipsHueLight
setColorHSV	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^bool YeelightLight::setColorHSV(const ColorRgb &colorRGB)$/;"	f	class:YeelightLight
setColorRGB	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^bool YeelightLight::setColorRGB(const ColorRgb &color)$/;"	f	class:YeelightLight
setCommand	libsrc/webserver/QtHttpRequest.h	/^	void setCommand    (const QString & command)     { m_command = command;  };$/;"	f	class:QtHttpRequest
setComponentState	libsrc/api/API.cpp	/^bool API::setComponentState(const QString &comp, bool &compState, QString &replyMsg, const hyperion::Components &callerComp)$/;"	f	class:API
setCropping	libsrc/grabber/qt/QtGrabber.cpp	/^void QtGrabber::setCropping(unsigned cropLeft, unsigned cropRight, unsigned cropTop, unsigned cropBottom)$/;"	f	class:QtGrabber
setCropping	libsrc/grabber/v4l2/V4L2Wrapper.cpp	/^void V4L2Wrapper::setCropping(unsigned cropLeft, unsigned cropRight, unsigned cropTop, unsigned cropBottom)$/;"	f	class:V4L2Wrapper
setCropping	libsrc/grabber/x11/X11Grabber.cpp	/^void X11Grabber::setCropping(unsigned cropLeft, unsigned cropRight, unsigned cropTop, unsigned cropBottom)$/;"	f	class:X11Grabber
setCropping	libsrc/hyperion/Grabber.cpp	/^void Grabber::setCropping(unsigned cropLeft, unsigned cropRight, unsigned cropTop, unsigned cropBottom)$/;"	f	class:Grabber
setCropping	libsrc/hyperion/GrabberWrapper.cpp	/^void GrabberWrapper::setCropping(unsigned cropLeft, unsigned cropRight, unsigned cropTop, unsigned cropBottom)$/;"	f	class:GrabberWrapper
setCropping	libsrc/utils/ImageResampler.cpp	/^void ImageResampler::setCropping(int cropLeft, int cropRight, int cropTop, int cropBottom)$/;"	f	class:ImageResampler
setCurrentTime	libsrc/hyperion/PriorityMuxer.cpp	/^void PriorityMuxer::setCurrentTime(void)$/;"	f	class:PriorityMuxer
setDatabaseName	include/db/DBManager.h	/^	void setDatabaseName(const QString& dbn) { _dbn = dbn; };$/;"	f	class:DBManager
setDebuglevel	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	void setDebuglevel ( int level ) { _debugLevel = level; }$/;"	f	class:YeelightLight
setDescriptionAddress	include/ssdp/SSDPServer.h	/^	void setDescriptionAddress(const QString& addr) { _descAddress = addr; };$/;"	f	class:SSDPServer
setDevicePath	include/hyperion/Grabber.h	/^	virtual void setDevicePath(const QString& path) {}$/;"	f	class:Grabber
setDevicePath	libsrc/grabber/framebuffer/FramebufferFrameGrabber.cpp	/^void FramebufferFrameGrabber::setDevicePath(const QString& path)$/;"	f	class:FramebufferFrameGrabber
setDeviceVideoStandard	include/hyperion/Grabber.h	/^	virtual void setDeviceVideoStandard(QString device, VideoStandard videoStandard) {}$/;"	f	class:Grabber
setDeviceVideoStandard	libsrc/grabber/v4l2/V4L2Grabber.cpp	/^void V4L2Grabber::setDeviceVideoStandard(QString device, VideoStandard videoStandard)$/;"	f	class:V4L2Grabber
setDeviceVideoStandard	libsrc/grabber/v4l2/V4L2Wrapper.cpp	/^void V4L2Wrapper::setDeviceVideoStandard(QString device, VideoStandard videoStandard)$/;"	f	class:V4L2Wrapper
setDisplayIndex	include/hyperion/Grabber.h	/^	virtual void setDisplayIndex(int index) {}$/;"	f	class:Grabber
setDisplayIndex	libsrc/grabber/osx/OsxFrameGrabber.cpp	/^void OsxFrameGrabber::setDisplayIndex(int index)$/;"	f	class:OsxFrameGrabber
setDisplayIndex	libsrc/grabber/qt/QtGrabber.cpp	/^void QtGrabber::setDisplayIndex(int index)$/;"	f	class:QtGrabber
setEffect	libsrc/api/API.cpp	/^void API::setEffect(const EffectCmdData &dat, const hyperion::Components &callerComp)$/;"	f	class:API
setEffect	libsrc/hyperion/Hyperion.cpp	/^int Hyperion::setEffect(const QString &effectName, const QJsonObject &args, int priority, int timeout, const QString &pythonScript, const QString &origin, const QString &imageData)$/;"	f	class:Hyperion
setEffect	libsrc/hyperion/Hyperion.cpp	/^int Hyperion::setEffect(const QString &effectName, int priority, int timeout, const QString & origin)$/;"	f	class:Hyperion
setEnable	include/db/InstanceTable.h	/^	inline void setEnable(const quint8& inst, const bool& newState)$/;"	f	class:InstanceTable
setEnable	libsrc/hyperion/LinearColorSmoothing.cpp	/^void LinearColorSmoothing::setEnable(bool enable)$/;"	f	class:LinearColorSmoothing
setEnable	libsrc/hyperion/PriorityMuxer.cpp	/^void PriorityMuxer::setEnable(const bool& enable)$/;"	f	class:PriorityMuxer
setEnable	libsrc/leddevice/LedDevice.cpp	/^void LedDevice::setEnable(bool enable)$/;"	f	class:LedDevice
setEnabled	libsrc/blackborder/BlackBorderProcessor.cpp	/^void BlackBorderProcessor::setEnabled(bool enable)$/;"	f	class:BlackBorderProcessor
setEnabled	libsrc/hyperion/Grabber.cpp	/^void Grabber::setEnabled(bool enable)$/;"	f	class:Grabber
setError	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	void setError(const YeelightResponse::API_REPLY replyType) { _error = replyType; }$/;"	f	class:YeelightResponse
setError	libsrc/leddevice/dev_net/ProviderRestApi.h	/^	void setError(const bool hasError) { _hasError = hasError; }$/;"	f	class:httpResponse
setErrorCode	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	void setErrorCode(const int &errorCode) { _errorCode = errorCode; _error = API_ERROR;}$/;"	f	class:YeelightResponse
setErrorReason	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	void setErrorReason(const QString &errorReason) { _errorReason = errorReason; }$/;"	f	class:YeelightResponse
setErrorReason	libsrc/leddevice/dev_net/ProviderRestApi.h	/^	void setErrorReason(const QString &errorReason) { _errorReason = errorReason; }$/;"	f	class:httpResponse
setFlags	libsrc/grabber/dispmanx/DispmanxFrameGrabber.cpp	/^void DispmanxFrameGrabber::setFlags(const int vc_flags)$/;"	f	class:DispmanxFrameGrabber
setFlatBufPort	include/ssdp/SSDPServer.h	/^	void setFlatBufPort(const quint16& port) { _fbsPort = QString::number(port); };$/;"	f	class:SSDPServer
setFragment	libsrc/leddevice/dev_net/ProviderRestApi.cpp	/^void ProviderRestApi::setFragment(const QString &fragment)$/;"	f	class:ProviderRestApi
setFramerate	libsrc/grabber/v4l2/V4L2Grabber.cpp	/^bool V4L2Grabber::setFramerate(int fps)$/;"	f	class:V4L2Grabber
setFramerate	libsrc/hyperion/Grabber.cpp	/^bool Grabber::setFramerate(int fps)$/;"	f	class:Grabber
setGamma	libsrc/utils/RgbTransform.cpp	/^void RgbTransform::setGamma(double gammaR, double gammaG, double gammaB)$/;"	f	class:RgbTransform
setGroupMap	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^void LedDevicePhilipsHueBridge::setGroupMap(const QJsonDocument &doc)$/;"	f	class:LedDevicePhilipsHueBridge
setGroupState	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^QJsonDocument LedDevicePhilipsHueBridge::setGroupState(const unsigned int groupId, bool state)$/;"	f	class:LedDevicePhilipsHueBridge
setHardDisable	libsrc/blackborder/BlackBorderProcessor.cpp	/^void BlackBorderProcessor::setHardDisable(const bool& disable) {$/;"	f	class:BlackBorderProcessor
setHardLedMappingType	libsrc/hyperion/ImageProcessor.cpp	/^void ImageProcessor::setHardLedMappingType(int mapType)$/;"	f	class:ImageProcessor
setHorizontalPixelDecimation	libsrc/utils/ImageResampler.cpp	/^void ImageResampler::setHorizontalPixelDecimation(int decimator)$/;"	f	class:ImageResampler
setHostname	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^void YeelightLight::setHostname( const QString &hostname, quint16 port = API_DEFAULT_PORT )$/;"	f	class:YeelightLight
setHttpStatusCode	libsrc/leddevice/dev_net/ProviderRestApi.h	/^	void setHttpStatusCode(const int httpStatusCode) { _httpStatusCode = httpStatusCode; }$/;"	f	class:httpResponse
setHyperionInstance	libsrc/api/API.cpp	/^bool API::setHyperionInstance(const quint8 &inst)$/;"	f	class:API
setHyperionName	include/ssdp/SSDPServer.h	/^	void setHyperionName(const QString &name) { _name = name; };$/;"	f	class:SSDPServer
setImage	libsrc/api/API.cpp	/^bool API::setImage(ImageCmdData &data, hyperion::Components comp, QString &replyMsg, const hyperion::Components &callerComp)$/;"	f	class:API
setImage	libsrc/api/JsonAPI.cpp	/^void JsonAPI::setImage(const Image<ColorRgb> &image)$/;"	f	class:JsonAPI
setImage	libsrc/flatbufserver/FlatBufferConnection.cpp	/^void FlatBufferConnection::setImage(const Image<ColorRgb> &image)$/;"	f	class:FlatBufferConnection
setInError	libsrc/leddevice/LedDevice.cpp	/^void LedDevice::setInError(const QString& errorMsg)$/;"	f	class:LedDevice
setInError	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^void YeelightLight::setInError(const QString& errorMsg)$/;"	f	class:YeelightLight
setInError	libsrc/leddevice/dev_serial/ProviderRs232.cpp	/^void ProviderRs232::setInError(const QString& errorMsg)$/;"	f	class:ProviderRs232
setInput	libsrc/grabber/v4l2/V4L2Grabber.cpp	/^bool V4L2Grabber::setInput(int input)$/;"	f	class:V4L2Grabber
setInput	libsrc/hyperion/Grabber.cpp	/^bool Grabber::setInput(int input)$/;"	f	class:Grabber
setInput	libsrc/hyperion/Hyperion.cpp	/^bool Hyperion::setInput(const int priority, const std::vector<ColorRgb>& ledColors, int timeout_ms, const bool& clearEffect)$/;"	f	class:Hyperion
setInput	libsrc/hyperion/PriorityMuxer.cpp	/^bool PriorityMuxer::setInput(const int priority, const std::vector<ColorRgb>& ledColors, int64_t timeout_ms)$/;"	f	class:PriorityMuxer
setInputImage	libsrc/hyperion/Hyperion.cpp	/^bool Hyperion::setInputImage(const int priority, const Image<ColorRgb>& image, int64_t timeout_ms, const bool& clearEffect)$/;"	f	class:Hyperion
setInputImage	libsrc/hyperion/PriorityMuxer.cpp	/^bool PriorityMuxer::setInputImage(const int priority, const Image<ColorRgb>& image, int64_t timeout_ms)$/;"	f	class:PriorityMuxer
setInputInactive	libsrc/hyperion/Hyperion.cpp	/^bool Hyperion::setInputInactive(const quint8& priority)$/;"	f	class:Hyperion
setInputInactive	libsrc/hyperion/PriorityMuxer.cpp	/^bool PriorityMuxer::setInputInactive(const quint8& priority)$/;"	f	class:PriorityMuxer
setInstanceName	libsrc/api/API.cpp	/^QString API::setInstanceName(const quint8 &index, const QString &name)$/;"	f	class:API
setJsonServerPort	include/ssdp/SSDPServer.h	/^	void setJsonServerPort(const quint16& port) { _jssPort = QString::number(port); };$/;"	f	class:SSDPServer
setLastUse	include/db/InstanceTable.h	/^	inline void setLastUse(const quint8& inst)$/;"	f	class:InstanceTable
setLatchTime	libsrc/leddevice/LedDevice.cpp	/^void LedDevice::setLatchTime( int latchTime_ms )$/;"	f	class:LedDevice
setLedCount	libsrc/leddevice/LedDevice.cpp	/^void LedDevice::setLedCount(unsigned int ledCount)$/;"	f	class:LedDevice
setLedMappingType	libsrc/api/API.cpp	/^void API::setLedMappingType(const int &type, const hyperion::Components &callerComp)$/;"	f	class:API
setLedMappingType	libsrc/hyperion/Hyperion.cpp	/^void Hyperion::setLedMappingType(const int& mappingType)$/;"	f	class:Hyperion
setLedMappingType	libsrc/hyperion/ImageProcessor.cpp	/^void ImageProcessor::setLedMappingType(int mapType)$/;"	f	class:ImageProcessor
setLedString	libsrc/hyperion/ImageProcessor.cpp	/^void ImageProcessor::setLedString(const LedString& ledString)$/;"	f	class:ImageProcessor
setLightState	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^void LedDevicePhilipsHueBridge::setLightState(const unsigned int lightId, const QString &state)$/;"	f	class:LedDevicePhilipsHueBridge
setLights	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^bool LedDevicePhilipsHue::setLights()$/;"	f	class:LedDevicePhilipsHue
setLightsCount	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^void LedDevicePhilipsHue::setLightsCount( unsigned int lightsCount )$/;"	f	class:LedDevicePhilipsHue
setLightsCount	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	void setLightsCount( unsigned int lightsCount )	{ _lightsCount = lightsCount; }$/;"	f	class:LedDeviceYeelight
setLightsMap	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^void LedDevicePhilipsHueBridge::setLightsMap(const QJsonDocument &doc)$/;"	f	class:LedDevicePhilipsHueBridge
setLogLevel	libsrc/utils/Logger.cpp	/^void Logger::setLogLevel(LogLevel level,QString name)$/;"	f	class:Logger
setMaxWaitResponseTime	include/ssdp/SSDPDiscover.h	/^	void setMaxWaitResponseTime ( int maxWaitResponseTime) { _ssdpMaxWaitResponseTime = maxWaitResponseTime; }$/;"	f	class:SSDPDiscover
setMessage	libsrc/utils/jsonschema/QJsonSchemaChecker.cpp	/^void QJsonSchemaChecker::setMessage(const QString & message)$/;"	f	class:QJsonSchemaChecker
setMinLevel	include/utils/Logger.h	/^	void     setMinLevel(LogLevel level) { _minLevel = level; }$/;"	f	class:Logger
setMusicMode	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^bool YeelightLight::setMusicMode(bool on, const QHostAddress &hostAddress, int port)$/;"	f	class:YeelightLight
setName	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	void setName( const QString& name )  { _name = name; }$/;"	f	class:YeelightLight
setNetworkReplyError	libsrc/leddevice/dev_net/ProviderRestApi.h	/^	void setNetworkReplyError (const QNetworkReply::NetworkError networkReplyError) { _networkReplyError = networkReplyError; }$/;"	f	class:httpResponse
setNewComponentState	libsrc/hyperion/ComponentRegister.cpp	/^void ComponentRegister::setNewComponentState(const hyperion::Components comp, const bool activated)$/;"	f	class:ComponentRegister
setNewComponentState	libsrc/hyperion/Hyperion.cpp	/^void Hyperion::setNewComponentState(const hyperion::Components& component, const bool& state)$/;"	f	class:Hyperion
setNewTokenRequest	libsrc/api/API.cpp	/^void API::setNewTokenRequest(const QString &comment, const QString &id)$/;"	f	class:API
setNewTokenRequest	libsrc/hyperion/AuthManager.cpp	/^void AuthManager::setNewTokenRequest(QObject *caller, const QString &comment, const QString &id)$/;"	f	class:AuthManager
setOnOffState	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^void LedDevicePhilipsHue::setOnOffState(PhilipsHueLight& light, bool on)$/;"	f	class:LedDevicePhilipsHue
setOnOffState	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^void PhilipsHueLight::setOnOffState(bool on)$/;"	f	class:PhilipsHueLight
setPath	libsrc/leddevice/dev_net/ProviderRestApi.cpp	/^void ProviderRestApi::setPath ( const QString &path )$/;"	f	class:ProviderRestApi
setPause	libsrc/hyperion/LinearColorSmoothing.cpp	/^void LinearColorSmoothing::setPause(bool pause)$/;"	f	class:LinearColorSmoothing
setPixelDecimation	include/hyperion/Grabber.h	/^	virtual void setPixelDecimation(int pixelDecimation) {}$/;"	f	class:Grabber
setPixelDecimation	libsrc/grabber/qt/QtGrabber.cpp	/^void QtGrabber::setPixelDecimation(int pixelDecimation)$/;"	f	class:QtGrabber
setPixelDecimation	libsrc/grabber/v4l2/V4L2Grabber.cpp	/^void V4L2Grabber::setPixelDecimation(int pixelDecimation)$/;"	f	class:V4L2Grabber
setPixelDecimation	libsrc/grabber/x11/X11Grabber.cpp	/^void X11Grabber::setPixelDecimation(int pixelDecimation)$/;"	f	class:X11Grabber
setPort	include/ssdp/SSDPDiscover.h	/^	void setPort ( quint16 port) { _ssdpPort = port; }$/;"	f	class:SSDPDiscover
setPostData	libsrc/webserver/QtHttpRequest.h	/^	void setPostData   (const QtHttpPostData & data) { m_postData = data;    };$/;"	f	class:QtHttpRequest
setPower	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^bool YeelightLight::setPower(bool on)$/;"	f	class:YeelightLight
setPower	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^bool YeelightLight::setPower(bool on, YeelightLight::API_EFFECT effect, int duration, API_MODE mode)$/;"	f	class:YeelightLight
setPriority	libsrc/hyperion/PriorityMuxer.cpp	/^bool PriorityMuxer::setPriority(const uint8_t priority)$/;"	f	class:PriorityMuxer
setPrivateKey	libsrc/webserver/QtHttpServer.h	/^	void setPrivateKey   (const QSslKey & key)                  { m_sslKey = key; };$/;"	f	class:QtHttpServer
setQuery	libsrc/leddevice/dev_net/ProviderRestApi.cpp	/^void ProviderRestApi::setQuery(const QUrlQuery &query)$/;"	f	class:ProviderRestApi
setQuotaWaitTime	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	void setQuotaWaitTime( int waitTime ) { _waitTimeQuota = waitTime; }$/;"	f	class:YeelightLight
setRegister	libsrc/flatbufserver/FlatBufferConnection.cpp	/^void FlatBufferConnection::setRegister(const QString& origin, int priority)$/;"	f	class:FlatBufferConnection
setResult	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	void setResult(const QJsonArray &result) { _resultArray = result; }$/;"	f	class:YeelightResponse
setRootPath	libsrc/db/DBManager.cpp	/^void DBManager::setRootPath(const QString& rootPath)$/;"	f	class:DBManager
setSSDPDescription	libsrc/webserver/StaticFileServing.cpp	/^void StaticFileServing::setSSDPDescription(const QString& desc)$/;"	f	class:StaticFileServing
setSSDPDescription	libsrc/webserver/WebServer.cpp	/^void WebServer::setSSDPDescription(const QString & desc)$/;"	f	class:WebServer
setSchema	libsrc/utils/jsonschema/QJsonSchemaChecker.cpp	/^bool QJsonSchemaChecker::setSchema(const QJsonObject & schema)$/;"	f	class:QJsonSchemaChecker
setSearchFilter	libsrc/ssdp/SSDPDiscover.cpp	/^bool SSDPDiscover::setSearchFilter ( const QString& filter, const QString& filterHeader)$/;"	f	class:SSDPDiscover
setSearchTarget	include/ssdp/SSDPDiscover.h	/^	void setSearchTarget ( const QString &searchTarget) { _searchTarget = searchTarget; }$/;"	f	class:SSDPDiscover
setServerName	libsrc/webserver/QtHttpServer.h	/^	void setServerName   (const QString & serverName)           { m_serverName = serverName; };$/;"	f	class:QtHttpServer
setSignalDetectionEnable	include/hyperion/Grabber.h	/^	virtual void setSignalDetectionEnable(bool enable) {}$/;"	f	class:Grabber
setSignalDetectionEnable	libsrc/grabber/v4l2/V4L2Grabber.cpp	/^void V4L2Grabber::setSignalDetectionEnable(bool enable)$/;"	f	class:V4L2Grabber
setSignalDetectionEnable	libsrc/grabber/v4l2/V4L2Wrapper.cpp	/^void V4L2Wrapper::setSignalDetectionEnable(bool enable)$/;"	f	class:V4L2Wrapper
setSignalDetectionOffset	include/hyperion/Grabber.h	/^	virtual void setSignalDetectionOffset($/;"	f	class:Grabber
setSignalDetectionOffset	libsrc/grabber/v4l2/V4L2Grabber.cpp	/^void V4L2Grabber::setSignalDetectionOffset(double horizontalMin, double verticalMin, double horizontalMax, double verticalMax)$/;"	f	class:V4L2Grabber
setSignalDetectionOffset	libsrc/grabber/v4l2/V4L2Wrapper.cpp	/^void V4L2Wrapper::setSignalDetectionOffset(double verticalMin, double horizontalMin, double verticalMax, double horizontalMax)$/;"	f	class:V4L2Wrapper
setSignalThreshold	include/hyperion/Grabber.h	/^	virtual void setSignalThreshold($/;"	f	class:Grabber
setSignalThreshold	libsrc/grabber/v4l2/V4L2Grabber.cpp	/^void V4L2Grabber::setSignalThreshold(double redSignalThreshold, double greenSignalThreshold, double blueSignalThreshold, int noSignalCounterThreshold)$/;"	f	class:V4L2Grabber
setSignalThreshold	libsrc/grabber/v4l2/V4L2Wrapper.cpp	/^void V4L2Wrapper::setSignalThreshold(double redSignalThreshold, double greenSignalThreshold, double blueSignalThreshold)$/;"	f	class:V4L2Wrapper
setSingleDashWordOptionMode	include/commandline/Parser.h	/^	void setSingleDashWordOptionMode(QCommandLineParser::SingleDashWordOptionMode singleDashWordOptionMode)$/;"	f	class:commandline::Parser
setSize	include/hyperion/ImageProcessor.h	/^	void setSize(const Image<Pixel_T> &image)$/;"	f	class:ImageProcessor
setSize	libsrc/hyperion/ImageProcessor.cpp	/^void ImageProcessor::setSize(const unsigned width, const unsigned height)$/;"	f	class:ImageProcessor
setSkipReply	libsrc/flatbufserver/FlatBufferConnection.cpp	/^void FlatBufferConnection::setSkipReply(const bool& skip)$/;"	f	class:FlatBufferConnection
setSourceAutoSelect	libsrc/api/API.cpp	/^void API::setSourceAutoSelect(const bool state, const hyperion::Components &callerComp)$/;"	f	class:API
setSourceAutoSelect	libsrc/hyperion/Hyperion.cpp	/^void Hyperion::setSourceAutoSelect(const bool state)$/;"	f	class:Hyperion
setSourceAutoSelectEnabled	libsrc/hyperion/PriorityMuxer.cpp	/^bool PriorityMuxer::setSourceAutoSelectEnabled(const bool& enable, const bool& update)$/;"	f	class:PriorityMuxer
setState	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^void LedDevicePhilipsHue::setState(PhilipsHueLight& light, bool on, const CiColor& color)$/;"	f	class:LedDevicePhilipsHue
setStatusCode	libsrc/webserver/QtHttpReply.h	/^	void setStatusCode (StatusCode statusCode)   { m_statusCode = statusCode; };$/;"	f	class:QtHttpReply
setStreamGroupState	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^bool LedDevicePhilipsHue::setStreamGroupState(bool state)$/;"	f	class:LedDevicePhilipsHue
setStreamSocket	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^void YeelightLight::setStreamSocket( QTcpSocket* socket )$/;"	f	class:YeelightLight
setSubscriptionsTo	libsrc/api/JsonCB.cpp	/^void JsonCB::setSubscriptionsTo(Hyperion* hyperion){$/;"	f	class:JsonCB
setSwitches	include/commandline/SwitchOption.h	/^	void setSwitches(const QMap<QString, T> &_switches)              { this->_switches = _switches; }$/;"	f	class:commandline::SwitchOption
setSystemCaptureEnable	libsrc/hyperion/CaptureCont.cpp	/^void CaptureCont::setSystemCaptureEnable(const bool& enable)$/;"	f	class:CaptureCont
setSystemInactive	libsrc/hyperion/CaptureCont.cpp	/^void CaptureCont::setSystemInactive()$/;"	f	class:CaptureCont
setTable	libsrc/db/DBManager.cpp	/^void DBManager::setTable(const QString& table)$/;"	f	class:DBManager
setTransitionEffect	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^void YeelightLight::setTransitionEffect ( YeelightLight::API_EFFECT effect ,int duration )$/;"	f	class:YeelightLight
setTransitionTime	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^void LedDevicePhilipsHue::setTransitionTime(PhilipsHueLight& light)$/;"	f	class:LedDevicePhilipsHue
setTransitionTime	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^void PhilipsHueLight::setTransitionTime(int transitionTime)$/;"	f	class:PhilipsHueLight
setUrl	libsrc/webserver/QtHttpRequest.h	/^	void setUrl        (const QUrl & url)            { m_url = url;          };$/;"	f	class:QtHttpRequest
setUseChunked	libsrc/webserver/QtHttpReply.h	/^	void setUseChunked (bool chunked = false)    { m_useChunked = chunked;    };$/;"	f	class:QtHttpReply
setUseSecure	libsrc/webserver/QtHttpServer.cpp	/^void QtHttpServer::setUseSecure (const bool ssl)$/;"	f	class:QtHttpServer
setUseSecure	libsrc/webserver/QtHttpServer.cpp	/^void QtHttpServerWrapper::setUseSecure (const bool ssl)$/;"	f	class:QtHttpServerWrapper
setUserToken	include/db/AuthTable.h	/^	inline bool setUserToken(const QString& user)$/;"	f	class:AuthTable
setUuid	include/ssdp/SSDPServer.h	/^	void setUuid(const QString& uuid) { _uuid = uuid; };$/;"	f	class:SSDPServer
setV4LCaptureEnable	libsrc/hyperion/CaptureCont.cpp	/^void CaptureCont::setV4LCaptureEnable(const bool& enable)$/;"	f	class:CaptureCont
setV4lInactive	libsrc/hyperion/CaptureCont.cpp	/^void CaptureCont::setV4lInactive()$/;"	f	class:CaptureCont
setValidator	libsrc/commandline/ValidatorOption.cpp	/^void ValidatorOption::setValidator(const QValidator *validator)$/;"	f	class:ValidatorOption
setVerticalPixelDecimation	libsrc/utils/ImageResampler.cpp	/^void ImageResampler::setVerticalPixelDecimation(int decimator)$/;"	f	class:ImageResampler
setVideoMode	libsrc/api/API.cpp	/^void API::setVideoMode(const VideoMode &mode, const hyperion::Components &callerComp)$/;"	f	class:API
setVideoMode	libsrc/grabber/qt/QtGrabber.cpp	/^void QtGrabber::setVideoMode(VideoMode mode)$/;"	f	class:QtGrabber
setVideoMode	libsrc/grabber/x11/X11Grabber.cpp	/^void X11Grabber::setVideoMode(VideoMode mode)$/;"	f	class:X11Grabber
setVideoMode	libsrc/hyperion/Grabber.cpp	/^void Grabber::setVideoMode(VideoMode mode)$/;"	f	class:Grabber
setVideoMode	libsrc/hyperion/GrabberWrapper.cpp	/^void GrabberWrapper::setVideoMode(const VideoMode& mode)$/;"	f	class:GrabberWrapper
setVideoMode	libsrc/hyperion/Hyperion.cpp	/^void Hyperion::setVideoMode(const VideoMode& mode)$/;"	f	class:Hyperion
setVideoMode	libsrc/utils/ImageResampler.cpp	/^void ImageResampler::setVideoMode(VideoMode mode)$/;"	f	class:ImageResampler
setVisiblePriority	libsrc/api/API.cpp	/^void API::setVisiblePriority(const int &priority, const hyperion::Components &callerComp)$/;"	f	class:API
setVisiblePriority	libsrc/hyperion/Hyperion.cpp	/^bool Hyperion::setVisiblePriority(const int& priority)$/;"	f	class:Hyperion
setWidthHeight	include/grabber/QtGrabber.h	/^	virtual bool setWidthHeight(int width, int height) { return true; };$/;"	f	class:QtGrabber
setWidthHeight	include/grabber/X11Grabber.h	/^	virtual bool setWidthHeight(int width, int height) { return true; };$/;"	f	class:X11Grabber
setWidthHeight	libsrc/grabber/dispmanx/DispmanxFrameGrabber.cpp	/^bool DispmanxFrameGrabber::setWidthHeight(int width, int height)$/;"	f	class:DispmanxFrameGrabber
setWidthHeight	libsrc/grabber/v4l2/V4L2Grabber.cpp	/^bool V4L2Grabber::setWidthHeight(int width, int height)$/;"	f	class:V4L2Grabber
setWidthHeight	libsrc/hyperion/Grabber.cpp	/^bool Grabber::setWidthHeight(int width, int height)$/;"	f	class:Grabber
setjmp_buffer	include/grabber/V4L2Grabber.h	/^		jmp_buf setjmp_buffer;$/;"	m	struct:V4L2Grabber::errorManager
settings	include/utils/settings.h	/^namespace settings {$/;"	n
settlingTime	libsrc/hyperion/LinearColorSmoothing.h	/^		int64_t  settlingTime;$/;"	m	struct:LinearColorSmoothing::SMOOTHING_CFG
setupDisplay	libsrc/grabber/qt/QtGrabber.cpp	/^bool QtGrabber::setupDisplay()$/;"	f	class:QtGrabber
setupPSK	libsrc/leddevice/dev_net/ProviderUdpSSL.cpp	/^bool ProviderUdpSSL::setupPSK()$/;"	f	class:ProviderUdpSSL
setupResources	libsrc/grabber/x11/X11Grabber.cpp	/^void X11Grabber::setupResources()$/;"	f	class:X11Grabber
setupStructure	libsrc/leddevice/dev_net/ProviderUdpSSL.cpp	/^bool ProviderUdpSSL::setupStructure()$/;"	f	class:ProviderUdpSSL
showHelp	include/commandline/Parser.h	/^	void showHelp(int exitCode = 0)$/;"	f	class:commandline::Parser
signal_handler	libsrc/utils/DefaultSignalHandler.cpp	/^void signal_handler(int signum, siginfo_t * \/*info*\/, void * \/*context*\/)$/;"	f	namespace:DefaultSignalHandler
size	include/utils/Image.h	/^	ssize_t size() const$/;"	f	class:Image
size	libsrc/grabber/amlogic/meson_ion.h	/^	unsigned int size;$/;"	m	struct:meson_phys_data
size	libsrc/leddevice/dev_serial/LedDeviceSedu.cpp	/^	size_t size;$/;"	m	struct:FrameSpec	file:
skipDuplicateKeys	include/ssdp/SSDPDiscover.h	/^	void skipDuplicateKeys( bool skip ) { _skipDupKeys = skip; }$/;"	f	class:SSDPDiscover
slots	include/effectengine/Effect.h	5;"	d
slots	include/effectengine/Effect.h	7;"	d
slots	include/effectengine/EffectModule.h	3;"	d
slots	include/effectengine/EffectModule.h	5;"	d
slots	include/python/PythonUtils.h	3;"	d
slots	include/python/PythonUtils.h	5;"	d
slots	libsrc/python/PythonInit.cpp	1;"	d	file:
slots	libsrc/python/PythonInit.cpp	3;"	d	file:
smoothCfg	include/effectengine/EffectDefinition.h	/^	unsigned smoothCfg;$/;"	m	struct:EffectDefinition
smooth_cfg	include/hyperion/PriorityMuxer.h	/^		unsigned smooth_cfg;$/;"	m	struct:PriorityMuxer::InputInfo
socketClosed	libsrc/boblightserver/BoblightClientConnection.cpp	/^void BoblightClientConnection::socketClosed()$/;"	f	class:BoblightClientConnection
sourceAutoSelectEnabled	libsrc/hyperion/Hyperion.cpp	/^bool Hyperion::sourceAutoSelectEnabled()$/;"	f	class:Hyperion
sourceFile	libsrc/utils/Profiler.cpp	/^	const char* sourceFile;$/;"	m	struct:StopWatchItem	file:
source_name	libsrc/leddevice/dev_net/LedDeviceUdpE131.h	/^		char     source_name[64];$/;"	m	struct:__anon6::__anon7
split	include/utils/QStringUtils.h	/^inline QStringList split (const QString &string, QChar sep, SplitBehavior behavior = SplitBehavior::KeepEmptyParts, Qt::CaseSensitivity cs = Qt::CaseSensitive)$/;"	f	namespace:QStringUtils
split	include/utils/QStringUtils.h	/^inline QStringList split (const QString &string, const QRegExp &rx, SplitBehavior behavior = SplitBehavior::KeepEmptyParts)$/;"	f	namespace:QStringUtils
split	include/utils/QStringUtils.h	/^inline QStringList split (const QString &string, const QString &sep, SplitBehavior behavior = SplitBehavior::KeepEmptyParts, Qt::CaseSensitivity cs = Qt::CaseSensitive)$/;"	f	namespace:QStringUtils
ssize_t	include/utils/Image.h	/^typedef SSIZE_T ssize_t;$/;"	t
ssize_t	libsrc/leddevice/dev_net/LedDeviceFadeCandy.cpp	/^typedef SSIZE_T ssize_t;$/;"	t	file:
ssl	libsrc/leddevice/dev_net/ProviderUdpSSL.h	/^	mbedtls_ssl_context          ssl;$/;"	m	class:ProviderUdpSSL
sslLog	libsrc/leddevice/dev_net/ProviderUdpSSL.cpp	/^void ProviderUdpSSL::sslLog(const QString &msg, const char* errorType)$/;"	f	class:ProviderUdpSSL
sslLog	libsrc/leddevice/dev_net/ProviderUdpSSL.cpp	/^void ProviderUdpSSL::sslLog(const char* msg, const char* errorType)$/;"	f	class:ProviderUdpSSL
start	include/grabber/V4L2Grabber.h	/^			void   *start;$/;"	m	struct:V4L2Grabber::buffer
start	libsrc/boblightserver/BoblightServer.cpp	/^void BoblightServer::start()$/;"	f	class:BoblightServer
start	libsrc/grabber/v4l2/V4L2Grabber.cpp	/^bool V4L2Grabber::start()$/;"	f	class:V4L2Grabber
start	libsrc/grabber/v4l2/V4L2Wrapper.cpp	/^bool V4L2Wrapper::start()$/;"	f	class:V4L2Wrapper
start	libsrc/hyperion/GrabberWrapper.cpp	/^bool GrabberWrapper::start()$/;"	f	class:GrabberWrapper
start	libsrc/hyperion/Hyperion.cpp	/^void Hyperion::start()$/;"	f	class:Hyperion
start	libsrc/jsonserver/JsonServer.cpp	/^void JsonServer::start()$/;"	f	class:JsonServer
start	libsrc/leddevice/LedDevice.cpp	/^void LedDevice::start()$/;"	f	class:LedDevice
start	libsrc/ssdp/SSDPServer.cpp	/^bool SSDPServer::start()$/;"	f	class:SSDPServer
start	libsrc/webserver/QtHttpServer.cpp	/^void QtHttpServer::start (quint16 port)$/;"	f	class:QtHttpServer
start	libsrc/webserver/WebServer.cpp	/^void WebServer::start()$/;"	f	class:WebServer
startAll	libsrc/hyperion/HyperionIManager.cpp	/^void HyperionIManager::startAll()$/;"	f	class:HyperionIManager
startCachedEffects	libsrc/effectengine/EffectEngine.cpp	/^void EffectEngine::startCachedEffects()$/;"	f	class:EffectEngine
startInstance	libsrc/api/API.cpp	/^void API::startInstance(const quint8 &index)$/;"	f	class:API
startInstance	libsrc/hyperion/HyperionIManager.cpp	/^bool HyperionIManager::startInstance(const quint8& inst, const bool& block)$/;"	f	class:HyperionIManager
startMusicModeServer	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^bool LedDeviceYeelight::startMusicModeServer()$/;"	f	class:LedDeviceYeelight
startRefreshTimer	libsrc/leddevice/LedDevice.cpp	/^void LedDevice::startRefreshTimer()$/;"	f	class:LedDevice
startSSLHandshake	libsrc/leddevice/dev_net/ProviderUdpSSL.cpp	/^bool ProviderUdpSSL::startSSLHandshake()$/;"	f	class:ProviderUdpSSL
startServer	libsrc/flatbufserver/FlatBufferServer.cpp	/^void FlatBufferServer::startServer()$/;"	f	class:FlatBufferServer
startServer	libsrc/protoserver/ProtoServer.cpp	/^void ProtoServer::startServer()$/;"	f	class:ProtoServer
startStream	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^bool LedDevicePhilipsHue::startStream()$/;"	f	class:LedDevicePhilipsHue
startTime	libsrc/utils/Profiler.cpp	/^	clock_t startTime;$/;"	m	struct:StopWatchItem	file:
startUPDConnection	libsrc/leddevice/dev_net/ProviderUdpSSL.cpp	/^bool ProviderUdpSSL::startUPDConnection()$/;"	f	class:ProviderUdpSSL
start_capturing	libsrc/grabber/v4l2/V4L2Grabber.cpp	/^void V4L2Grabber::start_capturing()$/;"	f	class:V4L2Grabber
start_retry_left	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	int start_retry_left;$/;"	m	class:LedDevicePhilipsHue
stop	libsrc/boblightserver/BoblightServer.cpp	/^void BoblightServer::stop()$/;"	f	class:BoblightServer
stop	libsrc/grabber/v4l2/V4L2Grabber.cpp	/^void V4L2Grabber::stop()$/;"	f	class:V4L2Grabber
stop	libsrc/grabber/v4l2/V4L2Wrapper.cpp	/^void V4L2Wrapper::stop()$/;"	f	class:V4L2Wrapper
stop	libsrc/hyperion/GrabberWrapper.cpp	/^void GrabberWrapper::stop()$/;"	f	class:GrabberWrapper
stop	libsrc/hyperion/Hyperion.cpp	/^void Hyperion::stop()$/;"	f	class:Hyperion
stop	libsrc/jsonserver/JsonServer.cpp	/^void JsonServer::stop()$/;"	f	class:JsonServer
stop	libsrc/leddevice/LedDevice.cpp	/^void LedDevice::stop()$/;"	f	class:LedDevice
stop	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^void LedDevicePhilipsHue::stop()$/;"	f	class:LedDevicePhilipsHue
stop	libsrc/ssdp/SSDPServer.cpp	/^void SSDPServer::stop()$/;"	f	class:SSDPServer
stop	libsrc/webserver/QtHttpServer.cpp	/^void QtHttpServer::stop (void)$/;"	f	class:QtHttpServer
stop	libsrc/webserver/WebServer.cpp	/^void WebServer::stop()$/;"	f	class:WebServer
stopAll	libsrc/hyperion/HyperionIManager.cpp	/^void HyperionIManager::stopAll()$/;"	f	class:HyperionIManager
stopBlackTimeoutTimer	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^void LedDevicePhilipsHue::stopBlackTimeoutTimer()$/;"	f	class:LedDevicePhilipsHue
stopDataConnections	libsrc/api/JsonAPI.cpp	/^void JsonAPI::stopDataConnections(void)$/;"	f	class:JsonAPI
stopDataConnectionss	libsrc/api/API.cpp	/^void API::stopDataConnectionss()$/;"	f	class:API
stopDeviceThread	libsrc/leddevice/LedDeviceWrapper.cpp	/^void LedDeviceWrapper::stopDeviceThread()$/;"	f	class:LedDeviceWrapper
stopInstance	libsrc/api/API.cpp	/^void API::stopInstance(const quint8 &index)$/;"	f	class:API
stopInstance	libsrc/hyperion/HyperionIManager.cpp	/^bool HyperionIManager::stopInstance(const quint8& inst)$/;"	f	class:HyperionIManager
stopMusicModeServer	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^bool LedDeviceYeelight::stopMusicModeServer()$/;"	f	class:LedDeviceYeelight
stopRefreshTimer	libsrc/leddevice/LedDevice.cpp	/^void LedDevice::stopRefreshTimer()$/;"	f	class:LedDevice
stopServer	libsrc/flatbufserver/FlatBufferServer.cpp	/^void FlatBufferServer::stopServer()$/;"	f	class:FlatBufferServer
stopServer	libsrc/protoserver/ProtoServer.cpp	/^void ProtoServer::stopServer()$/;"	f	class:ProtoServer
stopServer	libsrc/ssdp/SSDPHandler.cpp	/^void SSDPHandler::stopServer()$/;"	f	class:SSDPHandler
stopStream	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^bool LedDevicePhilipsHue::stopStream()$/;"	f	class:LedDevicePhilipsHue
stop_capturing	libsrc/grabber/v4l2/V4L2Grabber.cpp	/^void V4L2Grabber::stop_capturing()$/;"	f	class:V4L2Grabber
stop_retry_left	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	int stop_retry_left;$/;"	m	class:LedDevicePhilipsHue
storeState	libsrc/leddevice/LedDevice.cpp	/^bool LedDevice::storeState()$/;"	f	class:LedDevice
storeState	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^bool LedDevicePhilipsHue::storeState()$/;"	f	class:LedDevicePhilipsHue
storeState	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^bool LedDeviceYeelight::storeState()$/;"	f	class:LedDeviceYeelight
storeState	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^void YeelightLight::storeState()$/;"	f	class:YeelightLight
streamCommand	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^bool YeelightLight::streamCommand( const QJsonDocument &command )$/;"	f	class:YeelightLight
streamLedcolorsUpdate	libsrc/api/JsonAPI.cpp	/^void JsonAPI::streamLedcolorsUpdate(const std::vector<ColorRgb> &ledColors)$/;"	f	class:JsonAPI
stringToColorOrder	include/hyperion/LedString.h	/^inline ColorOrder stringToColorOrder(const QString & order)$/;"	f
stringToComponent	include/utils/Components.h	/^inline Components stringToComponent(QString component)$/;"	f	namespace:hyperion
stringToType	include/utils/settings.h	/^	inline type stringToType(const QString& type)$/;"	f	namespace:settings
stringToWhiteAlgorithm	libsrc/utils/RgbToRgbw.cpp	/^WhiteAlgorithm stringToWhiteAlgorithm(QString str)$/;"	f	namespace:RGBW
subscribeFor	libsrc/api/JsonCB.cpp	/^bool JsonCB::subscribeFor(const QString& type, const bool & unsubscribe)$/;"	f	class:JsonCB
switchOff	libsrc/leddevice/LedDevice.cpp	/^bool LedDevice::switchOff()$/;"	f	class:LedDevice
switchOff	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^bool LedDevicePhilipsHue::switchOff()$/;"	f	class:LedDevicePhilipsHue
switchOn	libsrc/leddevice/LedDevice.cpp	/^bool LedDevice::switchOn()$/;"	f	class:LedDevice
switchValue	include/commandline/SwitchOption.h	/^	T & switchValue(Parser & parser)                                 { return _switches[value(parser).toLower()]; }$/;"	f	class:commandline::SwitchOption
tableExists	libsrc/db/DBManager.cpp	/^bool DBManager::tableExists(const QString& table) const$/;"	f	class:DBManager
testAndOpen	libsrc/leddevice/dev_hid/LedDeviceHyperionUsbasp.cpp	/^int LedDeviceHyperionUsbasp::testAndOpen(libusb_device * device)$/;"	f	class:LedDeviceHyperionUsbasp
testAndOpen	libsrc/leddevice/dev_hid/LedDeviceLightpack.cpp	/^int LedDeviceLightpack::testAndOpen(libusb_device * device, const QString & requestedSerialNumber)$/;"	f	class:LedDeviceLightpack
throw_errno_exception	include/grabber/V4L2Grabber.h	/^	void throw_errno_exception(const QString & error)$/;"	f	class:V4L2Grabber
throw_exception	include/grabber/V4L2Grabber.h	/^	void throw_exception(const QString & error)$/;"	f	class:V4L2Grabber
timeTrigger	libsrc/hyperion/PriorityMuxer.cpp	/^void PriorityMuxer::timeTrigger()$/;"	f	class:PriorityMuxer
timeout	include/effectengine/ActiveEffectDefinition.h	/^	int timeout;$/;"	m	struct:ActiveEffectDefinition
timeoutTime	include/hyperion/AuthManager.h	/^		uint64_t timeoutTime;$/;"	m	struct:AuthManager::AuthDefinition
timeoutTime_ms	include/hyperion/PriorityMuxer.h	/^		int64_t timeoutTime_ms;$/;"	m	struct:PriorityMuxer::InputInfo
timer	libsrc/leddevice/dev_net/ProviderUdpSSL.h	/^	mbedtls_timing_delay_context timer;$/;"	m	class:ProviderUdpSSL
toIndex	include/utils/Image.h	/^	inline unsigned toIndex(const unsigned x, const unsigned y) const$/;"	f	class:Image
toRgb	include/utils/Image.h	/^	void toRgb(Image<ColorRgb>& image)$/;"	f	class:Image
toggleStateAllInstances	libsrc/hyperion/HyperionIManager.cpp	/^void HyperionIManager::toggleStateAllInstances(const bool& pause)$/;"	f	class:HyperionIManager
token	include/hyperion/AuthManager.h	/^		QString token;$/;"	m	struct:AuthManager::AuthDefinition
tokenExist	include/db/AuthTable.h	/^	inline bool tokenExist(const QString& token)$/;"	f	class:AuthTable
top	include/grabber/DispmanxFrameGrabberMock.h	/^	int top;$/;"	m	struct:VC_RECT_T
transferData	libsrc/leddevice/dev_net/LedDeviceFadeCandy.cpp	/^int LedDeviceFadeCandy::transferData()$/;"	f	class:LedDeviceFadeCandy
transferFrame	include/hyperion/GrabberWrapper.h	/^	bool transferFrame(Grabber_T &grabber)$/;"	f	class:GrabberWrapper
transferLedData	libsrc/leddevice/dev_tinker/LedDeviceTinkerforge.cpp	/^int LedDeviceTinkerforge::transferLedData(LEDStrip *ledStrip, unsigned index, unsigned length, uint8_t *redChannel, uint8_t *greenChannel, uint8_t *blueChannel)$/;"	f	class:LedDeviceTinkerforge
transform	libsrc/utils/RgbTransform.cpp	/^void RgbTransform::transform(uint8_t & red, uint8_t & green, uint8_t & blue)$/;"	f	class:RgbTransform
tryConnect	libsrc/leddevice/dev_net/LedDeviceFadeCandy.cpp	/^bool LedDeviceFadeCandy::tryConnect()$/;"	f	class:LedDeviceFadeCandy
tryOpen	libsrc/leddevice/dev_serial/ProviderRs232.cpp	/^bool ProviderRs232::tryOpen(const int delayAfterConnect_ms)$/;"	f	class:ProviderRs232
tryStart	libsrc/hyperion/GrabberWrapper.cpp	/^void GrabberWrapper::tryStart()$/;"	f	class:GrabberWrapper
type	include/utils/settings.h	/^	enum type  {$/;"	g	namespace:settings
type	libsrc/leddevice/dev_net/LedDeviceUdpE131.h	/^		uint8_t  type;$/;"	m	struct:__anon6::__anon7
typeToString	include/utils/settings.h	/^	inline QString typeToString(const type& type)$/;"	f	namespace:settings
uberdebug	libsrc/leddevice/dev_serial/LedDeviceDMX.cpp	101;"	d	file:
uint8_t_to_hex_string	libsrc/leddevice/LedDevice.cpp	/^QString LedDevice::uint8_t_to_hex_string(const uint8_t * data, const qint64 size, qint64 number) const$/;"	f	class:LedDevice
uint8_vector_to_hex_string	libsrc/leddevice/dev_net/LedDeviceNanoleaf.cpp	/^std::string LedDeviceNanoleaf:: uint8_vector_to_hex_string( const std::vector<uint8_t>& buffer ) const$/;"	f	class:LedDeviceNanoleaf
unblockAfterDelay	libsrc/leddevice/dev_hid/ProviderHID.cpp	/^void ProviderHID::unblockAfterDelay()$/;"	f	class:ProviderHID
uninit	libsrc/grabber/v4l2/V4L2Grabber.cpp	/^void V4L2Grabber::uninit()$/;"	f	class:V4L2Grabber
uninit_device	libsrc/grabber/v4l2/V4L2Grabber.cpp	/^void V4L2Grabber::uninit_device()$/;"	f	class:V4L2Grabber
uniqueServiceName	include/ssdp/SSDPDiscover.h	/^	QString uniqueServiceName;$/;"	m	struct:SSDPService
universe	libsrc/leddevice/dev_net/LedDeviceUdpE131.h	/^		uint16_t universe;$/;"	m	struct:__anon6::__anon7
unknown	include/blackborder/BlackBorderDetector.h	/^		bool unknown;$/;"	m	struct:hyperion::BlackBorder
unknownOptionNames	include/commandline/Parser.h	/^	QStringList unknownOptionNames() const$/;"	f	class:commandline::Parser
unregisterInput	libsrc/api/API.cpp	/^void API::unregisterInput(const int &priority)$/;"	f	class:API
update	libsrc/hyperion/Hyperion.cpp	/^void Hyperion::update()$/;"	f	class:Hyperion
updateBorder	libsrc/blackborder/BlackBorderProcessor.cpp	/^bool BlackBorderProcessor::updateBorder(const BlackBorder & newDetectedBorder)$/;"	f	class:BlackBorderProcessor
updateBrightnessComponents	libsrc/utils/RgbTransform.cpp	/^void RgbTransform::updateBrightnessComponents()$/;"	f	class:RgbTransform
updateConfig	libsrc/hyperion/LinearColorSmoothing.cpp	/^unsigned LinearColorSmoothing::updateConfig(unsigned cfgID, int settlingTime_ms, double ledUpdateFrequency_hz, unsigned updateDelay)$/;"	f	class:LinearColorSmoothing
updateEffects	libsrc/effectengine/EffectFileHandler.cpp	/^void EffectFileHandler::updateEffects()$/;"	f	class:EffectFileHandler
updateHyperionPassword	libsrc/api/API.cpp	/^bool API::updateHyperionPassword(const QString &password, const QString &newPassword)$/;"	f	class:API
updateInterval	libsrc/hyperion/LinearColorSmoothing.h	/^		int64_t  updateInterval;$/;"	m	struct:LinearColorSmoothing::SMOOTHING_CFG
updateLedColorsLength	libsrc/hyperion/PriorityMuxer.cpp	/^void PriorityMuxer::updateLedColorsLength(const int& ledCount)$/;"	f	class:PriorityMuxer
updateLedValues	libsrc/hyperion/LinearColorSmoothing.cpp	/^int LinearColorSmoothing::updateLedValues(const std::vector<ColorRgb>& ledValues)$/;"	f	class:LinearColorSmoothing
updateLeds	libsrc/hyperion/LinearColorSmoothing.cpp	/^void LinearColorSmoothing::updateLeds()$/;"	f	class:LinearColorSmoothing
updateLeds	libsrc/leddevice/LedDevice.cpp	/^int LedDevice::updateLeds(const std::vector<ColorRgb>& ledValues)$/;"	f	class:LedDevice
updateLights	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^bool LedDevicePhilipsHue::updateLights(const QMap<quint16, QJsonObject> &map)$/;"	f	class:LedDevicePhilipsHue
updateLights	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^bool LedDeviceYeelight::updateLights(const QVector<yeelightAddress> &list)$/;"	f	class:LedDeviceYeelight
updateRecord	libsrc/db/DBManager.cpp	/^bool DBManager::updateRecord(const VectorPair& conditions, const QVariantMap& columns) const$/;"	f	class:DBManager
updateScreenDimensions	libsrc/grabber/qt/QtGrabber.cpp	/^int QtGrabber::updateScreenDimensions(const bool& force)$/;"	f	class:QtGrabber
updateScreenDimensions	libsrc/grabber/x11/X11Grabber.cpp	/^int X11Grabber::updateScreenDimensions(bool force)$/;"	f	class:X11Grabber
updateSmoothingConfig	libsrc/hyperion/Hyperion.cpp	/^unsigned Hyperion::updateSmoothingConfig(unsigned id, int settlingTime_ms, double ledUpdateFrequency_hz, unsigned updateDelay)$/;"	f	class:Hyperion
updateUserPassword	include/db/AuthTable.h	/^	inline bool updateUserPassword(const QString& user, const QString& newPw)$/;"	f	class:AuthTable
updateUserPassword	libsrc/hyperion/AuthManager.cpp	/^bool AuthManager::updateUserPassword(const QString &user, const QString &pw, const QString &newPw)$/;"	f	class:AuthManager
updateUserUsed	include/db/AuthTable.h	/^	inline void updateUserUsed(const QString& user)$/;"	f	class:AuthTable
useChunked	libsrc/webserver/QtHttpReply.h	/^	bool              useChunked     (void) const { return m_useChunked;          };$/;"	f	class:QtHttpReply
userExist	include/db/AuthTable.h	/^	inline bool userExist(const QString& user)$/;"	f	class:AuthTable
utime	include/utils/Logger.h	/^		time_t       utime;$/;"	m	struct:Logger::__anon16
validate	libsrc/commandline/ColorOption.cpp	/^bool ColorOption::validate(Parser & parser, QString & value)$/;"	f	class:ColorOption
validate	libsrc/commandline/ColorsOption.cpp	/^bool ColorsOption::validate(Parser & parser, QString & value)$/;"	f	class:ColorsOption
validate	libsrc/commandline/ImageOption.cpp	/^bool ImageOption::validate(Parser & parser, QString & value)$/;"	f	class:ImageOption
validate	libsrc/commandline/Option.cpp	/^bool Option::validate(Parser & parser, QString &value)$/;"	f	class:Option
validate	libsrc/commandline/ValidatorOption.cpp	/^bool ValidatorOption::validate(Parser & parser, QString & value)$/;"	f	class:ValidatorOption
validate	libsrc/utils/JsonUtils.cpp	/^	bool validate(const QString& file, const QJsonObject& json, const QJsonObject& schema, Logger* log)$/;"	f	namespace:JsonUtils
validate	libsrc/utils/JsonUtils.cpp	/^	bool validate(const QString& file, const QJsonObject& json, const QString& schemaPath, Logger* log)$/;"	f	namespace:JsonUtils
validate	libsrc/utils/jsonschema/QJsonSchemaChecker.cpp	/^QPair<bool, bool> QJsonSchemaChecker::validate(const QJsonObject & value, bool ignoreRequired)$/;"	f	class:QJsonSchemaChecker
validate	libsrc/utils/jsonschema/QJsonSchemaChecker.cpp	/^void QJsonSchemaChecker::validate(const QJsonValue & value, const QJsonObject &schema)$/;"	f	class:QJsonSchemaChecker
validator	include/commandline/ValidatorOption.h	/^    const QValidator *validator;$/;"	m	class:commandline::ValidatorOption
value	include/commandline/Parser.h	/^	QString value(const Option &option) const$/;"	f	class:commandline::Parser
value	include/commandline/Parser.h	/^	QString value(const QString &optionName) const$/;"	f	class:commandline::Parser
value	libsrc/commandline/Option.cpp	/^QString Option::value(Parser &parser)$/;"	f	class:Option
value	libsrc/webserver/WebSocketUtils.h	/^	enum value$/;"	g	namespace:CLOSECODE
value	libsrc/webserver/WebSocketUtils.h	/^	enum value$/;"	g	namespace:OPCODE
values	include/commandline/Parser.h	/^	QStringList values(const Option &option) const$/;"	f	class:commandline::Parser
values	include/commandline/Parser.h	/^	QStringList values(const QString &optionName) const$/;"	f	class:commandline::Parser
vc_dispmanx_display_close	libsrc/grabber/dispmanx/DispmanxFrameGrabberMock.cpp	/^void vc_dispmanx_display_close(int)$/;"	f
vc_dispmanx_display_get_info	libsrc/grabber/dispmanx/DispmanxFrameGrabberMock.cpp	/^int vc_dispmanx_display_get_info(int, DISPMANX_MODEINFO_T *vc_info)$/;"	f
vc_dispmanx_display_open	libsrc/grabber/dispmanx/DispmanxFrameGrabberMock.cpp	/^int vc_dispmanx_display_open(int)$/;"	f
vc_dispmanx_rect_set	libsrc/grabber/dispmanx/DispmanxFrameGrabberMock.cpp	/^void vc_dispmanx_rect_set(VC_RECT_T *rectangle, int left, int top, int width, int height)$/;"	f
vc_dispmanx_resource_create	libsrc/grabber/dispmanx/DispmanxFrameGrabberMock.cpp	/^DISPMANX_RESOURCE_HANDLE_T vc_dispmanx_resource_create(int,int width,int height, uint32_t *)$/;"	f
vc_dispmanx_resource_delete	libsrc/grabber/dispmanx/DispmanxFrameGrabberMock.cpp	/^void vc_dispmanx_resource_delete(DISPMANX_RESOURCE_HANDLE_T resource)$/;"	f
vc_dispmanx_resource_read_data	libsrc/grabber/dispmanx/DispmanxFrameGrabberMock.cpp	/^int  vc_dispmanx_resource_read_data(DISPMANX_RESOURCE_HANDLE_T resource, VC_RECT_T *rectangle, void* capturePtr, unsigned capturePitch)$/;"	f
vc_dispmanx_snapshot	libsrc/grabber/dispmanx/DispmanxFrameGrabberMock.cpp	/^int vc_dispmanx_snapshot(int, DISPMANX_RESOURCE_HANDLE_T resource, int vc_flags)$/;"	f
verbose	libsrc/leddevice/dev_net/LedDeviceNanoleaf.cpp	/^const bool verbose  = false;$/;"	m	namespace:__anon2	file:
verbose	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^bool verbose = false;$/;"	v
verbose	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^const bool verbose  = false;$/;"	m	namespace:__anon3	file:
verbose3	libsrc/leddevice/dev_net/LedDeviceNanoleaf.cpp	/^const bool verbose3 = false;$/;"	m	namespace:__anon2	file:
verbose3	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^const bool verbose3  = false;$/;"	m	namespace:__anon3	file:
verifyAdjustments	libsrc/hyperion/MultiColorAdjustment.cpp	/^bool MultiColorAdjustment::verifyAdjustments() const$/;"	f	class:MultiColorAdjustment
verifyBorder	include/hyperion/ImageProcessor.h	/^	void verifyBorder(const Image<Pixel_T> & image)$/;"	f	class:ImageProcessor
verticalBorder	include/hyperion/ImageToLedsMap.h	/^		unsigned verticalBorder() { return _verticalBorder; };$/;"	f	class:hyperion::ImageToLedsMap
verticalSize	include/blackborder/BlackBorderDetector.h	/^		int verticalSize;$/;"	m	struct:hyperion::BlackBorder
videoMode2String	include/utils/VideoMode.h	/^inline QString videoMode2String(VideoMode mode)$/;"	f
wasOriginallyOn	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	bool wasOriginallyOn() const { return _power == API_METHOD_POWER_ON ? true : false; }$/;"	f	class:YeelightLight
white	include/utils/ColorRgbw.h	/^	uint8_t white;$/;"	m	struct:ColorRgbw
width	include/api/apiStructs.h	/^    int width;$/;"	m	struct:ImageCmdData
width	include/grabber/DispmanxFrameGrabberMock.h	/^	int width;$/;"	m	struct:DISPMANX_MODEINFO_T
width	include/grabber/DispmanxFrameGrabberMock.h	/^	int width;$/;"	m	struct:VC_RECT_T
width	include/utils/Image.h	/^	inline unsigned width() const$/;"	f	class:Image
width	libsrc/hyperion/ImageToLedsMap.cpp	/^unsigned ImageToLedsMap::width() const$/;"	f	class:ImageToLedsMap
wordSize	include/utils/SysInfo.h	/^		QString wordSize;$/;"	m	struct:SysInfo::HyperionSysInfo
wrapAbort	libsrc/effectengine/EffectModule.cpp	/^PyObject* EffectModule::wrapAbort(PyObject *self, PyObject *)$/;"	f	class:EffectModule
wrapGetImage	libsrc/effectengine/EffectModule.cpp	/^PyObject* EffectModule::wrapGetImage(PyObject *self, PyObject *args)$/;"	f	class:EffectModule
wrapImageCOffset	libsrc/effectengine/EffectModule.cpp	/^PyObject* EffectModule::wrapImageCOffset(PyObject *self, PyObject *args)$/;"	f	class:EffectModule
wrapImageCRotate	libsrc/effectengine/EffectModule.cpp	/^PyObject* EffectModule::wrapImageCRotate(PyObject *self, PyObject *args)$/;"	f	class:EffectModule
wrapImageCShear	libsrc/effectengine/EffectModule.cpp	/^PyObject* EffectModule::wrapImageCShear(PyObject *self, PyObject *args)$/;"	f	class:EffectModule
wrapImageConicalGradient	libsrc/effectengine/EffectModule.cpp	/^PyObject* EffectModule::wrapImageConicalGradient(PyObject *self, PyObject *args)$/;"	f	class:EffectModule
wrapImageDrawLine	libsrc/effectengine/EffectModule.cpp	/^PyObject* EffectModule::wrapImageDrawLine(PyObject *self, PyObject *args)$/;"	f	class:EffectModule
wrapImageDrawPie	libsrc/effectengine/EffectModule.cpp	/^PyObject* EffectModule::wrapImageDrawPie(PyObject *self, PyObject *args)$/;"	f	class:EffectModule
wrapImageDrawPoint	libsrc/effectengine/EffectModule.cpp	/^PyObject* EffectModule::wrapImageDrawPoint(PyObject *self, PyObject *args)$/;"	f	class:EffectModule
wrapImageDrawPolygon	libsrc/effectengine/EffectModule.cpp	/^PyObject* EffectModule::wrapImageDrawPolygon(PyObject *self, PyObject *args)$/;"	f	class:EffectModule
wrapImageDrawRect	libsrc/effectengine/EffectModule.cpp	/^PyObject* EffectModule::wrapImageDrawRect(PyObject *self, PyObject *args)$/;"	f	class:EffectModule
wrapImageGetPixel	libsrc/effectengine/EffectModule.cpp	/^PyObject* EffectModule::wrapImageGetPixel(PyObject *self, PyObject *args)$/;"	f	class:EffectModule
wrapImageHeight	libsrc/effectengine/EffectModule.cpp	/^PyObject* EffectModule::wrapImageHeight(PyObject *self, PyObject *args)$/;"	f	class:EffectModule
wrapImageLinearGradient	libsrc/effectengine/EffectModule.cpp	/^PyObject* EffectModule::wrapImageLinearGradient(PyObject *self, PyObject *args)$/;"	f	class:EffectModule
wrapImageMinSize	libsrc/effectengine/EffectModule.cpp	/^PyObject* EffectModule::wrapImageMinSize(PyObject *self, PyObject *args)$/;"	f	class:EffectModule
wrapImageRadialGradient	libsrc/effectengine/EffectModule.cpp	/^PyObject* EffectModule::wrapImageRadialGradient(PyObject *self, PyObject *args)$/;"	f	class:EffectModule
wrapImageResetT	libsrc/effectengine/EffectModule.cpp	/^PyObject* EffectModule::wrapImageResetT(PyObject *self, PyObject *args)$/;"	f	class:EffectModule
wrapImageSave	libsrc/effectengine/EffectModule.cpp	/^PyObject* EffectModule::wrapImageSave(PyObject *self, PyObject *args)$/;"	f	class:EffectModule
wrapImageSetPixel	libsrc/effectengine/EffectModule.cpp	/^PyObject* EffectModule::wrapImageSetPixel(PyObject *self, PyObject *args)$/;"	f	class:EffectModule
wrapImageShow	libsrc/effectengine/EffectModule.cpp	/^PyObject* EffectModule::wrapImageShow(PyObject *self, PyObject *args)$/;"	f	class:EffectModule
wrapImageSolidFill	libsrc/effectengine/EffectModule.cpp	/^PyObject* EffectModule::wrapImageSolidFill(PyObject *self, PyObject *args)$/;"	f	class:EffectModule
wrapImageWidth	libsrc/effectengine/EffectModule.cpp	/^PyObject* EffectModule::wrapImageWidth(PyObject *self, PyObject *args)$/;"	f	class:EffectModule
wrapSetColor	libsrc/effectengine/EffectModule.cpp	/^PyObject* EffectModule::wrapSetColor(PyObject *self, PyObject *args)$/;"	f	class:EffectModule
wrapSetImage	libsrc/effectengine/EffectModule.cpp	/^PyObject* EffectModule::wrapSetImage(PyObject *self, PyObject *args)$/;"	f	class:EffectModule
write	libsrc/hyperion/LinearColorSmoothing.cpp	/^int LinearColorSmoothing::write(const std::vector<ColorRgb> &ledValues)$/;"	f	class:LinearColorSmoothing
write	libsrc/leddevice/LedDeviceTemplate.cpp	/^int LedDeviceTemplate::write(const std::vector<ColorRgb> & ledValues)$/;"	f	class:LedDeviceTemplate
write	libsrc/leddevice/dev_hid/LedDeviceHyperionUsbasp.cpp	/^int LedDeviceHyperionUsbasp::write(const std::vector<ColorRgb> &ledValues)$/;"	f	class:LedDeviceHyperionUsbasp
write	libsrc/leddevice/dev_hid/LedDeviceLightpack.cpp	/^int LedDeviceLightpack::write(const ColorRgb * ledValues, int size)$/;"	f	class:LedDeviceLightpack
write	libsrc/leddevice/dev_hid/LedDeviceLightpack.cpp	/^int LedDeviceLightpack::write(const std::vector<ColorRgb> &ledValues)$/;"	f	class:LedDeviceLightpack
write	libsrc/leddevice/dev_hid/LedDeviceMultiLightpack.cpp	/^int LedDeviceMultiLightpack::write(const std::vector<ColorRgb> &ledValues)$/;"	f	class:LedDeviceMultiLightpack
write	libsrc/leddevice/dev_hid/LedDevicePaintpack.cpp	/^int LedDevicePaintpack::write(const std::vector<ColorRgb> & ledValues)$/;"	f	class:LedDevicePaintpack
write	libsrc/leddevice/dev_hid/LedDeviceRawHID.cpp	/^int LedDeviceRawHID::write(const std::vector<ColorRgb> & ledValues)$/;"	f	class:LedDeviceRawHID
write	libsrc/leddevice/dev_net/LedDeviceAtmoOrb.cpp	/^int LedDeviceAtmoOrb::write(const std::vector <ColorRgb> &ledValues)$/;"	f	class:LedDeviceAtmoOrb
write	libsrc/leddevice/dev_net/LedDeviceFadeCandy.cpp	/^int LedDeviceFadeCandy::write( const std::vector<ColorRgb> & ledValues )$/;"	f	class:LedDeviceFadeCandy
write	libsrc/leddevice/dev_net/LedDeviceNanoleaf.cpp	/^int LedDeviceNanoleaf::write(const std::vector<ColorRgb> & ledValues)$/;"	f	class:LedDeviceNanoleaf
write	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^int LedDevicePhilipsHue::write(const std::vector<ColorRgb> & ledValues)$/;"	f	class:LedDevicePhilipsHue
write	libsrc/leddevice/dev_net/LedDeviceTpm2net.cpp	/^int LedDeviceTpm2net::write(const std::vector<ColorRgb> &ledValues)$/;"	f	class:LedDeviceTpm2net
write	libsrc/leddevice/dev_net/LedDeviceUdpArtNet.cpp	/^int LedDeviceUdpArtNet::write(const std::vector<ColorRgb> &ledValues)$/;"	f	class:LedDeviceUdpArtNet
write	libsrc/leddevice/dev_net/LedDeviceUdpE131.cpp	/^int LedDeviceUdpE131::write(const std::vector<ColorRgb> &ledValues)$/;"	f	class:LedDeviceUdpE131
write	libsrc/leddevice/dev_net/LedDeviceUdpH801.cpp	/^int LedDeviceUdpH801::write(const std::vector<ColorRgb> &ledValues)$/;"	f	class:LedDeviceUdpH801
write	libsrc/leddevice/dev_net/LedDeviceUdpRaw.cpp	/^int LedDeviceUdpRaw::write(const std::vector<ColorRgb> &ledValues)$/;"	f	class:LedDeviceUdpRaw
write	libsrc/leddevice/dev_net/LedDeviceWled.cpp	/^int LedDeviceWled::write(const std::vector<ColorRgb> &ledValues)$/;"	f	class:LedDeviceWled
write	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^int LedDeviceYeelight::write(const std::vector<ColorRgb> & ledValues)$/;"	f	class:LedDeviceYeelight
write	libsrc/leddevice/dev_other/LedDeviceFile.cpp	/^int LedDeviceFile::write(const std::vector<ColorRgb> & ledValues)$/;"	f	class:LedDeviceFile
write	libsrc/leddevice/dev_other/LedDevicePiBlaster.cpp	/^int LedDevicePiBlaster::write(const std::vector<ColorRgb> & ledValues)$/;"	f	class:LedDevicePiBlaster
write	libsrc/leddevice/dev_rpi_pwm/LedDeviceWS281x.cpp	/^int LedDeviceWS281x::write(const std::vector<ColorRgb> &ledValues)$/;"	f	class:LedDeviceWS281x
write	libsrc/leddevice/dev_serial/LedDeviceAdalight.cpp	/^int LedDeviceAdalight::write(const std::vector<ColorRgb> & ledValues)$/;"	f	class:LedDeviceAdalight
write	libsrc/leddevice/dev_serial/LedDeviceAtmo.cpp	/^int LedDeviceAtmo::write(const std::vector<ColorRgb> &ledValues)$/;"	f	class:LedDeviceAtmo
write	libsrc/leddevice/dev_serial/LedDeviceDMX.cpp	/^int LedDeviceDMX::write(const std::vector<ColorRgb> &ledValues)$/;"	f	class:LedDeviceDMX
write	libsrc/leddevice/dev_serial/LedDeviceKarate.cpp	/^int LedDeviceKarate::write(const std::vector<ColorRgb> &ledValues)$/;"	f	class:LedDeviceKarate
write	libsrc/leddevice/dev_serial/LedDeviceSedu.cpp	/^int LedDeviceSedu::write(const std::vector<ColorRgb> &ledValues)$/;"	f	class:LedDeviceSedu
write	libsrc/leddevice/dev_serial/LedDeviceTpm2.cpp	/^int LedDeviceTpm2::write(const std::vector<ColorRgb> &ledValues)$/;"	f	class:LedDeviceTpm2
write	libsrc/leddevice/dev_spi/LedDeviceAPA102.cpp	/^int LedDeviceAPA102::write(const std::vector<ColorRgb> &ledValues)$/;"	f	class:LedDeviceAPA102
write	libsrc/leddevice/dev_spi/LedDeviceAPA104.cpp	/^int LedDeviceAPA104::write(const std::vector<ColorRgb> &ledValues)$/;"	f	class:LedDeviceAPA104
write	libsrc/leddevice/dev_spi/LedDeviceLpd6803.cpp	/^int LedDeviceLpd6803::write(const std::vector<ColorRgb> &ledValues)$/;"	f	class:LedDeviceLpd6803
write	libsrc/leddevice/dev_spi/LedDeviceLpd8806.cpp	/^int LedDeviceLpd8806::write(const std::vector<ColorRgb> &ledValues)$/;"	f	class:LedDeviceLpd8806
write	libsrc/leddevice/dev_spi/LedDeviceP9813.cpp	/^int LedDeviceP9813::write(const std::vector<ColorRgb> &ledValues)$/;"	f	class:LedDeviceP9813
write	libsrc/leddevice/dev_spi/LedDeviceSk6812SPI.cpp	/^int LedDeviceSk6812SPI::write(const std::vector<ColorRgb> &ledValues)$/;"	f	class:LedDeviceSk6812SPI
write	libsrc/leddevice/dev_spi/LedDeviceSk6822SPI.cpp	/^int LedDeviceSk6822SPI::write(const std::vector<ColorRgb> &ledValues)$/;"	f	class:LedDeviceSk6822SPI
write	libsrc/leddevice/dev_spi/LedDeviceWs2801.cpp	/^int LedDeviceWs2801::write(const std::vector<ColorRgb> &ledValues)$/;"	f	class:LedDeviceWs2801
write	libsrc/leddevice/dev_spi/LedDeviceWs2812SPI.cpp	/^int LedDeviceWs2812SPI::write(const std::vector<ColorRgb> &ledValues)$/;"	f	class:LedDeviceWs2812SPI
write	libsrc/leddevice/dev_tinker/LedDeviceTinkerforge.cpp	/^int LedDeviceTinkerforge::write(const std::vector<ColorRgb> &ledValues)$/;"	f	class:LedDeviceTinkerforge
write	libsrc/utils/JsonUtils.cpp	/^	bool write(const QString& filename, const QJsonObject& json, Logger* log)$/;"	f	namespace:JsonUtils
writeBlack	libsrc/leddevice/LedDevice.cpp	/^int LedDevice::writeBlack(int numberOfBlack)$/;"	f	class:LedDevice
writeBytes	libsrc/leddevice/dev_hid/LedDeviceLightpack.cpp	/^int LedDeviceLightpack::writeBytes(uint8_t *data, int size)$/;"	f	class:LedDeviceLightpack
writeBytes	libsrc/leddevice/dev_hid/ProviderHID.cpp	/^int ProviderHID::writeBytes(const unsigned size, const uint8_t * data)$/;"	f	class:ProviderHID
writeBytes	libsrc/leddevice/dev_net/ProviderUdp.cpp	/^int ProviderUdp::writeBytes(const unsigned size, const uint8_t * data)$/;"	f	class:ProviderUdp
writeBytes	libsrc/leddevice/dev_net/ProviderUdpSSL.cpp	/^void ProviderUdpSSL::writeBytes(const unsigned size, const unsigned char * data)$/;"	f	class:ProviderUdpSSL
writeBytes	libsrc/leddevice/dev_serial/ProviderRs232.cpp	/^int ProviderRs232::writeBytes(const qint64 size, const uint8_t *data)$/;"	f	class:ProviderRs232
writeBytes	libsrc/leddevice/dev_spi/ProviderSpi.cpp	/^int ProviderSpi::writeBytes(const unsigned size, const uint8_t * data)$/;"	f	class:ProviderSpi
writeCommand	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^int YeelightLight::writeCommand( const QJsonDocument &command )$/;"	f	class:YeelightLight
writeCommand	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^int YeelightLight::writeCommand( const QJsonDocument &command, QJsonArray &result )$/;"	f	class:YeelightLight
writeFile	libsrc/utils/FileUtils.cpp	/^	bool writeFile(const QString& path, const QByteArray& data, Logger* log)$/;"	f	namespace:FileUtils
writeJson	include/utils/jsonschema/QJsonFactory.h	/^	static bool writeJson(const QString& filename, QJsonObject& jsonTree)$/;"	f	class:QJsonFactory
writeSingleLights	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^int LedDevicePhilipsHue::writeSingleLights(const std::vector<ColorRgb>& ledValues)$/;"	f	class:LedDevicePhilipsHue
writeStream	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^void LedDevicePhilipsHue::writeStream()$/;"	f	class:LedDevicePhilipsHue
x	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	double x;$/;"	m	struct:CiColor
x	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	double x;$/;"	m	struct:XYColor
xioctl	libsrc/grabber/v4l2/V4L2Grabber.cpp	/^int V4L2Grabber::xioctl(int fileDescriptor, int request, void *arg)$/;"	f	class:V4L2Grabber
xioctl	libsrc/grabber/v4l2/V4L2Grabber.cpp	/^int V4L2Grabber::xioctl(int request, void *arg)$/;"	f	class:V4L2Grabber
y	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	double y;$/;"	m	struct:CiColor
y	libsrc/leddevice/dev_net/LedDevicePhilipsHue.h	/^	double y;$/;"	m	struct:XYColor
yeelightAddress	libsrc/leddevice/dev_net/LedDeviceYeelight.h	/^	struct yeelightAddress {$/;"	s	class:LedDeviceYeelight
yuv2rgb	libsrc/utils/ImageResampler.cpp	/^void ImageResampler::yuv2rgb(uint8_t y, uint8_t u, uint8_t v, uint8_t &r, uint8_t &g, uint8_t &b)$/;"	f	class:ImageResampler
~AmlogicGrabber	libsrc/grabber/amlogic/AmlogicGrabber.cpp	/^AmlogicGrabber::~AmlogicGrabber()$/;"	f	class:AmlogicGrabber
~AuthTable	include/db/AuthTable.h	/^	~AuthTable(){};$/;"	f	class:AuthTable
~BlackBorderProcessor	libsrc/blackborder/BlackBorderProcessor.cpp	/^BlackBorderProcessor::~BlackBorderProcessor()$/;"	f	class:BlackBorderProcessor
~BoblightClientConnection	libsrc/boblightserver/BoblightClientConnection.cpp	/^BoblightClientConnection::~BoblightClientConnection()$/;"	f	class:BoblightClientConnection
~BoblightServer	libsrc/boblightserver/BoblightServer.cpp	/^BoblightServer::~BoblightServer()$/;"	f	class:BoblightServer
~BonjourServiceBrowser	libsrc/bonjour/bonjourservicebrowser.cpp	/^BonjourServiceBrowser::~BonjourServiceBrowser()$/;"	f	class:BonjourServiceBrowser
~BonjourServiceRegister	libsrc/bonjour/bonjourserviceregister.cpp	/^BonjourServiceRegister::~BonjourServiceRegister()$/;"	f	class:BonjourServiceRegister
~BonjourServiceResolver	libsrc/bonjour/bonjourserviceresolver.cpp	/^BonjourServiceResolver::~BonjourServiceResolver()$/;"	f	class:BonjourServiceResolver
~ComponentRegister	libsrc/hyperion/ComponentRegister.cpp	/^ComponentRegister::~ComponentRegister()$/;"	f	class:ComponentRegister
~DBManager	libsrc/db/DBManager.cpp	/^DBManager::~DBManager()$/;"	f	class:DBManager
~DispmanxFrameGrabber	libsrc/grabber/dispmanx/DispmanxFrameGrabber.cpp	/^DispmanxFrameGrabber::~DispmanxFrameGrabber()$/;"	f	class:DispmanxFrameGrabber
~Effect	libsrc/effectengine/Effect.cpp	/^Effect::~Effect()$/;"	f	class:Effect
~EffectEngine	libsrc/effectengine/EffectEngine.cpp	/^EffectEngine::~EffectEngine()$/;"	f	class:EffectEngine
~FlatBufferConnection	libsrc/flatbufserver/FlatBufferConnection.cpp	/^FlatBufferConnection::~FlatBufferConnection()$/;"	f	class:FlatBufferConnection
~FlatBufferServer	libsrc/flatbufserver/FlatBufferServer.cpp	/^FlatBufferServer::~FlatBufferServer()$/;"	f	class:FlatBufferServer
~GrabberWrapper	libsrc/hyperion/GrabberWrapper.cpp	/^GrabberWrapper::~GrabberWrapper()$/;"	f	class:GrabberWrapper
~Hyperion	libsrc/hyperion/Hyperion.cpp	/^Hyperion::~Hyperion()$/;"	f	class:Hyperion
~Image	include/utils/Image.h	/^	~Image()$/;"	f	class:Image
~ImageProcessor	libsrc/hyperion/ImageProcessor.cpp	/^ImageProcessor::~ImageProcessor()$/;"	f	class:ImageProcessor
~ImageResampler	libsrc/utils/ImageResampler.cpp	/^ImageResampler::~ImageResampler()$/;"	f	class:ImageResampler
~InstanceTable	include/db/InstanceTable.h	/^	~InstanceTable(){};$/;"	f	class:InstanceTable
~JsonServer	libsrc/jsonserver/JsonServer.cpp	/^JsonServer::~JsonServer()$/;"	f	class:JsonServer
~LedDevice	libsrc/leddevice/LedDevice.cpp	/^LedDevice::~LedDevice()$/;"	f	class:LedDevice
~LedDeviceAtmoOrb	libsrc/leddevice/dev_net/LedDeviceAtmoOrb.cpp	/^LedDeviceAtmoOrb::~LedDeviceAtmoOrb()$/;"	f	class:LedDeviceAtmoOrb
~LedDeviceFadeCandy	libsrc/leddevice/dev_net/LedDeviceFadeCandy.cpp	/^LedDeviceFadeCandy::~LedDeviceFadeCandy()$/;"	f	class:LedDeviceFadeCandy
~LedDeviceFile	libsrc/leddevice/dev_other/LedDeviceFile.cpp	/^LedDeviceFile::~LedDeviceFile()$/;"	f	class:LedDeviceFile
~LedDeviceHyperionUsbasp	libsrc/leddevice/dev_hid/LedDeviceHyperionUsbasp.cpp	/^LedDeviceHyperionUsbasp::~LedDeviceHyperionUsbasp()$/;"	f	class:LedDeviceHyperionUsbasp
~LedDeviceLightpack	libsrc/leddevice/dev_hid/LedDeviceLightpack.cpp	/^LedDeviceLightpack::~LedDeviceLightpack()$/;"	f	class:LedDeviceLightpack
~LedDeviceMultiLightpack	libsrc/leddevice/dev_hid/LedDeviceMultiLightpack.cpp	/^LedDeviceMultiLightpack::~LedDeviceMultiLightpack()$/;"	f	class:LedDeviceMultiLightpack
~LedDeviceNanoleaf	libsrc/leddevice/dev_net/LedDeviceNanoleaf.cpp	/^LedDeviceNanoleaf::~LedDeviceNanoleaf()$/;"	f	class:LedDeviceNanoleaf
~LedDevicePhilipsHue	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^LedDevicePhilipsHue::~LedDevicePhilipsHue()$/;"	f	class:LedDevicePhilipsHue
~LedDevicePhilipsHueBridge	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^LedDevicePhilipsHueBridge::~LedDevicePhilipsHueBridge()$/;"	f	class:LedDevicePhilipsHueBridge
~LedDevicePiBlaster	libsrc/leddevice/dev_other/LedDevicePiBlaster.cpp	/^LedDevicePiBlaster::~LedDevicePiBlaster()$/;"	f	class:LedDevicePiBlaster
~LedDeviceTinkerforge	libsrc/leddevice/dev_tinker/LedDeviceTinkerforge.cpp	/^LedDeviceTinkerforge::~LedDeviceTinkerforge()$/;"	f	class:LedDeviceTinkerforge
~LedDeviceWS281x	libsrc/leddevice/dev_rpi_pwm/LedDeviceWS281x.cpp	/^LedDeviceWS281x::~LedDeviceWS281x()$/;"	f	class:LedDeviceWS281x
~LedDeviceWled	libsrc/leddevice/dev_net/LedDeviceWled.cpp	/^LedDeviceWled::~LedDeviceWled()$/;"	f	class:LedDeviceWled
~LedDeviceWrapper	libsrc/leddevice/LedDeviceWrapper.cpp	/^LedDeviceWrapper::~LedDeviceWrapper()$/;"	f	class:LedDeviceWrapper
~LedDeviceYeelight	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^LedDeviceYeelight::~LedDeviceYeelight()$/;"	f	class:LedDeviceYeelight
~LedString	libsrc/hyperion/LedString.cpp	/^LedString::~LedString()$/;"	f	class:LedString
~Logger	libsrc/utils/Logger.cpp	/^Logger::~Logger()$/;"	f	class:Logger
~MessageForwarder	libsrc/hyperion/MessageForwarder.cpp	/^MessageForwarder::~MessageForwarder()$/;"	f	class:MessageForwarder
~MetaTable	include/db/MetaTable.h	/^	~MetaTable(){};$/;"	f	class:MetaTable
~MultiColorAdjustment	libsrc/hyperion/MultiColorAdjustment.cpp	/^MultiColorAdjustment::~MultiColorAdjustment()$/;"	f	class:MultiColorAdjustment
~OsxFrameGrabber	libsrc/grabber/osx/OsxFrameGrabber.cpp	/^OsxFrameGrabber::~OsxFrameGrabber()$/;"	f	class:OsxFrameGrabber
~Parser	libsrc/commandline/Parser.cpp	/^Parser::~Parser()$/;"	f	class:Parser
~PhilipsHueLight	libsrc/leddevice/dev_net/LedDevicePhilipsHue.cpp	/^PhilipsHueLight::~PhilipsHueLight()$/;"	f	class:PhilipsHueLight
~PriorityMuxer	libsrc/hyperion/PriorityMuxer.cpp	/^PriorityMuxer::~PriorityMuxer()$/;"	f	class:PriorityMuxer
~Profiler	libsrc/utils/Profiler.cpp	/^Profiler::~Profiler()$/;"	f	class:Profiler
~ProtoServer	libsrc/protoserver/ProtoServer.cpp	/^ProtoServer::~ProtoServer()$/;"	f	class:ProtoServer
~ProviderHID	libsrc/leddevice/dev_hid/ProviderHID.cpp	/^ProviderHID::~ProviderHID()$/;"	f	class:ProviderHID
~ProviderRestApi	libsrc/leddevice/dev_net/ProviderRestApi.cpp	/^ProviderRestApi::~ProviderRestApi()$/;"	f	class:ProviderRestApi
~ProviderRs232	libsrc/leddevice/dev_serial/ProviderRs232.cpp	/^ProviderRs232::~ProviderRs232()$/;"	f	class:ProviderRs232
~ProviderSpi	libsrc/leddevice/dev_spi/ProviderSpi.cpp	/^ProviderSpi::~ProviderSpi()$/;"	f	class:ProviderSpi
~ProviderUdp	libsrc/leddevice/dev_net/ProviderUdp.cpp	/^ProviderUdp::~ProviderUdp()$/;"	f	class:ProviderUdp
~ProviderUdpSSL	libsrc/leddevice/dev_net/ProviderUdpSSL.cpp	/^ProviderUdpSSL::~ProviderUdpSSL()$/;"	f	class:ProviderUdpSSL
~PythonInit	libsrc/python/PythonInit.cpp	/^PythonInit::~PythonInit()$/;"	f	class:PythonInit
~QJsonSchemaChecker	libsrc/utils/jsonschema/QJsonSchemaChecker.cpp	/^QJsonSchemaChecker::~QJsonSchemaChecker()$/;"	f	class:QJsonSchemaChecker
~QtGrabber	libsrc/grabber/qt/QtGrabber.cpp	/^QtGrabber::~QtGrabber()$/;"	f	class:QtGrabber
~QtHttpServerWrapper	libsrc/webserver/QtHttpServer.cpp	/^QtHttpServerWrapper::~QtHttpServerWrapper (void)$/;"	f	class:QtHttpServerWrapper
~RgbChannelAdjustment	libsrc/utils/RgbChannelAdjustment.cpp	/^RgbChannelAdjustment::~RgbChannelAdjustment()$/;"	f	class:RgbChannelAdjustment
~SSDPHandler	libsrc/ssdp/SSDPHandler.cpp	/^SSDPHandler::~SSDPHandler()$/;"	f	class:SSDPHandler
~SSDPServer	libsrc/ssdp/SSDPServer.cpp	/^SSDPServer::~SSDPServer()$/;"	f	class:SSDPServer
~SettingsTable	include/db/SettingsTable.h	/^	~SettingsTable(){};$/;"	f	class:SettingsTable
~StaticFileServing	libsrc/webserver/StaticFileServing.cpp	/^StaticFileServing::~StaticFileServing ()$/;"	f	class:StaticFileServing
~SwitchOption	include/commandline/SwitchOption.h	/^	virtual ~SwitchOption() {}$/;"	f	class:commandline::SwitchOption
~V4L2Grabber	libsrc/grabber/v4l2/V4L2Grabber.cpp	/^V4L2Grabber::~V4L2Grabber()$/;"	f	class:V4L2Grabber
~V4L2Wrapper	libsrc/grabber/v4l2/V4L2Wrapper.cpp	/^V4L2Wrapper::~V4L2Wrapper()$/;"	f	class:V4L2Wrapper
~WebServer	libsrc/webserver/WebServer.cpp	/^WebServer::~WebServer()$/;"	f	class:WebServer
~X11Grabber	libsrc/grabber/x11/X11Grabber.cpp	/^X11Grabber::~X11Grabber()$/;"	f	class:X11Grabber
~X11Wrapper	libsrc/grabber/x11/X11Wrapper.cpp	/^X11Wrapper::~X11Wrapper()$/;"	f	class:X11Wrapper
~YeelightLight	libsrc/leddevice/dev_net/LedDeviceYeelight.cpp	/^YeelightLight::~YeelightLight()$/;"	f	class:YeelightLight
